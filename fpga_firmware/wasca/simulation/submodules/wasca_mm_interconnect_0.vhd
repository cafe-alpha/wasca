-- wasca_mm_interconnect_0.vhd

-- This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 15.0 145

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity wasca_mm_interconnect_0 is
	port (
		altpll_0_c0_clk                                            : in  std_logic                     := '0';             --                                          altpll_0_c0.clk
		clk_0_clk_clk                                              : in  std_logic                     := '0';             --                                            clk_0_clk.clk
		altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset : in  std_logic                     := '0';             -- altpll_0_inclk_interface_reset_reset_bridge_in_reset.reset
		sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset : in  std_logic                     := '0';             -- sega_saturn_abus_slave_0_reset_reset_bridge_in_reset.reset
		nios2_gen2_0_data_master_address                           : in  std_logic_vector(26 downto 0) := (others => '0'); --                             nios2_gen2_0_data_master.address
		nios2_gen2_0_data_master_waitrequest                       : out std_logic;                                        --                                                     .waitrequest
		nios2_gen2_0_data_master_byteenable                        : in  std_logic_vector(3 downto 0)  := (others => '0'); --                                                     .byteenable
		nios2_gen2_0_data_master_read                              : in  std_logic                     := '0';             --                                                     .read
		nios2_gen2_0_data_master_readdata                          : out std_logic_vector(31 downto 0);                    --                                                     .readdata
		nios2_gen2_0_data_master_write                             : in  std_logic                     := '0';             --                                                     .write
		nios2_gen2_0_data_master_writedata                         : in  std_logic_vector(31 downto 0) := (others => '0'); --                                                     .writedata
		nios2_gen2_0_data_master_debugaccess                       : in  std_logic                     := '0';             --                                                     .debugaccess
		nios2_gen2_0_instruction_master_address                    : in  std_logic_vector(17 downto 0) := (others => '0'); --                      nios2_gen2_0_instruction_master.address
		nios2_gen2_0_instruction_master_waitrequest                : out std_logic;                                        --                                                     .waitrequest
		nios2_gen2_0_instruction_master_read                       : in  std_logic                     := '0';             --                                                     .read
		nios2_gen2_0_instruction_master_readdata                   : out std_logic_vector(31 downto 0);                    --                                                     .readdata
		sega_saturn_abus_slave_0_avalon_master_address             : in  std_logic_vector(25 downto 0) := (others => '0'); --               sega_saturn_abus_slave_0_avalon_master.address
		sega_saturn_abus_slave_0_avalon_master_waitrequest         : out std_logic;                                        --                                                     .waitrequest
		sega_saturn_abus_slave_0_avalon_master_burstcount          : in  std_logic_vector(0 downto 0)  := (others => '0'); --                                                     .burstcount
		sega_saturn_abus_slave_0_avalon_master_read                : in  std_logic                     := '0';             --                                                     .read
		sega_saturn_abus_slave_0_avalon_master_readdata            : out std_logic_vector(15 downto 0);                    --                                                     .readdata
		sega_saturn_abus_slave_0_avalon_master_readdatavalid       : out std_logic;                                        --                                                     .readdatavalid
		sega_saturn_abus_slave_0_avalon_master_write               : in  std_logic                     := '0';             --                                                     .write
		sega_saturn_abus_slave_0_avalon_master_writedata           : in  std_logic_vector(15 downto 0) := (others => '0'); --                                                     .writedata
		altpll_0_pll_slave_address                                 : out std_logic_vector(1 downto 0);                     --                                   altpll_0_pll_slave.address
		altpll_0_pll_slave_write                                   : out std_logic;                                        --                                                     .write
		altpll_0_pll_slave_read                                    : out std_logic;                                        --                                                     .read
		altpll_0_pll_slave_readdata                                : in  std_logic_vector(31 downto 0) := (others => '0'); --                                                     .readdata
		altpll_0_pll_slave_writedata                               : out std_logic_vector(31 downto 0);                    --                                                     .writedata
		external_sdram_controller_s1_address                       : out std_logic_vector(24 downto 0);                    --                         external_sdram_controller_s1.address
		external_sdram_controller_s1_write                         : out std_logic;                                        --                                                     .write
		external_sdram_controller_s1_read                          : out std_logic;                                        --                                                     .read
		external_sdram_controller_s1_readdata                      : in  std_logic_vector(15 downto 0) := (others => '0'); --                                                     .readdata
		external_sdram_controller_s1_writedata                     : out std_logic_vector(15 downto 0);                    --                                                     .writedata
		external_sdram_controller_s1_byteenable                    : out std_logic_vector(1 downto 0);                     --                                                     .byteenable
		external_sdram_controller_s1_readdatavalid                 : in  std_logic                     := '0';             --                                                     .readdatavalid
		external_sdram_controller_s1_waitrequest                   : in  std_logic                     := '0';             --                                                     .waitrequest
		external_sdram_controller_s1_chipselect                    : out std_logic;                                        --                                                     .chipselect
		nios2_gen2_0_debug_mem_slave_address                       : out std_logic_vector(8 downto 0);                     --                         nios2_gen2_0_debug_mem_slave.address
		nios2_gen2_0_debug_mem_slave_write                         : out std_logic;                                        --                                                     .write
		nios2_gen2_0_debug_mem_slave_read                          : out std_logic;                                        --                                                     .read
		nios2_gen2_0_debug_mem_slave_readdata                      : in  std_logic_vector(31 downto 0) := (others => '0'); --                                                     .readdata
		nios2_gen2_0_debug_mem_slave_writedata                     : out std_logic_vector(31 downto 0);                    --                                                     .writedata
		nios2_gen2_0_debug_mem_slave_byteenable                    : out std_logic_vector(3 downto 0);                     --                                                     .byteenable
		nios2_gen2_0_debug_mem_slave_waitrequest                   : in  std_logic                     := '0';             --                                                     .waitrequest
		nios2_gen2_0_debug_mem_slave_debugaccess                   : out std_logic;                                        --                                                     .debugaccess
		onchip_flash_0_data_address                                : out std_logic_vector(14 downto 0);                    --                                  onchip_flash_0_data.address
		onchip_flash_0_data_read                                   : out std_logic;                                        --                                                     .read
		onchip_flash_0_data_readdata                               : in  std_logic_vector(31 downto 0) := (others => '0'); --                                                     .readdata
		onchip_flash_0_data_burstcount                             : out std_logic_vector(3 downto 0);                     --                                                     .burstcount
		onchip_flash_0_data_readdatavalid                          : in  std_logic                     := '0';             --                                                     .readdatavalid
		onchip_flash_0_data_waitrequest                            : in  std_logic                     := '0';             --                                                     .waitrequest
		onchip_memory2_0_s1_address                                : out std_logic_vector(9 downto 0);                     --                                  onchip_memory2_0_s1.address
		onchip_memory2_0_s1_write                                  : out std_logic;                                        --                                                     .write
		onchip_memory2_0_s1_readdata                               : in  std_logic_vector(31 downto 0) := (others => '0'); --                                                     .readdata
		onchip_memory2_0_s1_writedata                              : out std_logic_vector(31 downto 0);                    --                                                     .writedata
		onchip_memory2_0_s1_byteenable                             : out std_logic_vector(3 downto 0);                     --                                                     .byteenable
		onchip_memory2_0_s1_chipselect                             : out std_logic;                                        --                                                     .chipselect
		onchip_memory2_0_s1_clken                                  : out std_logic;                                        --                                                     .clken
		pio_0_s1_address                                           : out std_logic_vector(1 downto 0);                     --                                             pio_0_s1.address
		pio_0_s1_write                                             : out std_logic;                                        --                                                     .write
		pio_0_s1_readdata                                          : in  std_logic_vector(31 downto 0) := (others => '0'); --                                                     .readdata
		pio_0_s1_writedata                                         : out std_logic_vector(31 downto 0);                    --                                                     .writedata
		pio_0_s1_chipselect                                        : out std_logic;                                        --                                                     .chipselect
		sd_card_spi_spi_control_port_address                       : out std_logic_vector(2 downto 0);                     --                         sd_card_spi_spi_control_port.address
		sd_card_spi_spi_control_port_write                         : out std_logic;                                        --                                                     .write
		sd_card_spi_spi_control_port_read                          : out std_logic;                                        --                                                     .read
		sd_card_spi_spi_control_port_readdata                      : in  std_logic_vector(15 downto 0) := (others => '0'); --                                                     .readdata
		sd_card_spi_spi_control_port_writedata                     : out std_logic_vector(15 downto 0);                    --                                                     .writedata
		sd_card_spi_spi_control_port_chipselect                    : out std_logic                                         --                                                     .chipselect
	);
end entity wasca_mm_interconnect_0;

architecture rtl of wasca_mm_interconnect_0 is
	component wasca_mm_interconnect_0_external_sdram_controller_s1_agent_rsp_fifo is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			reset             : in  std_logic                     := 'X';             -- reset
			in_data           : in  std_logic_vector(88 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                     := 'X';             -- valid
			in_ready          : out std_logic;                                        -- ready
			in_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			out_data          : out std_logic_vector(88 downto 0);                    -- data
			out_valid         : out std_logic;                                        -- valid
			out_ready         : in  std_logic                     := 'X';             -- ready
			out_startofpacket : out std_logic;                                        -- startofpacket
			out_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component wasca_mm_interconnect_0_external_sdram_controller_s1_agent_rsp_fifo;

	component wasca_mm_interconnect_0_external_sdram_controller_s1_agent_rdata_fifo is
		port (
			clk       : in  std_logic                     := 'X';             -- clk
			reset     : in  std_logic                     := 'X';             -- reset
			in_data   : in  std_logic_vector(17 downto 0) := (others => 'X'); -- data
			in_valid  : in  std_logic                     := 'X';             -- valid
			in_ready  : out std_logic;                                        -- ready
			out_data  : out std_logic_vector(17 downto 0);                    -- data
			out_valid : out std_logic;                                        -- valid
			out_ready : in  std_logic                     := 'X'              -- ready
		);
	end component wasca_mm_interconnect_0_external_sdram_controller_s1_agent_rdata_fifo;

	component wasca_mm_interconnect_0_onchip_flash_0_data_agent_rsp_fifo is
		port (
			clk               : in  std_logic                      := 'X';             -- clk
			reset             : in  std_logic                      := 'X';             -- reset
			in_data           : in  std_logic_vector(106 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                      := 'X';             -- valid
			in_ready          : out std_logic;                                         -- ready
			in_startofpacket  : in  std_logic                      := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                      := 'X';             -- endofpacket
			out_data          : out std_logic_vector(106 downto 0);                    -- data
			out_valid         : out std_logic;                                         -- valid
			out_ready         : in  std_logic                      := 'X';             -- ready
			out_startofpacket : out std_logic;                                         -- startofpacket
			out_endofpacket   : out std_logic                                          -- endofpacket
		);
	end component wasca_mm_interconnect_0_onchip_flash_0_data_agent_rsp_fifo;

	component wasca_mm_interconnect_0_altpll_0_pll_slave_agent_rdata_fifo is
		port (
			clk       : in  std_logic                     := 'X';             -- clk
			reset     : in  std_logic                     := 'X';             -- reset
			in_data   : in  std_logic_vector(33 downto 0) := (others => 'X'); -- data
			in_valid  : in  std_logic                     := 'X';             -- valid
			in_ready  : out std_logic;                                        -- ready
			out_data  : out std_logic_vector(33 downto 0);                    -- data
			out_valid : out std_logic;                                        -- valid
			out_ready : in  std_logic                     := 'X'              -- ready
		);
	end component wasca_mm_interconnect_0_altpll_0_pll_slave_agent_rdata_fifo;

	component wasca_mm_interconnect_0_router is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(87 downto 0);                    -- data
			src_channel        : out std_logic_vector(6 downto 0);                     -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component wasca_mm_interconnect_0_router;

	component wasca_mm_interconnect_0_router_001 is
		port (
			sink_ready         : out std_logic;                                         -- ready
			sink_valid         : in  std_logic                      := 'X';             -- valid
			sink_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			src_ready          : in  std_logic                      := 'X';             -- ready
			src_valid          : out std_logic;                                         -- valid
			src_data           : out std_logic_vector(105 downto 0);                    -- data
			src_channel        : out std_logic_vector(6 downto 0);                      -- channel
			src_startofpacket  : out std_logic;                                         -- startofpacket
			src_endofpacket    : out std_logic                                          -- endofpacket
		);
	end component wasca_mm_interconnect_0_router_001;

	component wasca_mm_interconnect_0_router_002 is
		port (
			sink_ready         : out std_logic;                                         -- ready
			sink_valid         : in  std_logic                      := 'X';             -- valid
			sink_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			src_ready          : in  std_logic                      := 'X';             -- ready
			src_valid          : out std_logic;                                         -- valid
			src_data           : out std_logic_vector(105 downto 0);                    -- data
			src_channel        : out std_logic_vector(6 downto 0);                      -- channel
			src_startofpacket  : out std_logic;                                         -- startofpacket
			src_endofpacket    : out std_logic                                          -- endofpacket
		);
	end component wasca_mm_interconnect_0_router_002;

	component wasca_mm_interconnect_0_router_003 is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(87 downto 0);                    -- data
			src_channel        : out std_logic_vector(6 downto 0);                     -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component wasca_mm_interconnect_0_router_003;

	component wasca_mm_interconnect_0_router_004 is
		port (
			sink_ready         : out std_logic;                                         -- ready
			sink_valid         : in  std_logic                      := 'X';             -- valid
			sink_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			src_ready          : in  std_logic                      := 'X';             -- ready
			src_valid          : out std_logic;                                         -- valid
			src_data           : out std_logic_vector(105 downto 0);                    -- data
			src_channel        : out std_logic_vector(6 downto 0);                      -- channel
			src_startofpacket  : out std_logic;                                         -- startofpacket
			src_endofpacket    : out std_logic                                          -- endofpacket
		);
	end component wasca_mm_interconnect_0_router_004;

	component wasca_mm_interconnect_0_router_006 is
		port (
			sink_ready         : out std_logic;                                         -- ready
			sink_valid         : in  std_logic                      := 'X';             -- valid
			sink_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			src_ready          : in  std_logic                      := 'X';             -- ready
			src_valid          : out std_logic;                                         -- valid
			src_data           : out std_logic_vector(105 downto 0);                    -- data
			src_channel        : out std_logic_vector(6 downto 0);                      -- channel
			src_startofpacket  : out std_logic;                                         -- startofpacket
			src_endofpacket    : out std_logic                                          -- endofpacket
		);
	end component wasca_mm_interconnect_0_router_006;

	component altera_merlin_burst_adapter is
		generic (
			PKT_ADDR_H                : integer := 79;
			PKT_ADDR_L                : integer := 48;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_BYTE_CNT_H            : integer := 5;
			PKT_BYTE_CNT_L            : integer := 0;
			PKT_BYTEEN_H              : integer := 83;
			PKT_BYTEEN_L              : integer := 80;
			PKT_BURST_SIZE_H          : integer := 86;
			PKT_BURST_SIZE_L          : integer := 84;
			PKT_BURST_TYPE_H          : integer := 88;
			PKT_BURST_TYPE_L          : integer := 87;
			PKT_BURSTWRAP_H           : integer := 11;
			PKT_BURSTWRAP_L           : integer := 6;
			PKT_TRANS_COMPRESSED_READ : integer := 14;
			PKT_TRANS_WRITE           : integer := 13;
			PKT_TRANS_READ            : integer := 12;
			OUT_NARROW_SIZE           : integer := 0;
			IN_NARROW_SIZE            : integer := 0;
			OUT_FIXED                 : integer := 0;
			OUT_COMPLETE_WRAP         : integer := 0;
			ST_DATA_W                 : integer := 89;
			ST_CHANNEL_W              : integer := 8;
			OUT_BYTE_CNT_H            : integer := 5;
			OUT_BURSTWRAP_H           : integer := 11;
			COMPRESSED_READ_SUPPORT   : integer := 1;
			BYTEENABLE_SYNTHESIS      : integer := 0;
			PIPE_INPUTS               : integer := 0;
			NO_WRAP_SUPPORT           : integer := 0;
			INCOMPLETE_WRAP_SUPPORT   : integer := 1;
			BURSTWRAP_CONST_MASK      : integer := 0;
			BURSTWRAP_CONST_VALUE     : integer := -1;
			ADAPTER_VERSION           : string  := "13.1"
		);
		port (
			clk                   : in  std_logic                     := 'X';             -- clk
			reset                 : in  std_logic                     := 'X';             -- reset
			sink0_valid           : in  std_logic                     := 'X';             -- valid
			sink0_data            : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink0_channel         : in  std_logic_vector(6 downto 0)  := (others => 'X'); -- channel
			sink0_startofpacket   : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket     : in  std_logic                     := 'X';             -- endofpacket
			sink0_ready           : out std_logic;                                        -- ready
			source0_valid         : out std_logic;                                        -- valid
			source0_data          : out std_logic_vector(87 downto 0);                    -- data
			source0_channel       : out std_logic_vector(6 downto 0);                     -- channel
			source0_startofpacket : out std_logic;                                        -- startofpacket
			source0_endofpacket   : out std_logic;                                        -- endofpacket
			source0_ready         : in  std_logic                     := 'X'              -- ready
		);
	end component altera_merlin_burst_adapter;

	component wasca_mm_interconnect_0_cmd_demux is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			sink_ready         : out std_logic;                                        -- ready
			sink_channel       : in  std_logic_vector(6 downto 0)  := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- valid
			src0_ready         : in  std_logic                     := 'X';             -- ready
			src0_valid         : out std_logic;                                        -- valid
			src0_data          : out std_logic_vector(87 downto 0);                    -- data
			src0_channel       : out std_logic_vector(6 downto 0);                     -- channel
			src0_startofpacket : out std_logic;                                        -- startofpacket
			src0_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component wasca_mm_interconnect_0_cmd_demux;

	component wasca_mm_interconnect_0_cmd_demux_001 is
		port (
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			sink_ready         : out std_logic;                                         -- ready
			sink_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- valid
			src0_ready         : in  std_logic                      := 'X';             -- ready
			src0_valid         : out std_logic;                                         -- valid
			src0_data          : out std_logic_vector(105 downto 0);                    -- data
			src0_channel       : out std_logic_vector(6 downto 0);                      -- channel
			src0_startofpacket : out std_logic;                                         -- startofpacket
			src0_endofpacket   : out std_logic;                                         -- endofpacket
			src1_ready         : in  std_logic                      := 'X';             -- ready
			src1_valid         : out std_logic;                                         -- valid
			src1_data          : out std_logic_vector(105 downto 0);                    -- data
			src1_channel       : out std_logic_vector(6 downto 0);                      -- channel
			src1_startofpacket : out std_logic;                                         -- startofpacket
			src1_endofpacket   : out std_logic;                                         -- endofpacket
			src2_ready         : in  std_logic                      := 'X';             -- ready
			src2_valid         : out std_logic;                                         -- valid
			src2_data          : out std_logic_vector(105 downto 0);                    -- data
			src2_channel       : out std_logic_vector(6 downto 0);                      -- channel
			src2_startofpacket : out std_logic;                                         -- startofpacket
			src2_endofpacket   : out std_logic;                                         -- endofpacket
			src3_ready         : in  std_logic                      := 'X';             -- ready
			src3_valid         : out std_logic;                                         -- valid
			src3_data          : out std_logic_vector(105 downto 0);                    -- data
			src3_channel       : out std_logic_vector(6 downto 0);                      -- channel
			src3_startofpacket : out std_logic;                                         -- startofpacket
			src3_endofpacket   : out std_logic;                                         -- endofpacket
			src4_ready         : in  std_logic                      := 'X';             -- ready
			src4_valid         : out std_logic;                                         -- valid
			src4_data          : out std_logic_vector(105 downto 0);                    -- data
			src4_channel       : out std_logic_vector(6 downto 0);                      -- channel
			src4_startofpacket : out std_logic;                                         -- startofpacket
			src4_endofpacket   : out std_logic;                                         -- endofpacket
			src5_ready         : in  std_logic                      := 'X';             -- ready
			src5_valid         : out std_logic;                                         -- valid
			src5_data          : out std_logic_vector(105 downto 0);                    -- data
			src5_channel       : out std_logic_vector(6 downto 0);                      -- channel
			src5_startofpacket : out std_logic;                                         -- startofpacket
			src5_endofpacket   : out std_logic;                                         -- endofpacket
			src6_ready         : in  std_logic                      := 'X';             -- ready
			src6_valid         : out std_logic;                                         -- valid
			src6_data          : out std_logic_vector(105 downto 0);                    -- data
			src6_channel       : out std_logic_vector(6 downto 0);                      -- channel
			src6_startofpacket : out std_logic;                                         -- startofpacket
			src6_endofpacket   : out std_logic                                          -- endofpacket
		);
	end component wasca_mm_interconnect_0_cmd_demux_001;

	component wasca_mm_interconnect_0_cmd_demux_002 is
		port (
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			sink_ready         : out std_logic;                                         -- ready
			sink_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- valid
			src0_ready         : in  std_logic                      := 'X';             -- ready
			src0_valid         : out std_logic;                                         -- valid
			src0_data          : out std_logic_vector(105 downto 0);                    -- data
			src0_channel       : out std_logic_vector(6 downto 0);                      -- channel
			src0_startofpacket : out std_logic;                                         -- startofpacket
			src0_endofpacket   : out std_logic;                                         -- endofpacket
			src1_ready         : in  std_logic                      := 'X';             -- ready
			src1_valid         : out std_logic;                                         -- valid
			src1_data          : out std_logic_vector(105 downto 0);                    -- data
			src1_channel       : out std_logic_vector(6 downto 0);                      -- channel
			src1_startofpacket : out std_logic;                                         -- startofpacket
			src1_endofpacket   : out std_logic                                          -- endofpacket
		);
	end component wasca_mm_interconnect_0_cmd_demux_002;

	component wasca_mm_interconnect_0_cmd_mux is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			src_ready           : in  std_logic                     := 'X';             -- ready
			src_valid           : out std_logic;                                        -- valid
			src_data            : out std_logic_vector(87 downto 0);                    -- data
			src_channel         : out std_logic_vector(6 downto 0);                     -- channel
			src_startofpacket   : out std_logic;                                        -- startofpacket
			src_endofpacket     : out std_logic;                                        -- endofpacket
			sink0_ready         : out std_logic;                                        -- ready
			sink0_valid         : in  std_logic                     := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(6 downto 0)  := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                        -- ready
			sink1_valid         : in  std_logic                     := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(6 downto 0)  := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component wasca_mm_interconnect_0_cmd_mux;

	component wasca_mm_interconnect_0_cmd_mux_001 is
		port (
			clk                 : in  std_logic                      := 'X';             -- clk
			reset               : in  std_logic                      := 'X';             -- reset
			src_ready           : in  std_logic                      := 'X';             -- ready
			src_valid           : out std_logic;                                         -- valid
			src_data            : out std_logic_vector(105 downto 0);                    -- data
			src_channel         : out std_logic_vector(6 downto 0);                      -- channel
			src_startofpacket   : out std_logic;                                         -- startofpacket
			src_endofpacket     : out std_logic;                                         -- endofpacket
			sink0_ready         : out std_logic;                                         -- ready
			sink0_valid         : in  std_logic                      := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                         -- ready
			sink1_valid         : in  std_logic                      := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                      := 'X'              -- endofpacket
		);
	end component wasca_mm_interconnect_0_cmd_mux_001;

	component wasca_mm_interconnect_0_cmd_mux_003 is
		port (
			clk                 : in  std_logic                      := 'X';             -- clk
			reset               : in  std_logic                      := 'X';             -- reset
			src_ready           : in  std_logic                      := 'X';             -- ready
			src_valid           : out std_logic;                                         -- valid
			src_data            : out std_logic_vector(105 downto 0);                    -- data
			src_channel         : out std_logic_vector(6 downto 0);                      -- channel
			src_startofpacket   : out std_logic;                                         -- startofpacket
			src_endofpacket     : out std_logic;                                         -- endofpacket
			sink0_ready         : out std_logic;                                         -- ready
			sink0_valid         : in  std_logic                      := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                      := 'X'              -- endofpacket
		);
	end component wasca_mm_interconnect_0_cmd_mux_003;

	component wasca_mm_interconnect_0_rsp_demux is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			sink_ready         : out std_logic;                                        -- ready
			sink_channel       : in  std_logic_vector(6 downto 0)  := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- valid
			src0_ready         : in  std_logic                     := 'X';             -- ready
			src0_valid         : out std_logic;                                        -- valid
			src0_data          : out std_logic_vector(87 downto 0);                    -- data
			src0_channel       : out std_logic_vector(6 downto 0);                     -- channel
			src0_startofpacket : out std_logic;                                        -- startofpacket
			src0_endofpacket   : out std_logic;                                        -- endofpacket
			src1_ready         : in  std_logic                     := 'X';             -- ready
			src1_valid         : out std_logic;                                        -- valid
			src1_data          : out std_logic_vector(87 downto 0);                    -- data
			src1_channel       : out std_logic_vector(6 downto 0);                     -- channel
			src1_startofpacket : out std_logic;                                        -- startofpacket
			src1_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component wasca_mm_interconnect_0_rsp_demux;

	component wasca_mm_interconnect_0_rsp_demux_003 is
		port (
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			sink_ready         : out std_logic;                                         -- ready
			sink_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- valid
			src0_ready         : in  std_logic                      := 'X';             -- ready
			src0_valid         : out std_logic;                                         -- valid
			src0_data          : out std_logic_vector(105 downto 0);                    -- data
			src0_channel       : out std_logic_vector(6 downto 0);                      -- channel
			src0_startofpacket : out std_logic;                                         -- startofpacket
			src0_endofpacket   : out std_logic                                          -- endofpacket
		);
	end component wasca_mm_interconnect_0_rsp_demux_003;

	component wasca_mm_interconnect_0_rsp_demux_004 is
		port (
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			sink_ready         : out std_logic;                                         -- ready
			sink_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- valid
			src0_ready         : in  std_logic                      := 'X';             -- ready
			src0_valid         : out std_logic;                                         -- valid
			src0_data          : out std_logic_vector(105 downto 0);                    -- data
			src0_channel       : out std_logic_vector(6 downto 0);                      -- channel
			src0_startofpacket : out std_logic;                                         -- startofpacket
			src0_endofpacket   : out std_logic                                          -- endofpacket
		);
	end component wasca_mm_interconnect_0_rsp_demux_004;

	component wasca_mm_interconnect_0_rsp_mux is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			src_ready           : in  std_logic                     := 'X';             -- ready
			src_valid           : out std_logic;                                        -- valid
			src_data            : out std_logic_vector(87 downto 0);                    -- data
			src_channel         : out std_logic_vector(6 downto 0);                     -- channel
			src_startofpacket   : out std_logic;                                        -- startofpacket
			src_endofpacket     : out std_logic;                                        -- endofpacket
			sink0_ready         : out std_logic;                                        -- ready
			sink0_valid         : in  std_logic                     := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(6 downto 0)  := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component wasca_mm_interconnect_0_rsp_mux;

	component wasca_mm_interconnect_0_rsp_mux_001 is
		port (
			clk                 : in  std_logic                      := 'X';             -- clk
			reset               : in  std_logic                      := 'X';             -- reset
			src_ready           : in  std_logic                      := 'X';             -- ready
			src_valid           : out std_logic;                                         -- valid
			src_data            : out std_logic_vector(105 downto 0);                    -- data
			src_channel         : out std_logic_vector(6 downto 0);                      -- channel
			src_startofpacket   : out std_logic;                                         -- startofpacket
			src_endofpacket     : out std_logic;                                         -- endofpacket
			sink0_ready         : out std_logic;                                         -- ready
			sink0_valid         : in  std_logic                      := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                         -- ready
			sink1_valid         : in  std_logic                      := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink2_ready         : out std_logic;                                         -- ready
			sink2_valid         : in  std_logic                      := 'X';             -- valid
			sink2_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink2_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink2_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink2_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink3_ready         : out std_logic;                                         -- ready
			sink3_valid         : in  std_logic                      := 'X';             -- valid
			sink3_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink3_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink3_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink3_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink4_ready         : out std_logic;                                         -- ready
			sink4_valid         : in  std_logic                      := 'X';             -- valid
			sink4_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink4_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink4_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink4_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink5_ready         : out std_logic;                                         -- ready
			sink5_valid         : in  std_logic                      := 'X';             -- valid
			sink5_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink5_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink5_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink5_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink6_ready         : out std_logic;                                         -- ready
			sink6_valid         : in  std_logic                      := 'X';             -- valid
			sink6_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink6_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink6_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink6_endofpacket   : in  std_logic                      := 'X'              -- endofpacket
		);
	end component wasca_mm_interconnect_0_rsp_mux_001;

	component wasca_mm_interconnect_0_rsp_mux_002 is
		port (
			clk                 : in  std_logic                      := 'X';             -- clk
			reset               : in  std_logic                      := 'X';             -- reset
			src_ready           : in  std_logic                      := 'X';             -- ready
			src_valid           : out std_logic;                                         -- valid
			src_data            : out std_logic_vector(105 downto 0);                    -- data
			src_channel         : out std_logic_vector(6 downto 0);                      -- channel
			src_startofpacket   : out std_logic;                                         -- startofpacket
			src_endofpacket     : out std_logic;                                         -- endofpacket
			sink0_ready         : out std_logic;                                         -- ready
			sink0_valid         : in  std_logic                      := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                         -- ready
			sink1_valid         : in  std_logic                      := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                      := 'X'              -- endofpacket
		);
	end component wasca_mm_interconnect_0_rsp_mux_002;

	component altera_avalon_st_handshake_clock_crosser is
		generic (
			DATA_WIDTH          : integer := 8;
			BITS_PER_SYMBOL     : integer := 8;
			USE_PACKETS         : integer := 0;
			USE_CHANNEL         : integer := 0;
			CHANNEL_WIDTH       : integer := 1;
			USE_ERROR           : integer := 0;
			ERROR_WIDTH         : integer := 1;
			VALID_SYNC_DEPTH    : integer := 2;
			READY_SYNC_DEPTH    : integer := 2;
			USE_OUTPUT_PIPELINE : integer := 1
		);
		port (
			in_clk            : in  std_logic                      := 'X';             -- clk
			in_reset          : in  std_logic                      := 'X';             -- reset
			out_clk           : in  std_logic                      := 'X';             -- clk
			out_reset         : in  std_logic                      := 'X';             -- reset
			in_ready          : out std_logic;                                         -- ready
			in_valid          : in  std_logic                      := 'X';             -- valid
			in_startofpacket  : in  std_logic                      := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                      := 'X';             -- endofpacket
			in_channel        : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			in_data           : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			out_ready         : in  std_logic                      := 'X';             -- ready
			out_valid         : out std_logic;                                         -- valid
			out_startofpacket : out std_logic;                                         -- startofpacket
			out_endofpacket   : out std_logic;                                         -- endofpacket
			out_channel       : out std_logic_vector(6 downto 0);                      -- channel
			out_data          : out std_logic_vector(105 downto 0);                    -- data
			in_empty          : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- empty
			in_error          : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- error
			out_empty         : out std_logic_vector(0 downto 0);                      -- empty
			out_error         : out std_logic_vector(0 downto 0)                       -- error
		);
	end component altera_avalon_st_handshake_clock_crosser;

	component wasca_mm_interconnect_0_avalon_st_adapter is
		generic (
			inBitsPerSymbol : integer := 8;
			inUsePackets    : integer := 0;
			inDataWidth     : integer := 8;
			inChannelWidth  : integer := 3;
			inErrorWidth    : integer := 2;
			inUseEmptyPort  : integer := 0;
			inUseValid      : integer := 1;
			inUseReady      : integer := 1;
			inReadyLatency  : integer := 0;
			outDataWidth    : integer := 32;
			outChannelWidth : integer := 3;
			outErrorWidth   : integer := 2;
			outUseEmptyPort : integer := 0;
			outUseValid     : integer := 1;
			outUseReady     : integer := 1;
			outReadyLatency : integer := 0
		);
		port (
			in_clk_0_clk   : in  std_logic                     := 'X';             -- clk
			in_rst_0_reset : in  std_logic                     := 'X';             -- reset
			in_0_data      : in  std_logic_vector(17 downto 0) := (others => 'X'); -- data
			in_0_valid     : in  std_logic                     := 'X';             -- valid
			in_0_ready     : out std_logic;                                        -- ready
			out_0_data     : out std_logic_vector(17 downto 0);                    -- data
			out_0_valid    : out std_logic;                                        -- valid
			out_0_ready    : in  std_logic                     := 'X';             -- ready
			out_0_error    : out std_logic_vector(0 downto 0)                      -- error
		);
	end component wasca_mm_interconnect_0_avalon_st_adapter;

	component wasca_mm_interconnect_0_avalon_st_adapter_001 is
		generic (
			inBitsPerSymbol : integer := 8;
			inUsePackets    : integer := 0;
			inDataWidth     : integer := 8;
			inChannelWidth  : integer := 3;
			inErrorWidth    : integer := 2;
			inUseEmptyPort  : integer := 0;
			inUseValid      : integer := 1;
			inUseReady      : integer := 1;
			inReadyLatency  : integer := 0;
			outDataWidth    : integer := 32;
			outChannelWidth : integer := 3;
			outErrorWidth   : integer := 2;
			outUseEmptyPort : integer := 0;
			outUseValid     : integer := 1;
			outUseReady     : integer := 1;
			outReadyLatency : integer := 0
		);
		port (
			in_clk_0_clk   : in  std_logic                     := 'X';             -- clk
			in_rst_0_reset : in  std_logic                     := 'X';             -- reset
			in_0_data      : in  std_logic_vector(33 downto 0) := (others => 'X'); -- data
			in_0_valid     : in  std_logic                     := 'X';             -- valid
			in_0_ready     : out std_logic;                                        -- ready
			out_0_data     : out std_logic_vector(33 downto 0);                    -- data
			out_0_valid    : out std_logic;                                        -- valid
			out_0_ready    : in  std_logic                     := 'X';             -- ready
			out_0_error    : out std_logic_vector(0 downto 0)                      -- error
		);
	end component wasca_mm_interconnect_0_avalon_st_adapter_001;

	component wasca_mm_interconnect_0_nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter is
		generic (
			IN_PKT_ADDR_H                 : integer := 60;
			IN_PKT_ADDR_L                 : integer := 36;
			IN_PKT_DATA_H                 : integer := 31;
			IN_PKT_DATA_L                 : integer := 0;
			IN_PKT_BYTEEN_H               : integer := 35;
			IN_PKT_BYTEEN_L               : integer := 32;
			IN_PKT_BYTE_CNT_H             : integer := 63;
			IN_PKT_BYTE_CNT_L             : integer := 61;
			IN_PKT_TRANS_COMPRESSED_READ  : integer := 65;
			IN_PKT_TRANS_WRITE            : integer := 64;
			IN_PKT_BURSTWRAP_H            : integer := 67;
			IN_PKT_BURSTWRAP_L            : integer := 66;
			IN_PKT_BURST_SIZE_H           : integer := 70;
			IN_PKT_BURST_SIZE_L           : integer := 68;
			IN_PKT_RESPONSE_STATUS_H      : integer := 72;
			IN_PKT_RESPONSE_STATUS_L      : integer := 71;
			IN_PKT_TRANS_EXCLUSIVE        : integer := 73;
			IN_PKT_BURST_TYPE_H           : integer := 75;
			IN_PKT_BURST_TYPE_L           : integer := 74;
			IN_PKT_ORI_BURST_SIZE_L       : integer := 110;
			IN_PKT_ORI_BURST_SIZE_H       : integer := 113;
			IN_ST_DATA_W                  : integer := 76;
			OUT_PKT_ADDR_H                : integer := 60;
			OUT_PKT_ADDR_L                : integer := 36;
			OUT_PKT_DATA_H                : integer := 31;
			OUT_PKT_DATA_L                : integer := 0;
			OUT_PKT_BYTEEN_H              : integer := 35;
			OUT_PKT_BYTEEN_L              : integer := 32;
			OUT_PKT_BYTE_CNT_H            : integer := 63;
			OUT_PKT_BYTE_CNT_L            : integer := 61;
			OUT_PKT_TRANS_COMPRESSED_READ : integer := 65;
			OUT_PKT_BURST_SIZE_H          : integer := 68;
			OUT_PKT_BURST_SIZE_L          : integer := 66;
			OUT_PKT_RESPONSE_STATUS_H     : integer := 70;
			OUT_PKT_RESPONSE_STATUS_L     : integer := 69;
			OUT_PKT_TRANS_EXCLUSIVE       : integer := 71;
			OUT_PKT_BURST_TYPE_H          : integer := 73;
			OUT_PKT_BURST_TYPE_L          : integer := 72;
			OUT_PKT_ORI_BURST_SIZE_L      : integer := 110;
			OUT_PKT_ORI_BURST_SIZE_H      : integer := 113;
			OUT_ST_DATA_W                 : integer := 74;
			ST_CHANNEL_W                  : integer := 32;
			OPTIMIZE_FOR_RSP              : integer := 0;
			RESPONSE_PATH                 : integer := 0;
			CONSTANT_BURST_SIZE           : integer := 1;
			PACKING                       : integer := 1;
			ENABLE_ADDRESS_ALIGNMENT      : integer := 1
		);
		port (
			clk                  : in  std_logic                      := 'X';             -- clk
			reset                : in  std_logic                      := 'X';             -- reset
			in_valid             : in  std_logic                      := 'X';             -- valid
			in_channel           : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			in_startofpacket     : in  std_logic                      := 'X';             -- startofpacket
			in_endofpacket       : in  std_logic                      := 'X';             -- endofpacket
			in_ready             : out std_logic;                                         -- ready
			in_data              : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			out_endofpacket      : out std_logic;                                         -- endofpacket
			out_data             : out std_logic_vector(87 downto 0);                     -- data
			out_channel          : out std_logic_vector(6 downto 0);                      -- channel
			out_valid            : out std_logic;                                         -- valid
			out_ready            : in  std_logic                      := 'X';             -- ready
			out_startofpacket    : out std_logic;                                         -- startofpacket
			in_command_size_data : in  std_logic_vector(2 downto 0)   := (others => 'X')  -- data
		);
	end component wasca_mm_interconnect_0_nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter;

	component wasca_mm_interconnect_0_external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter is
		generic (
			IN_PKT_ADDR_H                 : integer := 60;
			IN_PKT_ADDR_L                 : integer := 36;
			IN_PKT_DATA_H                 : integer := 31;
			IN_PKT_DATA_L                 : integer := 0;
			IN_PKT_BYTEEN_H               : integer := 35;
			IN_PKT_BYTEEN_L               : integer := 32;
			IN_PKT_BYTE_CNT_H             : integer := 63;
			IN_PKT_BYTE_CNT_L             : integer := 61;
			IN_PKT_TRANS_COMPRESSED_READ  : integer := 65;
			IN_PKT_TRANS_WRITE            : integer := 64;
			IN_PKT_BURSTWRAP_H            : integer := 67;
			IN_PKT_BURSTWRAP_L            : integer := 66;
			IN_PKT_BURST_SIZE_H           : integer := 70;
			IN_PKT_BURST_SIZE_L           : integer := 68;
			IN_PKT_RESPONSE_STATUS_H      : integer := 72;
			IN_PKT_RESPONSE_STATUS_L      : integer := 71;
			IN_PKT_TRANS_EXCLUSIVE        : integer := 73;
			IN_PKT_BURST_TYPE_H           : integer := 75;
			IN_PKT_BURST_TYPE_L           : integer := 74;
			IN_PKT_ORI_BURST_SIZE_L       : integer := 110;
			IN_PKT_ORI_BURST_SIZE_H       : integer := 113;
			IN_ST_DATA_W                  : integer := 76;
			OUT_PKT_ADDR_H                : integer := 60;
			OUT_PKT_ADDR_L                : integer := 36;
			OUT_PKT_DATA_H                : integer := 31;
			OUT_PKT_DATA_L                : integer := 0;
			OUT_PKT_BYTEEN_H              : integer := 35;
			OUT_PKT_BYTEEN_L              : integer := 32;
			OUT_PKT_BYTE_CNT_H            : integer := 63;
			OUT_PKT_BYTE_CNT_L            : integer := 61;
			OUT_PKT_TRANS_COMPRESSED_READ : integer := 65;
			OUT_PKT_BURST_SIZE_H          : integer := 68;
			OUT_PKT_BURST_SIZE_L          : integer := 66;
			OUT_PKT_RESPONSE_STATUS_H     : integer := 70;
			OUT_PKT_RESPONSE_STATUS_L     : integer := 69;
			OUT_PKT_TRANS_EXCLUSIVE       : integer := 71;
			OUT_PKT_BURST_TYPE_H          : integer := 73;
			OUT_PKT_BURST_TYPE_L          : integer := 72;
			OUT_PKT_ORI_BURST_SIZE_L      : integer := 110;
			OUT_PKT_ORI_BURST_SIZE_H      : integer := 113;
			OUT_ST_DATA_W                 : integer := 74;
			ST_CHANNEL_W                  : integer := 32;
			OPTIMIZE_FOR_RSP              : integer := 0;
			RESPONSE_PATH                 : integer := 0;
			CONSTANT_BURST_SIZE           : integer := 1;
			PACKING                       : integer := 1;
			ENABLE_ADDRESS_ALIGNMENT      : integer := 1
		);
		port (
			clk                  : in  std_logic                      := 'X';             -- clk
			reset                : in  std_logic                      := 'X';             -- reset
			in_valid             : in  std_logic                      := 'X';             -- valid
			in_channel           : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			in_startofpacket     : in  std_logic                      := 'X';             -- startofpacket
			in_endofpacket       : in  std_logic                      := 'X';             -- endofpacket
			in_ready             : out std_logic;                                         -- ready
			in_data              : in  std_logic_vector(87 downto 0)  := (others => 'X'); -- data
			out_endofpacket      : out std_logic;                                         -- endofpacket
			out_data             : out std_logic_vector(105 downto 0);                    -- data
			out_channel          : out std_logic_vector(6 downto 0);                      -- channel
			out_valid            : out std_logic;                                         -- valid
			out_ready            : in  std_logic                      := 'X';             -- ready
			out_startofpacket    : out std_logic;                                         -- startofpacket
			in_command_size_data : in  std_logic_vector(2 downto 0)   := (others => 'X')  -- data
		);
	end component wasca_mm_interconnect_0_external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter;

	component wasca_mm_interconnect_0_sega_saturn_abus_slave_0_avalon_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : out std_logic_vector(26 downto 0);                    -- address
			uav_burstcount         : out std_logic_vector(1 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                        -- read
			uav_write              : out std_logic;                                        -- write
			uav_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(1 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(15 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                        -- lock
			uav_debugaccess        : out std_logic;                                        -- debugaccess
			av_address             : in  std_logic_vector(25 downto 0) := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                        -- waitrequest
			av_burstcount          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_read                : in  std_logic                     := 'X';             -- read
			av_readdata            : out std_logic_vector(15 downto 0);                    -- readdata
			av_readdatavalid       : out std_logic;                                        -- readdatavalid
			av_write               : in  std_logic                     := 'X';             -- write
			av_writedata           : in  std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			av_byteenable          : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			av_beginbursttransfer  : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                     := 'X';             -- chipselect
			av_lock                : in  std_logic                     := 'X';             -- lock
			av_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			uav_clken              : out std_logic;                                        -- clken
			av_clken               : in  std_logic                     := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponsevalid : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                         -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_sega_saturn_abus_slave_0_avalon_master_translator;

	component wasca_mm_interconnect_0_nios2_gen2_0_data_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : out std_logic_vector(26 downto 0);                    -- address
			uav_burstcount         : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                        -- read
			uav_write              : out std_logic;                                        -- write
			uav_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                        -- lock
			uav_debugaccess        : out std_logic;                                        -- debugaccess
			av_address             : in  std_logic_vector(26 downto 0) := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                        -- waitrequest
			av_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_read                : in  std_logic                     := 'X';             -- read
			av_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			av_write               : in  std_logic                     := 'X';             -- write
			av_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			av_burstcount          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_beginbursttransfer  : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                     := 'X';             -- chipselect
			av_readdatavalid       : out std_logic;                                        -- readdatavalid
			av_lock                : in  std_logic                     := 'X';             -- lock
			uav_clken              : out std_logic;                                        -- clken
			av_clken               : in  std_logic                     := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponsevalid : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                         -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_nios2_gen2_0_data_master_translator;

	component wasca_mm_interconnect_0_nios2_gen2_0_instruction_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : out std_logic_vector(26 downto 0);                    -- address
			uav_burstcount         : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                        -- read
			uav_write              : out std_logic;                                        -- write
			uav_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                        -- lock
			uav_debugaccess        : out std_logic;                                        -- debugaccess
			av_address             : in  std_logic_vector(17 downto 0) := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                        -- waitrequest
			av_read                : in  std_logic                     := 'X';             -- read
			av_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			av_burstcount          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_beginbursttransfer  : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                     := 'X';             -- chipselect
			av_readdatavalid       : out std_logic;                                        -- readdatavalid
			av_write               : in  std_logic                     := 'X';             -- write
			av_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_lock                : in  std_logic                     := 'X';             -- lock
			av_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			uav_clken              : out std_logic;                                        -- clken
			av_clken               : in  std_logic                     := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponsevalid : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                         -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_nios2_gen2_0_instruction_master_translator;

	component wasca_mm_interconnect_0_external_sdram_controller_s1_agent is
		generic (
			PKT_ORI_BURST_SIZE_H      : integer := 90;
			PKT_ORI_BURST_SIZE_L      : integer := 88;
			PKT_RESPONSE_STATUS_H     : integer := 87;
			PKT_RESPONSE_STATUS_L     : integer := 86;
			PKT_BURST_SIZE_H          : integer := 85;
			PKT_BURST_SIZE_L          : integer := 83;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			PKT_SYMBOL_W              : integer := 8;
			ST_CHANNEL_W              : integer := 8;
			ST_DATA_W                 : integer := 96;
			AVS_BURSTCOUNT_W          : integer := 4;
			SUPPRESS_0_BYTEEN_CMD     : integer := 1;
			PREVENT_FIFO_OVERFLOW     : integer := 0;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0;
			ECC_ENABLE                : integer := 0
		);
		port (
			clk                     : in  std_logic                     := 'X';             -- clk
			reset                   : in  std_logic                     := 'X';             -- reset
			m0_address              : out std_logic_vector(26 downto 0);                    -- address
			m0_burstcount           : out std_logic_vector(1 downto 0);                     -- burstcount
			m0_byteenable           : out std_logic_vector(1 downto 0);                     -- byteenable
			m0_debugaccess          : out std_logic;                                        -- debugaccess
			m0_lock                 : out std_logic;                                        -- lock
			m0_readdata             : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			m0_readdatavalid        : in  std_logic                     := 'X';             -- readdatavalid
			m0_read                 : out std_logic;                                        -- read
			m0_waitrequest          : in  std_logic                     := 'X';             -- waitrequest
			m0_writedata            : out std_logic_vector(15 downto 0);                    -- writedata
			m0_write                : out std_logic;                                        -- write
			rp_endofpacket          : out std_logic;                                        -- endofpacket
			rp_ready                : in  std_logic                     := 'X';             -- ready
			rp_valid                : out std_logic;                                        -- valid
			rp_data                 : out std_logic_vector(87 downto 0);                    -- data
			rp_startofpacket        : out std_logic;                                        -- startofpacket
			cp_ready                : out std_logic;                                        -- ready
			cp_valid                : in  std_logic                     := 'X';             -- valid
			cp_data                 : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			cp_startofpacket        : in  std_logic                     := 'X';             -- startofpacket
			cp_endofpacket          : in  std_logic                     := 'X';             -- endofpacket
			cp_channel              : in  std_logic_vector(6 downto 0)  := (others => 'X'); -- channel
			rf_sink_ready           : out std_logic;                                        -- ready
			rf_sink_valid           : in  std_logic                     := 'X';             -- valid
			rf_sink_startofpacket   : in  std_logic                     := 'X';             -- startofpacket
			rf_sink_endofpacket     : in  std_logic                     := 'X';             -- endofpacket
			rf_sink_data            : in  std_logic_vector(88 downto 0) := (others => 'X'); -- data
			rf_source_ready         : in  std_logic                     := 'X';             -- ready
			rf_source_valid         : out std_logic;                                        -- valid
			rf_source_startofpacket : out std_logic;                                        -- startofpacket
			rf_source_endofpacket   : out std_logic;                                        -- endofpacket
			rf_source_data          : out std_logic_vector(88 downto 0);                    -- data
			rdata_fifo_sink_ready   : out std_logic;                                        -- ready
			rdata_fifo_sink_valid   : in  std_logic                     := 'X';             -- valid
			rdata_fifo_sink_data    : in  std_logic_vector(17 downto 0) := (others => 'X'); -- data
			rdata_fifo_sink_error   : in  std_logic                     := 'X';             -- error
			rdata_fifo_src_ready    : in  std_logic                     := 'X';             -- ready
			rdata_fifo_src_valid    : out std_logic;                                        -- valid
			rdata_fifo_src_data     : out std_logic_vector(17 downto 0);                    -- data
			m0_response             : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			m0_writeresponsevalid   : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_external_sdram_controller_s1_agent;

	component wasca_mm_interconnect_0_onchip_flash_0_data_agent is
		generic (
			PKT_ORI_BURST_SIZE_H      : integer := 90;
			PKT_ORI_BURST_SIZE_L      : integer := 88;
			PKT_RESPONSE_STATUS_H     : integer := 87;
			PKT_RESPONSE_STATUS_L     : integer := 86;
			PKT_BURST_SIZE_H          : integer := 85;
			PKT_BURST_SIZE_L          : integer := 83;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			PKT_SYMBOL_W              : integer := 8;
			ST_CHANNEL_W              : integer := 8;
			ST_DATA_W                 : integer := 96;
			AVS_BURSTCOUNT_W          : integer := 4;
			SUPPRESS_0_BYTEEN_CMD     : integer := 1;
			PREVENT_FIFO_OVERFLOW     : integer := 0;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0;
			ECC_ENABLE                : integer := 0
		);
		port (
			clk                     : in  std_logic                      := 'X';             -- clk
			reset                   : in  std_logic                      := 'X';             -- reset
			m0_address              : out std_logic_vector(26 downto 0);                     -- address
			m0_burstcount           : out std_logic_vector(5 downto 0);                      -- burstcount
			m0_byteenable           : out std_logic_vector(3 downto 0);                      -- byteenable
			m0_debugaccess          : out std_logic;                                         -- debugaccess
			m0_lock                 : out std_logic;                                         -- lock
			m0_readdata             : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- readdata
			m0_readdatavalid        : in  std_logic                      := 'X';             -- readdatavalid
			m0_read                 : out std_logic;                                         -- read
			m0_waitrequest          : in  std_logic                      := 'X';             -- waitrequest
			m0_writedata            : out std_logic_vector(31 downto 0);                     -- writedata
			m0_write                : out std_logic;                                         -- write
			rp_endofpacket          : out std_logic;                                         -- endofpacket
			rp_ready                : in  std_logic                      := 'X';             -- ready
			rp_valid                : out std_logic;                                         -- valid
			rp_data                 : out std_logic_vector(105 downto 0);                    -- data
			rp_startofpacket        : out std_logic;                                         -- startofpacket
			cp_ready                : out std_logic;                                         -- ready
			cp_valid                : in  std_logic                      := 'X';             -- valid
			cp_data                 : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			cp_startofpacket        : in  std_logic                      := 'X';             -- startofpacket
			cp_endofpacket          : in  std_logic                      := 'X';             -- endofpacket
			cp_channel              : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			rf_sink_ready           : out std_logic;                                         -- ready
			rf_sink_valid           : in  std_logic                      := 'X';             -- valid
			rf_sink_startofpacket   : in  std_logic                      := 'X';             -- startofpacket
			rf_sink_endofpacket     : in  std_logic                      := 'X';             -- endofpacket
			rf_sink_data            : in  std_logic_vector(106 downto 0) := (others => 'X'); -- data
			rf_source_ready         : in  std_logic                      := 'X';             -- ready
			rf_source_valid         : out std_logic;                                         -- valid
			rf_source_startofpacket : out std_logic;                                         -- startofpacket
			rf_source_endofpacket   : out std_logic;                                         -- endofpacket
			rf_source_data          : out std_logic_vector(106 downto 0);                    -- data
			rdata_fifo_sink_ready   : out std_logic;                                         -- ready
			rdata_fifo_sink_valid   : in  std_logic                      := 'X';             -- valid
			rdata_fifo_sink_data    : in  std_logic_vector(33 downto 0)  := (others => 'X'); -- data
			rdata_fifo_sink_error   : in  std_logic                      := 'X';             -- error
			rdata_fifo_src_ready    : in  std_logic                      := 'X';             -- ready
			rdata_fifo_src_valid    : out std_logic;                                         -- valid
			rdata_fifo_src_data     : out std_logic_vector(33 downto 0);                     -- data
			m0_response             : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- response
			m0_writeresponsevalid   : in  std_logic                      := 'X'              -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_onchip_flash_0_data_agent;

	component wasca_mm_interconnect_0_nios2_gen2_0_debug_mem_slave_agent is
		generic (
			PKT_ORI_BURST_SIZE_H      : integer := 90;
			PKT_ORI_BURST_SIZE_L      : integer := 88;
			PKT_RESPONSE_STATUS_H     : integer := 87;
			PKT_RESPONSE_STATUS_L     : integer := 86;
			PKT_BURST_SIZE_H          : integer := 85;
			PKT_BURST_SIZE_L          : integer := 83;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			PKT_SYMBOL_W              : integer := 8;
			ST_CHANNEL_W              : integer := 8;
			ST_DATA_W                 : integer := 96;
			AVS_BURSTCOUNT_W          : integer := 4;
			SUPPRESS_0_BYTEEN_CMD     : integer := 1;
			PREVENT_FIFO_OVERFLOW     : integer := 0;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0;
			ECC_ENABLE                : integer := 0
		);
		port (
			clk                     : in  std_logic                      := 'X';             -- clk
			reset                   : in  std_logic                      := 'X';             -- reset
			m0_address              : out std_logic_vector(26 downto 0);                     -- address
			m0_burstcount           : out std_logic_vector(2 downto 0);                      -- burstcount
			m0_byteenable           : out std_logic_vector(3 downto 0);                      -- byteenable
			m0_debugaccess          : out std_logic;                                         -- debugaccess
			m0_lock                 : out std_logic;                                         -- lock
			m0_readdata             : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- readdata
			m0_readdatavalid        : in  std_logic                      := 'X';             -- readdatavalid
			m0_read                 : out std_logic;                                         -- read
			m0_waitrequest          : in  std_logic                      := 'X';             -- waitrequest
			m0_writedata            : out std_logic_vector(31 downto 0);                     -- writedata
			m0_write                : out std_logic;                                         -- write
			rp_endofpacket          : out std_logic;                                         -- endofpacket
			rp_ready                : in  std_logic                      := 'X';             -- ready
			rp_valid                : out std_logic;                                         -- valid
			rp_data                 : out std_logic_vector(105 downto 0);                    -- data
			rp_startofpacket        : out std_logic;                                         -- startofpacket
			cp_ready                : out std_logic;                                         -- ready
			cp_valid                : in  std_logic                      := 'X';             -- valid
			cp_data                 : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			cp_startofpacket        : in  std_logic                      := 'X';             -- startofpacket
			cp_endofpacket          : in  std_logic                      := 'X';             -- endofpacket
			cp_channel              : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			rf_sink_ready           : out std_logic;                                         -- ready
			rf_sink_valid           : in  std_logic                      := 'X';             -- valid
			rf_sink_startofpacket   : in  std_logic                      := 'X';             -- startofpacket
			rf_sink_endofpacket     : in  std_logic                      := 'X';             -- endofpacket
			rf_sink_data            : in  std_logic_vector(106 downto 0) := (others => 'X'); -- data
			rf_source_ready         : in  std_logic                      := 'X';             -- ready
			rf_source_valid         : out std_logic;                                         -- valid
			rf_source_startofpacket : out std_logic;                                         -- startofpacket
			rf_source_endofpacket   : out std_logic;                                         -- endofpacket
			rf_source_data          : out std_logic_vector(106 downto 0);                    -- data
			rdata_fifo_sink_ready   : out std_logic;                                         -- ready
			rdata_fifo_sink_valid   : in  std_logic                      := 'X';             -- valid
			rdata_fifo_sink_data    : in  std_logic_vector(33 downto 0)  := (others => 'X'); -- data
			rdata_fifo_sink_error   : in  std_logic                      := 'X';             -- error
			rdata_fifo_src_ready    : in  std_logic                      := 'X';             -- ready
			rdata_fifo_src_valid    : out std_logic;                                         -- valid
			rdata_fifo_src_data     : out std_logic_vector(33 downto 0);                     -- data
			m0_response             : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- response
			m0_writeresponsevalid   : in  std_logic                      := 'X'              -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_nios2_gen2_0_debug_mem_slave_agent;

	component wasca_mm_interconnect_0_external_sdram_controller_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(26 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(15 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(24 downto 0);                    -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(15 downto 0);                    -- writedata
			av_byteenable          : out std_logic_vector(1 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_chipselect          : out std_logic;                                        -- chipselect
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_writebyteenable     : out std_logic_vector(1 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_external_sdram_controller_s1_translator;

	component wasca_mm_interconnect_0_onchip_flash_0_data_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(26 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(5 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(14 downto 0);                    -- address
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_burstcount          : out std_logic_vector(3 downto 0);                     -- burstcount
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_write               : out std_logic;                                        -- write
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_onchip_flash_0_data_translator;

	component wasca_mm_interconnect_0_nios2_gen2_0_debug_mem_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(26 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(8 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_nios2_gen2_0_debug_mem_slave_translator;

	component wasca_mm_interconnect_0_altpll_0_pll_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(26 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(1 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_altpll_0_pll_slave_translator;

	component wasca_mm_interconnect_0_onchip_memory2_0_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(26 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(9 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			av_read                : out std_logic;                                        -- read
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_onchip_memory2_0_s1_translator;

	component wasca_mm_interconnect_0_pio_0_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(26 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(1 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_chipselect          : out std_logic;                                        -- chipselect
			av_read                : out std_logic;                                        -- read
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_pio_0_s1_translator;

	component wasca_mm_interconnect_0_sd_card_spi_spi_control_port_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(26 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(2 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(15 downto 0);                    -- writedata
			av_chipselect          : out std_logic;                                        -- chipselect
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_sd_card_spi_spi_control_port_translator;

	component wasca_mm_interconnect_0_sega_saturn_abus_slave_0_avalon_master_agent is
		generic (
			PKT_ORI_BURST_SIZE_H      : integer := 116;
			PKT_ORI_BURST_SIZE_L      : integer := 114;
			PKT_RESPONSE_STATUS_H     : integer := 113;
			PKT_RESPONSE_STATUS_L     : integer := 112;
			PKT_QOS_H                 : integer := 111;
			PKT_QOS_L                 : integer := 108;
			PKT_DATA_SIDEBAND_H       : integer := 107;
			PKT_DATA_SIDEBAND_L       : integer := 100;
			PKT_ADDR_SIDEBAND_H       : integer := 99;
			PKT_ADDR_SIDEBAND_L       : integer := 95;
			PKT_BURST_TYPE_H          : integer := 94;
			PKT_BURST_TYPE_L          : integer := 93;
			PKT_CACHE_H               : integer := 92;
			PKT_CACHE_L               : integer := 89;
			PKT_THREAD_ID_H           : integer := 88;
			PKT_THREAD_ID_L           : integer := 87;
			PKT_BURST_SIZE_H          : integer := 86;
			PKT_BURST_SIZE_L          : integer := 84;
			PKT_TRANS_EXCLUSIVE       : integer := 83;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			ST_DATA_W                 : integer := 115;
			ST_CHANNEL_W              : integer := 1;
			AV_BURSTCOUNT_W           : integer := 3;
			SUPPRESS_0_BYTEEN_RSP     : integer := 1;
			ID                        : integer := 1;
			BURSTWRAP_VALUE           : integer := 4;
			CACHE_VALUE               : integer := 0;
			SECURE_ACCESS_BIT         : integer := 1;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0
		);
		port (
			clk                   : in  std_logic                     := 'X';             -- clk
			reset                 : in  std_logic                     := 'X';             -- reset
			av_address            : in  std_logic_vector(26 downto 0) := (others => 'X'); -- address
			av_write              : in  std_logic                     := 'X';             -- write
			av_read               : in  std_logic                     := 'X';             -- read
			av_writedata          : in  std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			av_readdata           : out std_logic_vector(15 downto 0);                    -- readdata
			av_waitrequest        : out std_logic;                                        -- waitrequest
			av_readdatavalid      : out std_logic;                                        -- readdatavalid
			av_byteenable         : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			av_burstcount         : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- burstcount
			av_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_lock               : in  std_logic                     := 'X';             -- lock
			cp_valid              : out std_logic;                                        -- valid
			cp_data               : out std_logic_vector(87 downto 0);                    -- data
			cp_startofpacket      : out std_logic;                                        -- startofpacket
			cp_endofpacket        : out std_logic;                                        -- endofpacket
			cp_ready              : in  std_logic                     := 'X';             -- ready
			rp_valid              : in  std_logic                     := 'X';             -- valid
			rp_data               : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			rp_channel            : in  std_logic_vector(6 downto 0)  := (others => 'X'); -- channel
			rp_startofpacket      : in  std_logic                     := 'X';             -- startofpacket
			rp_endofpacket        : in  std_logic                     := 'X';             -- endofpacket
			rp_ready              : out std_logic;                                        -- ready
			av_response           : out std_logic_vector(1 downto 0);                     -- response
			av_writeresponsevalid : out std_logic                                         -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_sega_saturn_abus_slave_0_avalon_master_agent;

	component wasca_mm_interconnect_0_nios2_gen2_0_data_master_agent is
		generic (
			PKT_ORI_BURST_SIZE_H      : integer := 116;
			PKT_ORI_BURST_SIZE_L      : integer := 114;
			PKT_RESPONSE_STATUS_H     : integer := 113;
			PKT_RESPONSE_STATUS_L     : integer := 112;
			PKT_QOS_H                 : integer := 111;
			PKT_QOS_L                 : integer := 108;
			PKT_DATA_SIDEBAND_H       : integer := 107;
			PKT_DATA_SIDEBAND_L       : integer := 100;
			PKT_ADDR_SIDEBAND_H       : integer := 99;
			PKT_ADDR_SIDEBAND_L       : integer := 95;
			PKT_BURST_TYPE_H          : integer := 94;
			PKT_BURST_TYPE_L          : integer := 93;
			PKT_CACHE_H               : integer := 92;
			PKT_CACHE_L               : integer := 89;
			PKT_THREAD_ID_H           : integer := 88;
			PKT_THREAD_ID_L           : integer := 87;
			PKT_BURST_SIZE_H          : integer := 86;
			PKT_BURST_SIZE_L          : integer := 84;
			PKT_TRANS_EXCLUSIVE       : integer := 83;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			ST_DATA_W                 : integer := 115;
			ST_CHANNEL_W              : integer := 1;
			AV_BURSTCOUNT_W           : integer := 3;
			SUPPRESS_0_BYTEEN_RSP     : integer := 1;
			ID                        : integer := 1;
			BURSTWRAP_VALUE           : integer := 4;
			CACHE_VALUE               : integer := 0;
			SECURE_ACCESS_BIT         : integer := 1;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0
		);
		port (
			clk                   : in  std_logic                      := 'X';             -- clk
			reset                 : in  std_logic                      := 'X';             -- reset
			av_address            : in  std_logic_vector(26 downto 0)  := (others => 'X'); -- address
			av_write              : in  std_logic                      := 'X';             -- write
			av_read               : in  std_logic                      := 'X';             -- read
			av_writedata          : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- writedata
			av_readdata           : out std_logic_vector(31 downto 0);                     -- readdata
			av_waitrequest        : out std_logic;                                         -- waitrequest
			av_readdatavalid      : out std_logic;                                         -- readdatavalid
			av_byteenable         : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- byteenable
			av_burstcount         : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- burstcount
			av_debugaccess        : in  std_logic                      := 'X';             -- debugaccess
			av_lock               : in  std_logic                      := 'X';             -- lock
			cp_valid              : out std_logic;                                         -- valid
			cp_data               : out std_logic_vector(105 downto 0);                    -- data
			cp_startofpacket      : out std_logic;                                         -- startofpacket
			cp_endofpacket        : out std_logic;                                         -- endofpacket
			cp_ready              : in  std_logic                      := 'X';             -- ready
			rp_valid              : in  std_logic                      := 'X';             -- valid
			rp_data               : in  std_logic_vector(105 downto 0) := (others => 'X'); -- data
			rp_channel            : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- channel
			rp_startofpacket      : in  std_logic                      := 'X';             -- startofpacket
			rp_endofpacket        : in  std_logic                      := 'X';             -- endofpacket
			rp_ready              : out std_logic;                                         -- ready
			av_response           : out std_logic_vector(1 downto 0);                      -- response
			av_writeresponsevalid : out std_logic                                          -- writeresponsevalid
		);
	end component wasca_mm_interconnect_0_nios2_gen2_0_data_master_agent;

	signal sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_waitrequest      : std_logic;                      -- sega_saturn_abus_slave_0_avalon_master_agent:av_waitrequest -> sega_saturn_abus_slave_0_avalon_master_translator:uav_waitrequest
	signal sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_readdata         : std_logic_vector(15 downto 0);  -- sega_saturn_abus_slave_0_avalon_master_agent:av_readdata -> sega_saturn_abus_slave_0_avalon_master_translator:uav_readdata
	signal sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_debugaccess      : std_logic;                      -- sega_saturn_abus_slave_0_avalon_master_translator:uav_debugaccess -> sega_saturn_abus_slave_0_avalon_master_agent:av_debugaccess
	signal sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_address          : std_logic_vector(26 downto 0);  -- sega_saturn_abus_slave_0_avalon_master_translator:uav_address -> sega_saturn_abus_slave_0_avalon_master_agent:av_address
	signal sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_read             : std_logic;                      -- sega_saturn_abus_slave_0_avalon_master_translator:uav_read -> sega_saturn_abus_slave_0_avalon_master_agent:av_read
	signal sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_byteenable       : std_logic_vector(1 downto 0);   -- sega_saturn_abus_slave_0_avalon_master_translator:uav_byteenable -> sega_saturn_abus_slave_0_avalon_master_agent:av_byteenable
	signal sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_readdatavalid    : std_logic;                      -- sega_saturn_abus_slave_0_avalon_master_agent:av_readdatavalid -> sega_saturn_abus_slave_0_avalon_master_translator:uav_readdatavalid
	signal sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_lock             : std_logic;                      -- sega_saturn_abus_slave_0_avalon_master_translator:uav_lock -> sega_saturn_abus_slave_0_avalon_master_agent:av_lock
	signal sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_write            : std_logic;                      -- sega_saturn_abus_slave_0_avalon_master_translator:uav_write -> sega_saturn_abus_slave_0_avalon_master_agent:av_write
	signal sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_writedata        : std_logic_vector(15 downto 0);  -- sega_saturn_abus_slave_0_avalon_master_translator:uav_writedata -> sega_saturn_abus_slave_0_avalon_master_agent:av_writedata
	signal sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_burstcount       : std_logic_vector(1 downto 0);   -- sega_saturn_abus_slave_0_avalon_master_translator:uav_burstcount -> sega_saturn_abus_slave_0_avalon_master_agent:av_burstcount
	signal rsp_mux_src_valid                                                                            : std_logic;                      -- rsp_mux:src_valid -> sega_saturn_abus_slave_0_avalon_master_agent:rp_valid
	signal rsp_mux_src_data                                                                             : std_logic_vector(87 downto 0);  -- rsp_mux:src_data -> sega_saturn_abus_slave_0_avalon_master_agent:rp_data
	signal rsp_mux_src_ready                                                                            : std_logic;                      -- sega_saturn_abus_slave_0_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	signal rsp_mux_src_channel                                                                          : std_logic_vector(6 downto 0);   -- rsp_mux:src_channel -> sega_saturn_abus_slave_0_avalon_master_agent:rp_channel
	signal rsp_mux_src_startofpacket                                                                    : std_logic;                      -- rsp_mux:src_startofpacket -> sega_saturn_abus_slave_0_avalon_master_agent:rp_startofpacket
	signal rsp_mux_src_endofpacket                                                                      : std_logic;                      -- rsp_mux:src_endofpacket -> sega_saturn_abus_slave_0_avalon_master_agent:rp_endofpacket
	signal nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest                    : std_logic;                      -- nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	signal nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata                       : std_logic_vector(31 downto 0);  -- nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	signal nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess                    : std_logic;                      -- nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	signal nios2_gen2_0_data_master_translator_avalon_universal_master_0_address                        : std_logic_vector(26 downto 0);  -- nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	signal nios2_gen2_0_data_master_translator_avalon_universal_master_0_read                           : std_logic;                      -- nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	signal nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable                     : std_logic_vector(3 downto 0);   -- nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	signal nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid                  : std_logic;                      -- nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	signal nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock                           : std_logic;                      -- nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	signal nios2_gen2_0_data_master_translator_avalon_universal_master_0_write                          : std_logic;                      -- nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	signal nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata                      : std_logic_vector(31 downto 0);  -- nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	signal nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount                     : std_logic_vector(2 downto 0);   -- nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	signal rsp_mux_001_src_valid                                                                        : std_logic;                      -- rsp_mux_001:src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	signal rsp_mux_001_src_data                                                                         : std_logic_vector(105 downto 0); -- rsp_mux_001:src_data -> nios2_gen2_0_data_master_agent:rp_data
	signal rsp_mux_001_src_ready                                                                        : std_logic;                      -- nios2_gen2_0_data_master_agent:rp_ready -> rsp_mux_001:src_ready
	signal rsp_mux_001_src_channel                                                                      : std_logic_vector(6 downto 0);   -- rsp_mux_001:src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	signal rsp_mux_001_src_startofpacket                                                                : std_logic;                      -- rsp_mux_001:src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	signal rsp_mux_001_src_endofpacket                                                                  : std_logic;                      -- rsp_mux_001:src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	signal nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest             : std_logic;                      -- nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	signal nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata                : std_logic_vector(31 downto 0);  -- nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	signal nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess             : std_logic;                      -- nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	signal nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address                 : std_logic_vector(26 downto 0);  -- nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	signal nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read                    : std_logic;                      -- nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	signal nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable              : std_logic_vector(3 downto 0);   -- nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	signal nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid           : std_logic;                      -- nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	signal nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock                    : std_logic;                      -- nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	signal nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write                   : std_logic;                      -- nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	signal nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata               : std_logic_vector(31 downto 0);  -- nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	signal nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount              : std_logic_vector(2 downto 0);   -- nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	signal rsp_mux_002_src_valid                                                                        : std_logic;                      -- rsp_mux_002:src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	signal rsp_mux_002_src_data                                                                         : std_logic_vector(105 downto 0); -- rsp_mux_002:src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	signal rsp_mux_002_src_ready                                                                        : std_logic;                      -- nios2_gen2_0_instruction_master_agent:rp_ready -> rsp_mux_002:src_ready
	signal rsp_mux_002_src_channel                                                                      : std_logic_vector(6 downto 0);   -- rsp_mux_002:src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	signal rsp_mux_002_src_startofpacket                                                                : std_logic;                      -- rsp_mux_002:src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	signal rsp_mux_002_src_endofpacket                                                                  : std_logic;                      -- rsp_mux_002:src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	signal external_sdram_controller_s1_agent_m0_readdata                                               : std_logic_vector(15 downto 0);  -- external_sdram_controller_s1_translator:uav_readdata -> external_sdram_controller_s1_agent:m0_readdata
	signal external_sdram_controller_s1_agent_m0_waitrequest                                            : std_logic;                      -- external_sdram_controller_s1_translator:uav_waitrequest -> external_sdram_controller_s1_agent:m0_waitrequest
	signal external_sdram_controller_s1_agent_m0_debugaccess                                            : std_logic;                      -- external_sdram_controller_s1_agent:m0_debugaccess -> external_sdram_controller_s1_translator:uav_debugaccess
	signal external_sdram_controller_s1_agent_m0_address                                                : std_logic_vector(26 downto 0);  -- external_sdram_controller_s1_agent:m0_address -> external_sdram_controller_s1_translator:uav_address
	signal external_sdram_controller_s1_agent_m0_byteenable                                             : std_logic_vector(1 downto 0);   -- external_sdram_controller_s1_agent:m0_byteenable -> external_sdram_controller_s1_translator:uav_byteenable
	signal external_sdram_controller_s1_agent_m0_read                                                   : std_logic;                      -- external_sdram_controller_s1_agent:m0_read -> external_sdram_controller_s1_translator:uav_read
	signal external_sdram_controller_s1_agent_m0_readdatavalid                                          : std_logic;                      -- external_sdram_controller_s1_translator:uav_readdatavalid -> external_sdram_controller_s1_agent:m0_readdatavalid
	signal external_sdram_controller_s1_agent_m0_lock                                                   : std_logic;                      -- external_sdram_controller_s1_agent:m0_lock -> external_sdram_controller_s1_translator:uav_lock
	signal external_sdram_controller_s1_agent_m0_writedata                                              : std_logic_vector(15 downto 0);  -- external_sdram_controller_s1_agent:m0_writedata -> external_sdram_controller_s1_translator:uav_writedata
	signal external_sdram_controller_s1_agent_m0_write                                                  : std_logic;                      -- external_sdram_controller_s1_agent:m0_write -> external_sdram_controller_s1_translator:uav_write
	signal external_sdram_controller_s1_agent_m0_burstcount                                             : std_logic_vector(1 downto 0);   -- external_sdram_controller_s1_agent:m0_burstcount -> external_sdram_controller_s1_translator:uav_burstcount
	signal external_sdram_controller_s1_agent_rf_source_valid                                           : std_logic;                      -- external_sdram_controller_s1_agent:rf_source_valid -> external_sdram_controller_s1_agent_rsp_fifo:in_valid
	signal external_sdram_controller_s1_agent_rf_source_data                                            : std_logic_vector(88 downto 0);  -- external_sdram_controller_s1_agent:rf_source_data -> external_sdram_controller_s1_agent_rsp_fifo:in_data
	signal external_sdram_controller_s1_agent_rf_source_ready                                           : std_logic;                      -- external_sdram_controller_s1_agent_rsp_fifo:in_ready -> external_sdram_controller_s1_agent:rf_source_ready
	signal external_sdram_controller_s1_agent_rf_source_startofpacket                                   : std_logic;                      -- external_sdram_controller_s1_agent:rf_source_startofpacket -> external_sdram_controller_s1_agent_rsp_fifo:in_startofpacket
	signal external_sdram_controller_s1_agent_rf_source_endofpacket                                     : std_logic;                      -- external_sdram_controller_s1_agent:rf_source_endofpacket -> external_sdram_controller_s1_agent_rsp_fifo:in_endofpacket
	signal external_sdram_controller_s1_agent_rsp_fifo_out_valid                                        : std_logic;                      -- external_sdram_controller_s1_agent_rsp_fifo:out_valid -> external_sdram_controller_s1_agent:rf_sink_valid
	signal external_sdram_controller_s1_agent_rsp_fifo_out_data                                         : std_logic_vector(88 downto 0);  -- external_sdram_controller_s1_agent_rsp_fifo:out_data -> external_sdram_controller_s1_agent:rf_sink_data
	signal external_sdram_controller_s1_agent_rsp_fifo_out_ready                                        : std_logic;                      -- external_sdram_controller_s1_agent:rf_sink_ready -> external_sdram_controller_s1_agent_rsp_fifo:out_ready
	signal external_sdram_controller_s1_agent_rsp_fifo_out_startofpacket                                : std_logic;                      -- external_sdram_controller_s1_agent_rsp_fifo:out_startofpacket -> external_sdram_controller_s1_agent:rf_sink_startofpacket
	signal external_sdram_controller_s1_agent_rsp_fifo_out_endofpacket                                  : std_logic;                      -- external_sdram_controller_s1_agent_rsp_fifo:out_endofpacket -> external_sdram_controller_s1_agent:rf_sink_endofpacket
	signal external_sdram_controller_s1_agent_rdata_fifo_src_valid                                      : std_logic;                      -- external_sdram_controller_s1_agent:rdata_fifo_src_valid -> external_sdram_controller_s1_agent_rdata_fifo:in_valid
	signal external_sdram_controller_s1_agent_rdata_fifo_src_data                                       : std_logic_vector(17 downto 0);  -- external_sdram_controller_s1_agent:rdata_fifo_src_data -> external_sdram_controller_s1_agent_rdata_fifo:in_data
	signal external_sdram_controller_s1_agent_rdata_fifo_src_ready                                      : std_logic;                      -- external_sdram_controller_s1_agent_rdata_fifo:in_ready -> external_sdram_controller_s1_agent:rdata_fifo_src_ready
	signal onchip_flash_0_data_agent_m0_readdata                                                        : std_logic_vector(31 downto 0);  -- onchip_flash_0_data_translator:uav_readdata -> onchip_flash_0_data_agent:m0_readdata
	signal onchip_flash_0_data_agent_m0_waitrequest                                                     : std_logic;                      -- onchip_flash_0_data_translator:uav_waitrequest -> onchip_flash_0_data_agent:m0_waitrequest
	signal onchip_flash_0_data_agent_m0_debugaccess                                                     : std_logic;                      -- onchip_flash_0_data_agent:m0_debugaccess -> onchip_flash_0_data_translator:uav_debugaccess
	signal onchip_flash_0_data_agent_m0_address                                                         : std_logic_vector(26 downto 0);  -- onchip_flash_0_data_agent:m0_address -> onchip_flash_0_data_translator:uav_address
	signal onchip_flash_0_data_agent_m0_byteenable                                                      : std_logic_vector(3 downto 0);   -- onchip_flash_0_data_agent:m0_byteenable -> onchip_flash_0_data_translator:uav_byteenable
	signal onchip_flash_0_data_agent_m0_read                                                            : std_logic;                      -- onchip_flash_0_data_agent:m0_read -> onchip_flash_0_data_translator:uav_read
	signal onchip_flash_0_data_agent_m0_readdatavalid                                                   : std_logic;                      -- onchip_flash_0_data_translator:uav_readdatavalid -> onchip_flash_0_data_agent:m0_readdatavalid
	signal onchip_flash_0_data_agent_m0_lock                                                            : std_logic;                      -- onchip_flash_0_data_agent:m0_lock -> onchip_flash_0_data_translator:uav_lock
	signal onchip_flash_0_data_agent_m0_writedata                                                       : std_logic_vector(31 downto 0);  -- onchip_flash_0_data_agent:m0_writedata -> onchip_flash_0_data_translator:uav_writedata
	signal onchip_flash_0_data_agent_m0_write                                                           : std_logic;                      -- onchip_flash_0_data_agent:m0_write -> onchip_flash_0_data_translator:uav_write
	signal onchip_flash_0_data_agent_m0_burstcount                                                      : std_logic_vector(5 downto 0);   -- onchip_flash_0_data_agent:m0_burstcount -> onchip_flash_0_data_translator:uav_burstcount
	signal onchip_flash_0_data_agent_rf_source_valid                                                    : std_logic;                      -- onchip_flash_0_data_agent:rf_source_valid -> onchip_flash_0_data_agent_rsp_fifo:in_valid
	signal onchip_flash_0_data_agent_rf_source_data                                                     : std_logic_vector(106 downto 0); -- onchip_flash_0_data_agent:rf_source_data -> onchip_flash_0_data_agent_rsp_fifo:in_data
	signal onchip_flash_0_data_agent_rf_source_ready                                                    : std_logic;                      -- onchip_flash_0_data_agent_rsp_fifo:in_ready -> onchip_flash_0_data_agent:rf_source_ready
	signal onchip_flash_0_data_agent_rf_source_startofpacket                                            : std_logic;                      -- onchip_flash_0_data_agent:rf_source_startofpacket -> onchip_flash_0_data_agent_rsp_fifo:in_startofpacket
	signal onchip_flash_0_data_agent_rf_source_endofpacket                                              : std_logic;                      -- onchip_flash_0_data_agent:rf_source_endofpacket -> onchip_flash_0_data_agent_rsp_fifo:in_endofpacket
	signal onchip_flash_0_data_agent_rsp_fifo_out_valid                                                 : std_logic;                      -- onchip_flash_0_data_agent_rsp_fifo:out_valid -> onchip_flash_0_data_agent:rf_sink_valid
	signal onchip_flash_0_data_agent_rsp_fifo_out_data                                                  : std_logic_vector(106 downto 0); -- onchip_flash_0_data_agent_rsp_fifo:out_data -> onchip_flash_0_data_agent:rf_sink_data
	signal onchip_flash_0_data_agent_rsp_fifo_out_ready                                                 : std_logic;                      -- onchip_flash_0_data_agent:rf_sink_ready -> onchip_flash_0_data_agent_rsp_fifo:out_ready
	signal onchip_flash_0_data_agent_rsp_fifo_out_startofpacket                                         : std_logic;                      -- onchip_flash_0_data_agent_rsp_fifo:out_startofpacket -> onchip_flash_0_data_agent:rf_sink_startofpacket
	signal onchip_flash_0_data_agent_rsp_fifo_out_endofpacket                                           : std_logic;                      -- onchip_flash_0_data_agent_rsp_fifo:out_endofpacket -> onchip_flash_0_data_agent:rf_sink_endofpacket
	signal cmd_mux_001_src_valid                                                                        : std_logic;                      -- cmd_mux_001:src_valid -> onchip_flash_0_data_agent:cp_valid
	signal cmd_mux_001_src_data                                                                         : std_logic_vector(105 downto 0); -- cmd_mux_001:src_data -> onchip_flash_0_data_agent:cp_data
	signal cmd_mux_001_src_ready                                                                        : std_logic;                      -- onchip_flash_0_data_agent:cp_ready -> cmd_mux_001:src_ready
	signal cmd_mux_001_src_channel                                                                      : std_logic_vector(6 downto 0);   -- cmd_mux_001:src_channel -> onchip_flash_0_data_agent:cp_channel
	signal cmd_mux_001_src_startofpacket                                                                : std_logic;                      -- cmd_mux_001:src_startofpacket -> onchip_flash_0_data_agent:cp_startofpacket
	signal cmd_mux_001_src_endofpacket                                                                  : std_logic;                      -- cmd_mux_001:src_endofpacket -> onchip_flash_0_data_agent:cp_endofpacket
	signal nios2_gen2_0_debug_mem_slave_agent_m0_readdata                                               : std_logic_vector(31 downto 0);  -- nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	signal nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest                                            : std_logic;                      -- nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	signal nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess                                            : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	signal nios2_gen2_0_debug_mem_slave_agent_m0_address                                                : std_logic_vector(26 downto 0);  -- nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	signal nios2_gen2_0_debug_mem_slave_agent_m0_byteenable                                             : std_logic_vector(3 downto 0);   -- nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	signal nios2_gen2_0_debug_mem_slave_agent_m0_read                                                   : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	signal nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid                                          : std_logic;                      -- nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	signal nios2_gen2_0_debug_mem_slave_agent_m0_lock                                                   : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	signal nios2_gen2_0_debug_mem_slave_agent_m0_writedata                                              : std_logic_vector(31 downto 0);  -- nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	signal nios2_gen2_0_debug_mem_slave_agent_m0_write                                                  : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	signal nios2_gen2_0_debug_mem_slave_agent_m0_burstcount                                             : std_logic_vector(2 downto 0);   -- nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	signal nios2_gen2_0_debug_mem_slave_agent_rf_source_valid                                           : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	signal nios2_gen2_0_debug_mem_slave_agent_rf_source_data                                            : std_logic_vector(106 downto 0); -- nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	signal nios2_gen2_0_debug_mem_slave_agent_rf_source_ready                                           : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	signal nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket                                   : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	signal nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket                                     : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	signal nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid                                        : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	signal nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data                                         : std_logic_vector(106 downto 0); -- nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	signal nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready                                        : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	signal nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket                                : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	signal nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket                                  : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	signal cmd_mux_002_src_valid                                                                        : std_logic;                      -- cmd_mux_002:src_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	signal cmd_mux_002_src_data                                                                         : std_logic_vector(105 downto 0); -- cmd_mux_002:src_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	signal cmd_mux_002_src_ready                                                                        : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	signal cmd_mux_002_src_channel                                                                      : std_logic_vector(6 downto 0);   -- cmd_mux_002:src_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	signal cmd_mux_002_src_startofpacket                                                                : std_logic;                      -- cmd_mux_002:src_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	signal cmd_mux_002_src_endofpacket                                                                  : std_logic;                      -- cmd_mux_002:src_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	signal altpll_0_pll_slave_agent_m0_readdata                                                         : std_logic_vector(31 downto 0);  -- altpll_0_pll_slave_translator:uav_readdata -> altpll_0_pll_slave_agent:m0_readdata
	signal altpll_0_pll_slave_agent_m0_waitrequest                                                      : std_logic;                      -- altpll_0_pll_slave_translator:uav_waitrequest -> altpll_0_pll_slave_agent:m0_waitrequest
	signal altpll_0_pll_slave_agent_m0_debugaccess                                                      : std_logic;                      -- altpll_0_pll_slave_agent:m0_debugaccess -> altpll_0_pll_slave_translator:uav_debugaccess
	signal altpll_0_pll_slave_agent_m0_address                                                          : std_logic_vector(26 downto 0);  -- altpll_0_pll_slave_agent:m0_address -> altpll_0_pll_slave_translator:uav_address
	signal altpll_0_pll_slave_agent_m0_byteenable                                                       : std_logic_vector(3 downto 0);   -- altpll_0_pll_slave_agent:m0_byteenable -> altpll_0_pll_slave_translator:uav_byteenable
	signal altpll_0_pll_slave_agent_m0_read                                                             : std_logic;                      -- altpll_0_pll_slave_agent:m0_read -> altpll_0_pll_slave_translator:uav_read
	signal altpll_0_pll_slave_agent_m0_readdatavalid                                                    : std_logic;                      -- altpll_0_pll_slave_translator:uav_readdatavalid -> altpll_0_pll_slave_agent:m0_readdatavalid
	signal altpll_0_pll_slave_agent_m0_lock                                                             : std_logic;                      -- altpll_0_pll_slave_agent:m0_lock -> altpll_0_pll_slave_translator:uav_lock
	signal altpll_0_pll_slave_agent_m0_writedata                                                        : std_logic_vector(31 downto 0);  -- altpll_0_pll_slave_agent:m0_writedata -> altpll_0_pll_slave_translator:uav_writedata
	signal altpll_0_pll_slave_agent_m0_write                                                            : std_logic;                      -- altpll_0_pll_slave_agent:m0_write -> altpll_0_pll_slave_translator:uav_write
	signal altpll_0_pll_slave_agent_m0_burstcount                                                       : std_logic_vector(2 downto 0);   -- altpll_0_pll_slave_agent:m0_burstcount -> altpll_0_pll_slave_translator:uav_burstcount
	signal altpll_0_pll_slave_agent_rf_source_valid                                                     : std_logic;                      -- altpll_0_pll_slave_agent:rf_source_valid -> altpll_0_pll_slave_agent_rsp_fifo:in_valid
	signal altpll_0_pll_slave_agent_rf_source_data                                                      : std_logic_vector(106 downto 0); -- altpll_0_pll_slave_agent:rf_source_data -> altpll_0_pll_slave_agent_rsp_fifo:in_data
	signal altpll_0_pll_slave_agent_rf_source_ready                                                     : std_logic;                      -- altpll_0_pll_slave_agent_rsp_fifo:in_ready -> altpll_0_pll_slave_agent:rf_source_ready
	signal altpll_0_pll_slave_agent_rf_source_startofpacket                                             : std_logic;                      -- altpll_0_pll_slave_agent:rf_source_startofpacket -> altpll_0_pll_slave_agent_rsp_fifo:in_startofpacket
	signal altpll_0_pll_slave_agent_rf_source_endofpacket                                               : std_logic;                      -- altpll_0_pll_slave_agent:rf_source_endofpacket -> altpll_0_pll_slave_agent_rsp_fifo:in_endofpacket
	signal altpll_0_pll_slave_agent_rsp_fifo_out_valid                                                  : std_logic;                      -- altpll_0_pll_slave_agent_rsp_fifo:out_valid -> altpll_0_pll_slave_agent:rf_sink_valid
	signal altpll_0_pll_slave_agent_rsp_fifo_out_data                                                   : std_logic_vector(106 downto 0); -- altpll_0_pll_slave_agent_rsp_fifo:out_data -> altpll_0_pll_slave_agent:rf_sink_data
	signal altpll_0_pll_slave_agent_rsp_fifo_out_ready                                                  : std_logic;                      -- altpll_0_pll_slave_agent:rf_sink_ready -> altpll_0_pll_slave_agent_rsp_fifo:out_ready
	signal altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket                                          : std_logic;                      -- altpll_0_pll_slave_agent_rsp_fifo:out_startofpacket -> altpll_0_pll_slave_agent:rf_sink_startofpacket
	signal altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket                                            : std_logic;                      -- altpll_0_pll_slave_agent_rsp_fifo:out_endofpacket -> altpll_0_pll_slave_agent:rf_sink_endofpacket
	signal altpll_0_pll_slave_agent_rdata_fifo_src_valid                                                : std_logic;                      -- altpll_0_pll_slave_agent:rdata_fifo_src_valid -> altpll_0_pll_slave_agent_rdata_fifo:in_valid
	signal altpll_0_pll_slave_agent_rdata_fifo_src_data                                                 : std_logic_vector(33 downto 0);  -- altpll_0_pll_slave_agent:rdata_fifo_src_data -> altpll_0_pll_slave_agent_rdata_fifo:in_data
	signal altpll_0_pll_slave_agent_rdata_fifo_src_ready                                                : std_logic;                      -- altpll_0_pll_slave_agent_rdata_fifo:in_ready -> altpll_0_pll_slave_agent:rdata_fifo_src_ready
	signal cmd_mux_003_src_valid                                                                        : std_logic;                      -- cmd_mux_003:src_valid -> altpll_0_pll_slave_agent:cp_valid
	signal cmd_mux_003_src_data                                                                         : std_logic_vector(105 downto 0); -- cmd_mux_003:src_data -> altpll_0_pll_slave_agent:cp_data
	signal cmd_mux_003_src_ready                                                                        : std_logic;                      -- altpll_0_pll_slave_agent:cp_ready -> cmd_mux_003:src_ready
	signal cmd_mux_003_src_channel                                                                      : std_logic_vector(6 downto 0);   -- cmd_mux_003:src_channel -> altpll_0_pll_slave_agent:cp_channel
	signal cmd_mux_003_src_startofpacket                                                                : std_logic;                      -- cmd_mux_003:src_startofpacket -> altpll_0_pll_slave_agent:cp_startofpacket
	signal cmd_mux_003_src_endofpacket                                                                  : std_logic;                      -- cmd_mux_003:src_endofpacket -> altpll_0_pll_slave_agent:cp_endofpacket
	signal onchip_memory2_0_s1_agent_m0_readdata                                                        : std_logic_vector(31 downto 0);  -- onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	signal onchip_memory2_0_s1_agent_m0_waitrequest                                                     : std_logic;                      -- onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	signal onchip_memory2_0_s1_agent_m0_debugaccess                                                     : std_logic;                      -- onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	signal onchip_memory2_0_s1_agent_m0_address                                                         : std_logic_vector(26 downto 0);  -- onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	signal onchip_memory2_0_s1_agent_m0_byteenable                                                      : std_logic_vector(3 downto 0);   -- onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	signal onchip_memory2_0_s1_agent_m0_read                                                            : std_logic;                      -- onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	signal onchip_memory2_0_s1_agent_m0_readdatavalid                                                   : std_logic;                      -- onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	signal onchip_memory2_0_s1_agent_m0_lock                                                            : std_logic;                      -- onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	signal onchip_memory2_0_s1_agent_m0_writedata                                                       : std_logic_vector(31 downto 0);  -- onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	signal onchip_memory2_0_s1_agent_m0_write                                                           : std_logic;                      -- onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	signal onchip_memory2_0_s1_agent_m0_burstcount                                                      : std_logic_vector(2 downto 0);   -- onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	signal onchip_memory2_0_s1_agent_rf_source_valid                                                    : std_logic;                      -- onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	signal onchip_memory2_0_s1_agent_rf_source_data                                                     : std_logic_vector(106 downto 0); -- onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	signal onchip_memory2_0_s1_agent_rf_source_ready                                                    : std_logic;                      -- onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	signal onchip_memory2_0_s1_agent_rf_source_startofpacket                                            : std_logic;                      -- onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	signal onchip_memory2_0_s1_agent_rf_source_endofpacket                                              : std_logic;                      -- onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	signal onchip_memory2_0_s1_agent_rsp_fifo_out_valid                                                 : std_logic;                      -- onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	signal onchip_memory2_0_s1_agent_rsp_fifo_out_data                                                  : std_logic_vector(106 downto 0); -- onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	signal onchip_memory2_0_s1_agent_rsp_fifo_out_ready                                                 : std_logic;                      -- onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	signal onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket                                         : std_logic;                      -- onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	signal onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket                                           : std_logic;                      -- onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	signal cmd_mux_004_src_valid                                                                        : std_logic;                      -- cmd_mux_004:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	signal cmd_mux_004_src_data                                                                         : std_logic_vector(105 downto 0); -- cmd_mux_004:src_data -> onchip_memory2_0_s1_agent:cp_data
	signal cmd_mux_004_src_ready                                                                        : std_logic;                      -- onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_004:src_ready
	signal cmd_mux_004_src_channel                                                                      : std_logic_vector(6 downto 0);   -- cmd_mux_004:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	signal cmd_mux_004_src_startofpacket                                                                : std_logic;                      -- cmd_mux_004:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	signal cmd_mux_004_src_endofpacket                                                                  : std_logic;                      -- cmd_mux_004:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	signal pio_0_s1_agent_m0_readdata                                                                   : std_logic_vector(31 downto 0);  -- pio_0_s1_translator:uav_readdata -> pio_0_s1_agent:m0_readdata
	signal pio_0_s1_agent_m0_waitrequest                                                                : std_logic;                      -- pio_0_s1_translator:uav_waitrequest -> pio_0_s1_agent:m0_waitrequest
	signal pio_0_s1_agent_m0_debugaccess                                                                : std_logic;                      -- pio_0_s1_agent:m0_debugaccess -> pio_0_s1_translator:uav_debugaccess
	signal pio_0_s1_agent_m0_address                                                                    : std_logic_vector(26 downto 0);  -- pio_0_s1_agent:m0_address -> pio_0_s1_translator:uav_address
	signal pio_0_s1_agent_m0_byteenable                                                                 : std_logic_vector(3 downto 0);   -- pio_0_s1_agent:m0_byteenable -> pio_0_s1_translator:uav_byteenable
	signal pio_0_s1_agent_m0_read                                                                       : std_logic;                      -- pio_0_s1_agent:m0_read -> pio_0_s1_translator:uav_read
	signal pio_0_s1_agent_m0_readdatavalid                                                              : std_logic;                      -- pio_0_s1_translator:uav_readdatavalid -> pio_0_s1_agent:m0_readdatavalid
	signal pio_0_s1_agent_m0_lock                                                                       : std_logic;                      -- pio_0_s1_agent:m0_lock -> pio_0_s1_translator:uav_lock
	signal pio_0_s1_agent_m0_writedata                                                                  : std_logic_vector(31 downto 0);  -- pio_0_s1_agent:m0_writedata -> pio_0_s1_translator:uav_writedata
	signal pio_0_s1_agent_m0_write                                                                      : std_logic;                      -- pio_0_s1_agent:m0_write -> pio_0_s1_translator:uav_write
	signal pio_0_s1_agent_m0_burstcount                                                                 : std_logic_vector(2 downto 0);   -- pio_0_s1_agent:m0_burstcount -> pio_0_s1_translator:uav_burstcount
	signal pio_0_s1_agent_rf_source_valid                                                               : std_logic;                      -- pio_0_s1_agent:rf_source_valid -> pio_0_s1_agent_rsp_fifo:in_valid
	signal pio_0_s1_agent_rf_source_data                                                                : std_logic_vector(106 downto 0); -- pio_0_s1_agent:rf_source_data -> pio_0_s1_agent_rsp_fifo:in_data
	signal pio_0_s1_agent_rf_source_ready                                                               : std_logic;                      -- pio_0_s1_agent_rsp_fifo:in_ready -> pio_0_s1_agent:rf_source_ready
	signal pio_0_s1_agent_rf_source_startofpacket                                                       : std_logic;                      -- pio_0_s1_agent:rf_source_startofpacket -> pio_0_s1_agent_rsp_fifo:in_startofpacket
	signal pio_0_s1_agent_rf_source_endofpacket                                                         : std_logic;                      -- pio_0_s1_agent:rf_source_endofpacket -> pio_0_s1_agent_rsp_fifo:in_endofpacket
	signal pio_0_s1_agent_rsp_fifo_out_valid                                                            : std_logic;                      -- pio_0_s1_agent_rsp_fifo:out_valid -> pio_0_s1_agent:rf_sink_valid
	signal pio_0_s1_agent_rsp_fifo_out_data                                                             : std_logic_vector(106 downto 0); -- pio_0_s1_agent_rsp_fifo:out_data -> pio_0_s1_agent:rf_sink_data
	signal pio_0_s1_agent_rsp_fifo_out_ready                                                            : std_logic;                      -- pio_0_s1_agent:rf_sink_ready -> pio_0_s1_agent_rsp_fifo:out_ready
	signal pio_0_s1_agent_rsp_fifo_out_startofpacket                                                    : std_logic;                      -- pio_0_s1_agent_rsp_fifo:out_startofpacket -> pio_0_s1_agent:rf_sink_startofpacket
	signal pio_0_s1_agent_rsp_fifo_out_endofpacket                                                      : std_logic;                      -- pio_0_s1_agent_rsp_fifo:out_endofpacket -> pio_0_s1_agent:rf_sink_endofpacket
	signal cmd_mux_005_src_valid                                                                        : std_logic;                      -- cmd_mux_005:src_valid -> pio_0_s1_agent:cp_valid
	signal cmd_mux_005_src_data                                                                         : std_logic_vector(105 downto 0); -- cmd_mux_005:src_data -> pio_0_s1_agent:cp_data
	signal cmd_mux_005_src_ready                                                                        : std_logic;                      -- pio_0_s1_agent:cp_ready -> cmd_mux_005:src_ready
	signal cmd_mux_005_src_channel                                                                      : std_logic_vector(6 downto 0);   -- cmd_mux_005:src_channel -> pio_0_s1_agent:cp_channel
	signal cmd_mux_005_src_startofpacket                                                                : std_logic;                      -- cmd_mux_005:src_startofpacket -> pio_0_s1_agent:cp_startofpacket
	signal cmd_mux_005_src_endofpacket                                                                  : std_logic;                      -- cmd_mux_005:src_endofpacket -> pio_0_s1_agent:cp_endofpacket
	signal sd_card_spi_spi_control_port_agent_m0_readdata                                               : std_logic_vector(31 downto 0);  -- sd_card_spi_spi_control_port_translator:uav_readdata -> sd_card_spi_spi_control_port_agent:m0_readdata
	signal sd_card_spi_spi_control_port_agent_m0_waitrequest                                            : std_logic;                      -- sd_card_spi_spi_control_port_translator:uav_waitrequest -> sd_card_spi_spi_control_port_agent:m0_waitrequest
	signal sd_card_spi_spi_control_port_agent_m0_debugaccess                                            : std_logic;                      -- sd_card_spi_spi_control_port_agent:m0_debugaccess -> sd_card_spi_spi_control_port_translator:uav_debugaccess
	signal sd_card_spi_spi_control_port_agent_m0_address                                                : std_logic_vector(26 downto 0);  -- sd_card_spi_spi_control_port_agent:m0_address -> sd_card_spi_spi_control_port_translator:uav_address
	signal sd_card_spi_spi_control_port_agent_m0_byteenable                                             : std_logic_vector(3 downto 0);   -- sd_card_spi_spi_control_port_agent:m0_byteenable -> sd_card_spi_spi_control_port_translator:uav_byteenable
	signal sd_card_spi_spi_control_port_agent_m0_read                                                   : std_logic;                      -- sd_card_spi_spi_control_port_agent:m0_read -> sd_card_spi_spi_control_port_translator:uav_read
	signal sd_card_spi_spi_control_port_agent_m0_readdatavalid                                          : std_logic;                      -- sd_card_spi_spi_control_port_translator:uav_readdatavalid -> sd_card_spi_spi_control_port_agent:m0_readdatavalid
	signal sd_card_spi_spi_control_port_agent_m0_lock                                                   : std_logic;                      -- sd_card_spi_spi_control_port_agent:m0_lock -> sd_card_spi_spi_control_port_translator:uav_lock
	signal sd_card_spi_spi_control_port_agent_m0_writedata                                              : std_logic_vector(31 downto 0);  -- sd_card_spi_spi_control_port_agent:m0_writedata -> sd_card_spi_spi_control_port_translator:uav_writedata
	signal sd_card_spi_spi_control_port_agent_m0_write                                                  : std_logic;                      -- sd_card_spi_spi_control_port_agent:m0_write -> sd_card_spi_spi_control_port_translator:uav_write
	signal sd_card_spi_spi_control_port_agent_m0_burstcount                                             : std_logic_vector(2 downto 0);   -- sd_card_spi_spi_control_port_agent:m0_burstcount -> sd_card_spi_spi_control_port_translator:uav_burstcount
	signal sd_card_spi_spi_control_port_agent_rf_source_valid                                           : std_logic;                      -- sd_card_spi_spi_control_port_agent:rf_source_valid -> sd_card_spi_spi_control_port_agent_rsp_fifo:in_valid
	signal sd_card_spi_spi_control_port_agent_rf_source_data                                            : std_logic_vector(106 downto 0); -- sd_card_spi_spi_control_port_agent:rf_source_data -> sd_card_spi_spi_control_port_agent_rsp_fifo:in_data
	signal sd_card_spi_spi_control_port_agent_rf_source_ready                                           : std_logic;                      -- sd_card_spi_spi_control_port_agent_rsp_fifo:in_ready -> sd_card_spi_spi_control_port_agent:rf_source_ready
	signal sd_card_spi_spi_control_port_agent_rf_source_startofpacket                                   : std_logic;                      -- sd_card_spi_spi_control_port_agent:rf_source_startofpacket -> sd_card_spi_spi_control_port_agent_rsp_fifo:in_startofpacket
	signal sd_card_spi_spi_control_port_agent_rf_source_endofpacket                                     : std_logic;                      -- sd_card_spi_spi_control_port_agent:rf_source_endofpacket -> sd_card_spi_spi_control_port_agent_rsp_fifo:in_endofpacket
	signal sd_card_spi_spi_control_port_agent_rsp_fifo_out_valid                                        : std_logic;                      -- sd_card_spi_spi_control_port_agent_rsp_fifo:out_valid -> sd_card_spi_spi_control_port_agent:rf_sink_valid
	signal sd_card_spi_spi_control_port_agent_rsp_fifo_out_data                                         : std_logic_vector(106 downto 0); -- sd_card_spi_spi_control_port_agent_rsp_fifo:out_data -> sd_card_spi_spi_control_port_agent:rf_sink_data
	signal sd_card_spi_spi_control_port_agent_rsp_fifo_out_ready                                        : std_logic;                      -- sd_card_spi_spi_control_port_agent:rf_sink_ready -> sd_card_spi_spi_control_port_agent_rsp_fifo:out_ready
	signal sd_card_spi_spi_control_port_agent_rsp_fifo_out_startofpacket                                : std_logic;                      -- sd_card_spi_spi_control_port_agent_rsp_fifo:out_startofpacket -> sd_card_spi_spi_control_port_agent:rf_sink_startofpacket
	signal sd_card_spi_spi_control_port_agent_rsp_fifo_out_endofpacket                                  : std_logic;                      -- sd_card_spi_spi_control_port_agent_rsp_fifo:out_endofpacket -> sd_card_spi_spi_control_port_agent:rf_sink_endofpacket
	signal cmd_mux_006_src_valid                                                                        : std_logic;                      -- cmd_mux_006:src_valid -> sd_card_spi_spi_control_port_agent:cp_valid
	signal cmd_mux_006_src_data                                                                         : std_logic_vector(105 downto 0); -- cmd_mux_006:src_data -> sd_card_spi_spi_control_port_agent:cp_data
	signal cmd_mux_006_src_ready                                                                        : std_logic;                      -- sd_card_spi_spi_control_port_agent:cp_ready -> cmd_mux_006:src_ready
	signal cmd_mux_006_src_channel                                                                      : std_logic_vector(6 downto 0);   -- cmd_mux_006:src_channel -> sd_card_spi_spi_control_port_agent:cp_channel
	signal cmd_mux_006_src_startofpacket                                                                : std_logic;                      -- cmd_mux_006:src_startofpacket -> sd_card_spi_spi_control_port_agent:cp_startofpacket
	signal cmd_mux_006_src_endofpacket                                                                  : std_logic;                      -- cmd_mux_006:src_endofpacket -> sd_card_spi_spi_control_port_agent:cp_endofpacket
	signal sega_saturn_abus_slave_0_avalon_master_agent_cp_valid                                        : std_logic;                      -- sega_saturn_abus_slave_0_avalon_master_agent:cp_valid -> router:sink_valid
	signal sega_saturn_abus_slave_0_avalon_master_agent_cp_data                                         : std_logic_vector(87 downto 0);  -- sega_saturn_abus_slave_0_avalon_master_agent:cp_data -> router:sink_data
	signal sega_saturn_abus_slave_0_avalon_master_agent_cp_ready                                        : std_logic;                      -- router:sink_ready -> sega_saturn_abus_slave_0_avalon_master_agent:cp_ready
	signal sega_saturn_abus_slave_0_avalon_master_agent_cp_startofpacket                                : std_logic;                      -- sega_saturn_abus_slave_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	signal sega_saturn_abus_slave_0_avalon_master_agent_cp_endofpacket                                  : std_logic;                      -- sega_saturn_abus_slave_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	signal router_src_valid                                                                             : std_logic;                      -- router:src_valid -> cmd_demux:sink_valid
	signal router_src_data                                                                              : std_logic_vector(87 downto 0);  -- router:src_data -> cmd_demux:sink_data
	signal router_src_ready                                                                             : std_logic;                      -- cmd_demux:sink_ready -> router:src_ready
	signal router_src_channel                                                                           : std_logic_vector(6 downto 0);   -- router:src_channel -> cmd_demux:sink_channel
	signal router_src_startofpacket                                                                     : std_logic;                      -- router:src_startofpacket -> cmd_demux:sink_startofpacket
	signal router_src_endofpacket                                                                       : std_logic;                      -- router:src_endofpacket -> cmd_demux:sink_endofpacket
	signal nios2_gen2_0_data_master_agent_cp_valid                                                      : std_logic;                      -- nios2_gen2_0_data_master_agent:cp_valid -> router_001:sink_valid
	signal nios2_gen2_0_data_master_agent_cp_data                                                       : std_logic_vector(105 downto 0); -- nios2_gen2_0_data_master_agent:cp_data -> router_001:sink_data
	signal nios2_gen2_0_data_master_agent_cp_ready                                                      : std_logic;                      -- router_001:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	signal nios2_gen2_0_data_master_agent_cp_startofpacket                                              : std_logic;                      -- nios2_gen2_0_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	signal nios2_gen2_0_data_master_agent_cp_endofpacket                                                : std_logic;                      -- nios2_gen2_0_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	signal router_001_src_valid                                                                         : std_logic;                      -- router_001:src_valid -> cmd_demux_001:sink_valid
	signal router_001_src_data                                                                          : std_logic_vector(105 downto 0); -- router_001:src_data -> cmd_demux_001:sink_data
	signal router_001_src_ready                                                                         : std_logic;                      -- cmd_demux_001:sink_ready -> router_001:src_ready
	signal router_001_src_channel                                                                       : std_logic_vector(6 downto 0);   -- router_001:src_channel -> cmd_demux_001:sink_channel
	signal router_001_src_startofpacket                                                                 : std_logic;                      -- router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	signal router_001_src_endofpacket                                                                   : std_logic;                      -- router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	signal nios2_gen2_0_instruction_master_agent_cp_valid                                               : std_logic;                      -- nios2_gen2_0_instruction_master_agent:cp_valid -> router_002:sink_valid
	signal nios2_gen2_0_instruction_master_agent_cp_data                                                : std_logic_vector(105 downto 0); -- nios2_gen2_0_instruction_master_agent:cp_data -> router_002:sink_data
	signal nios2_gen2_0_instruction_master_agent_cp_ready                                               : std_logic;                      -- router_002:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	signal nios2_gen2_0_instruction_master_agent_cp_startofpacket                                       : std_logic;                      -- nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	signal nios2_gen2_0_instruction_master_agent_cp_endofpacket                                         : std_logic;                      -- nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	signal router_002_src_valid                                                                         : std_logic;                      -- router_002:src_valid -> cmd_demux_002:sink_valid
	signal router_002_src_data                                                                          : std_logic_vector(105 downto 0); -- router_002:src_data -> cmd_demux_002:sink_data
	signal router_002_src_ready                                                                         : std_logic;                      -- cmd_demux_002:sink_ready -> router_002:src_ready
	signal router_002_src_channel                                                                       : std_logic_vector(6 downto 0);   -- router_002:src_channel -> cmd_demux_002:sink_channel
	signal router_002_src_startofpacket                                                                 : std_logic;                      -- router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	signal router_002_src_endofpacket                                                                   : std_logic;                      -- router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	signal external_sdram_controller_s1_agent_rp_valid                                                  : std_logic;                      -- external_sdram_controller_s1_agent:rp_valid -> router_003:sink_valid
	signal external_sdram_controller_s1_agent_rp_data                                                   : std_logic_vector(87 downto 0);  -- external_sdram_controller_s1_agent:rp_data -> router_003:sink_data
	signal external_sdram_controller_s1_agent_rp_ready                                                  : std_logic;                      -- router_003:sink_ready -> external_sdram_controller_s1_agent:rp_ready
	signal external_sdram_controller_s1_agent_rp_startofpacket                                          : std_logic;                      -- external_sdram_controller_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	signal external_sdram_controller_s1_agent_rp_endofpacket                                            : std_logic;                      -- external_sdram_controller_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	signal router_003_src_valid                                                                         : std_logic;                      -- router_003:src_valid -> rsp_demux:sink_valid
	signal router_003_src_data                                                                          : std_logic_vector(87 downto 0);  -- router_003:src_data -> rsp_demux:sink_data
	signal router_003_src_ready                                                                         : std_logic;                      -- rsp_demux:sink_ready -> router_003:src_ready
	signal router_003_src_channel                                                                       : std_logic_vector(6 downto 0);   -- router_003:src_channel -> rsp_demux:sink_channel
	signal router_003_src_startofpacket                                                                 : std_logic;                      -- router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	signal router_003_src_endofpacket                                                                   : std_logic;                      -- router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	signal onchip_flash_0_data_agent_rp_valid                                                           : std_logic;                      -- onchip_flash_0_data_agent:rp_valid -> router_004:sink_valid
	signal onchip_flash_0_data_agent_rp_data                                                            : std_logic_vector(105 downto 0); -- onchip_flash_0_data_agent:rp_data -> router_004:sink_data
	signal onchip_flash_0_data_agent_rp_ready                                                           : std_logic;                      -- router_004:sink_ready -> onchip_flash_0_data_agent:rp_ready
	signal onchip_flash_0_data_agent_rp_startofpacket                                                   : std_logic;                      -- onchip_flash_0_data_agent:rp_startofpacket -> router_004:sink_startofpacket
	signal onchip_flash_0_data_agent_rp_endofpacket                                                     : std_logic;                      -- onchip_flash_0_data_agent:rp_endofpacket -> router_004:sink_endofpacket
	signal router_004_src_valid                                                                         : std_logic;                      -- router_004:src_valid -> rsp_demux_001:sink_valid
	signal router_004_src_data                                                                          : std_logic_vector(105 downto 0); -- router_004:src_data -> rsp_demux_001:sink_data
	signal router_004_src_ready                                                                         : std_logic;                      -- rsp_demux_001:sink_ready -> router_004:src_ready
	signal router_004_src_channel                                                                       : std_logic_vector(6 downto 0);   -- router_004:src_channel -> rsp_demux_001:sink_channel
	signal router_004_src_startofpacket                                                                 : std_logic;                      -- router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	signal router_004_src_endofpacket                                                                   : std_logic;                      -- router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	signal nios2_gen2_0_debug_mem_slave_agent_rp_valid                                                  : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:rp_valid -> router_005:sink_valid
	signal nios2_gen2_0_debug_mem_slave_agent_rp_data                                                   : std_logic_vector(105 downto 0); -- nios2_gen2_0_debug_mem_slave_agent:rp_data -> router_005:sink_data
	signal nios2_gen2_0_debug_mem_slave_agent_rp_ready                                                  : std_logic;                      -- router_005:sink_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	signal nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket                                          : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	signal nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket                                            : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	signal router_005_src_valid                                                                         : std_logic;                      -- router_005:src_valid -> rsp_demux_002:sink_valid
	signal router_005_src_data                                                                          : std_logic_vector(105 downto 0); -- router_005:src_data -> rsp_demux_002:sink_data
	signal router_005_src_ready                                                                         : std_logic;                      -- rsp_demux_002:sink_ready -> router_005:src_ready
	signal router_005_src_channel                                                                       : std_logic_vector(6 downto 0);   -- router_005:src_channel -> rsp_demux_002:sink_channel
	signal router_005_src_startofpacket                                                                 : std_logic;                      -- router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	signal router_005_src_endofpacket                                                                   : std_logic;                      -- router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	signal altpll_0_pll_slave_agent_rp_valid                                                            : std_logic;                      -- altpll_0_pll_slave_agent:rp_valid -> router_006:sink_valid
	signal altpll_0_pll_slave_agent_rp_data                                                             : std_logic_vector(105 downto 0); -- altpll_0_pll_slave_agent:rp_data -> router_006:sink_data
	signal altpll_0_pll_slave_agent_rp_ready                                                            : std_logic;                      -- router_006:sink_ready -> altpll_0_pll_slave_agent:rp_ready
	signal altpll_0_pll_slave_agent_rp_startofpacket                                                    : std_logic;                      -- altpll_0_pll_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	signal altpll_0_pll_slave_agent_rp_endofpacket                                                      : std_logic;                      -- altpll_0_pll_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	signal router_006_src_valid                                                                         : std_logic;                      -- router_006:src_valid -> rsp_demux_003:sink_valid
	signal router_006_src_data                                                                          : std_logic_vector(105 downto 0); -- router_006:src_data -> rsp_demux_003:sink_data
	signal router_006_src_ready                                                                         : std_logic;                      -- rsp_demux_003:sink_ready -> router_006:src_ready
	signal router_006_src_channel                                                                       : std_logic_vector(6 downto 0);   -- router_006:src_channel -> rsp_demux_003:sink_channel
	signal router_006_src_startofpacket                                                                 : std_logic;                      -- router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	signal router_006_src_endofpacket                                                                   : std_logic;                      -- router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	signal onchip_memory2_0_s1_agent_rp_valid                                                           : std_logic;                      -- onchip_memory2_0_s1_agent:rp_valid -> router_007:sink_valid
	signal onchip_memory2_0_s1_agent_rp_data                                                            : std_logic_vector(105 downto 0); -- onchip_memory2_0_s1_agent:rp_data -> router_007:sink_data
	signal onchip_memory2_0_s1_agent_rp_ready                                                           : std_logic;                      -- router_007:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	signal onchip_memory2_0_s1_agent_rp_startofpacket                                                   : std_logic;                      -- onchip_memory2_0_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	signal onchip_memory2_0_s1_agent_rp_endofpacket                                                     : std_logic;                      -- onchip_memory2_0_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	signal router_007_src_valid                                                                         : std_logic;                      -- router_007:src_valid -> rsp_demux_004:sink_valid
	signal router_007_src_data                                                                          : std_logic_vector(105 downto 0); -- router_007:src_data -> rsp_demux_004:sink_data
	signal router_007_src_ready                                                                         : std_logic;                      -- rsp_demux_004:sink_ready -> router_007:src_ready
	signal router_007_src_channel                                                                       : std_logic_vector(6 downto 0);   -- router_007:src_channel -> rsp_demux_004:sink_channel
	signal router_007_src_startofpacket                                                                 : std_logic;                      -- router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	signal router_007_src_endofpacket                                                                   : std_logic;                      -- router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	signal pio_0_s1_agent_rp_valid                                                                      : std_logic;                      -- pio_0_s1_agent:rp_valid -> router_008:sink_valid
	signal pio_0_s1_agent_rp_data                                                                       : std_logic_vector(105 downto 0); -- pio_0_s1_agent:rp_data -> router_008:sink_data
	signal pio_0_s1_agent_rp_ready                                                                      : std_logic;                      -- router_008:sink_ready -> pio_0_s1_agent:rp_ready
	signal pio_0_s1_agent_rp_startofpacket                                                              : std_logic;                      -- pio_0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	signal pio_0_s1_agent_rp_endofpacket                                                                : std_logic;                      -- pio_0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	signal router_008_src_valid                                                                         : std_logic;                      -- router_008:src_valid -> rsp_demux_005:sink_valid
	signal router_008_src_data                                                                          : std_logic_vector(105 downto 0); -- router_008:src_data -> rsp_demux_005:sink_data
	signal router_008_src_ready                                                                         : std_logic;                      -- rsp_demux_005:sink_ready -> router_008:src_ready
	signal router_008_src_channel                                                                       : std_logic_vector(6 downto 0);   -- router_008:src_channel -> rsp_demux_005:sink_channel
	signal router_008_src_startofpacket                                                                 : std_logic;                      -- router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	signal router_008_src_endofpacket                                                                   : std_logic;                      -- router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	signal sd_card_spi_spi_control_port_agent_rp_valid                                                  : std_logic;                      -- sd_card_spi_spi_control_port_agent:rp_valid -> router_009:sink_valid
	signal sd_card_spi_spi_control_port_agent_rp_data                                                   : std_logic_vector(105 downto 0); -- sd_card_spi_spi_control_port_agent:rp_data -> router_009:sink_data
	signal sd_card_spi_spi_control_port_agent_rp_ready                                                  : std_logic;                      -- router_009:sink_ready -> sd_card_spi_spi_control_port_agent:rp_ready
	signal sd_card_spi_spi_control_port_agent_rp_startofpacket                                          : std_logic;                      -- sd_card_spi_spi_control_port_agent:rp_startofpacket -> router_009:sink_startofpacket
	signal sd_card_spi_spi_control_port_agent_rp_endofpacket                                            : std_logic;                      -- sd_card_spi_spi_control_port_agent:rp_endofpacket -> router_009:sink_endofpacket
	signal router_009_src_valid                                                                         : std_logic;                      -- router_009:src_valid -> rsp_demux_006:sink_valid
	signal router_009_src_data                                                                          : std_logic_vector(105 downto 0); -- router_009:src_data -> rsp_demux_006:sink_data
	signal router_009_src_ready                                                                         : std_logic;                      -- rsp_demux_006:sink_ready -> router_009:src_ready
	signal router_009_src_channel                                                                       : std_logic_vector(6 downto 0);   -- router_009:src_channel -> rsp_demux_006:sink_channel
	signal router_009_src_startofpacket                                                                 : std_logic;                      -- router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	signal router_009_src_endofpacket                                                                   : std_logic;                      -- router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	signal cmd_mux_src_valid                                                                            : std_logic;                      -- cmd_mux:src_valid -> external_sdram_controller_s1_burst_adapter:sink0_valid
	signal cmd_mux_src_data                                                                             : std_logic_vector(87 downto 0);  -- cmd_mux:src_data -> external_sdram_controller_s1_burst_adapter:sink0_data
	signal cmd_mux_src_ready                                                                            : std_logic;                      -- external_sdram_controller_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	signal cmd_mux_src_channel                                                                          : std_logic_vector(6 downto 0);   -- cmd_mux:src_channel -> external_sdram_controller_s1_burst_adapter:sink0_channel
	signal cmd_mux_src_startofpacket                                                                    : std_logic;                      -- cmd_mux:src_startofpacket -> external_sdram_controller_s1_burst_adapter:sink0_startofpacket
	signal cmd_mux_src_endofpacket                                                                      : std_logic;                      -- cmd_mux:src_endofpacket -> external_sdram_controller_s1_burst_adapter:sink0_endofpacket
	signal external_sdram_controller_s1_burst_adapter_source0_valid                                     : std_logic;                      -- external_sdram_controller_s1_burst_adapter:source0_valid -> external_sdram_controller_s1_agent:cp_valid
	signal external_sdram_controller_s1_burst_adapter_source0_data                                      : std_logic_vector(87 downto 0);  -- external_sdram_controller_s1_burst_adapter:source0_data -> external_sdram_controller_s1_agent:cp_data
	signal external_sdram_controller_s1_burst_adapter_source0_ready                                     : std_logic;                      -- external_sdram_controller_s1_agent:cp_ready -> external_sdram_controller_s1_burst_adapter:source0_ready
	signal external_sdram_controller_s1_burst_adapter_source0_channel                                   : std_logic_vector(6 downto 0);   -- external_sdram_controller_s1_burst_adapter:source0_channel -> external_sdram_controller_s1_agent:cp_channel
	signal external_sdram_controller_s1_burst_adapter_source0_startofpacket                             : std_logic;                      -- external_sdram_controller_s1_burst_adapter:source0_startofpacket -> external_sdram_controller_s1_agent:cp_startofpacket
	signal external_sdram_controller_s1_burst_adapter_source0_endofpacket                               : std_logic;                      -- external_sdram_controller_s1_burst_adapter:source0_endofpacket -> external_sdram_controller_s1_agent:cp_endofpacket
	signal cmd_demux_src0_valid                                                                         : std_logic;                      -- cmd_demux:src0_valid -> cmd_mux:sink0_valid
	signal cmd_demux_src0_data                                                                          : std_logic_vector(87 downto 0);  -- cmd_demux:src0_data -> cmd_mux:sink0_data
	signal cmd_demux_src0_ready                                                                         : std_logic;                      -- cmd_mux:sink0_ready -> cmd_demux:src0_ready
	signal cmd_demux_src0_channel                                                                       : std_logic_vector(6 downto 0);   -- cmd_demux:src0_channel -> cmd_mux:sink0_channel
	signal cmd_demux_src0_startofpacket                                                                 : std_logic;                      -- cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	signal cmd_demux_src0_endofpacket                                                                   : std_logic;                      -- cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	signal cmd_demux_001_src1_valid                                                                     : std_logic;                      -- cmd_demux_001:src1_valid -> cmd_mux_001:sink0_valid
	signal cmd_demux_001_src1_data                                                                      : std_logic_vector(105 downto 0); -- cmd_demux_001:src1_data -> cmd_mux_001:sink0_data
	signal cmd_demux_001_src1_ready                                                                     : std_logic;                      -- cmd_mux_001:sink0_ready -> cmd_demux_001:src1_ready
	signal cmd_demux_001_src1_channel                                                                   : std_logic_vector(6 downto 0);   -- cmd_demux_001:src1_channel -> cmd_mux_001:sink0_channel
	signal cmd_demux_001_src1_startofpacket                                                             : std_logic;                      -- cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	signal cmd_demux_001_src1_endofpacket                                                               : std_logic;                      -- cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	signal cmd_demux_001_src2_valid                                                                     : std_logic;                      -- cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	signal cmd_demux_001_src2_data                                                                      : std_logic_vector(105 downto 0); -- cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	signal cmd_demux_001_src2_ready                                                                     : std_logic;                      -- cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	signal cmd_demux_001_src2_channel                                                                   : std_logic_vector(6 downto 0);   -- cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	signal cmd_demux_001_src2_startofpacket                                                             : std_logic;                      -- cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	signal cmd_demux_001_src2_endofpacket                                                               : std_logic;                      -- cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	signal cmd_demux_001_src4_valid                                                                     : std_logic;                      -- cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	signal cmd_demux_001_src4_data                                                                      : std_logic_vector(105 downto 0); -- cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	signal cmd_demux_001_src4_ready                                                                     : std_logic;                      -- cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	signal cmd_demux_001_src4_channel                                                                   : std_logic_vector(6 downto 0);   -- cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	signal cmd_demux_001_src4_startofpacket                                                             : std_logic;                      -- cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	signal cmd_demux_001_src4_endofpacket                                                               : std_logic;                      -- cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	signal cmd_demux_001_src5_valid                                                                     : std_logic;                      -- cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	signal cmd_demux_001_src5_data                                                                      : std_logic_vector(105 downto 0); -- cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	signal cmd_demux_001_src5_ready                                                                     : std_logic;                      -- cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	signal cmd_demux_001_src5_channel                                                                   : std_logic_vector(6 downto 0);   -- cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	signal cmd_demux_001_src5_startofpacket                                                             : std_logic;                      -- cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	signal cmd_demux_001_src5_endofpacket                                                               : std_logic;                      -- cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	signal cmd_demux_001_src6_valid                                                                     : std_logic;                      -- cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	signal cmd_demux_001_src6_data                                                                      : std_logic_vector(105 downto 0); -- cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	signal cmd_demux_001_src6_ready                                                                     : std_logic;                      -- cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	signal cmd_demux_001_src6_channel                                                                   : std_logic_vector(6 downto 0);   -- cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	signal cmd_demux_001_src6_startofpacket                                                             : std_logic;                      -- cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	signal cmd_demux_001_src6_endofpacket                                                               : std_logic;                      -- cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	signal cmd_demux_002_src0_valid                                                                     : std_logic;                      -- cmd_demux_002:src0_valid -> cmd_mux_001:sink1_valid
	signal cmd_demux_002_src0_data                                                                      : std_logic_vector(105 downto 0); -- cmd_demux_002:src0_data -> cmd_mux_001:sink1_data
	signal cmd_demux_002_src0_ready                                                                     : std_logic;                      -- cmd_mux_001:sink1_ready -> cmd_demux_002:src0_ready
	signal cmd_demux_002_src0_channel                                                                   : std_logic_vector(6 downto 0);   -- cmd_demux_002:src0_channel -> cmd_mux_001:sink1_channel
	signal cmd_demux_002_src0_startofpacket                                                             : std_logic;                      -- cmd_demux_002:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	signal cmd_demux_002_src0_endofpacket                                                               : std_logic;                      -- cmd_demux_002:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	signal cmd_demux_002_src1_valid                                                                     : std_logic;                      -- cmd_demux_002:src1_valid -> cmd_mux_002:sink1_valid
	signal cmd_demux_002_src1_data                                                                      : std_logic_vector(105 downto 0); -- cmd_demux_002:src1_data -> cmd_mux_002:sink1_data
	signal cmd_demux_002_src1_ready                                                                     : std_logic;                      -- cmd_mux_002:sink1_ready -> cmd_demux_002:src1_ready
	signal cmd_demux_002_src1_channel                                                                   : std_logic_vector(6 downto 0);   -- cmd_demux_002:src1_channel -> cmd_mux_002:sink1_channel
	signal cmd_demux_002_src1_startofpacket                                                             : std_logic;                      -- cmd_demux_002:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	signal cmd_demux_002_src1_endofpacket                                                               : std_logic;                      -- cmd_demux_002:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	signal rsp_demux_src0_valid                                                                         : std_logic;                      -- rsp_demux:src0_valid -> rsp_mux:sink0_valid
	signal rsp_demux_src0_data                                                                          : std_logic_vector(87 downto 0);  -- rsp_demux:src0_data -> rsp_mux:sink0_data
	signal rsp_demux_src0_ready                                                                         : std_logic;                      -- rsp_mux:sink0_ready -> rsp_demux:src0_ready
	signal rsp_demux_src0_channel                                                                       : std_logic_vector(6 downto 0);   -- rsp_demux:src0_channel -> rsp_mux:sink0_channel
	signal rsp_demux_src0_startofpacket                                                                 : std_logic;                      -- rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	signal rsp_demux_src0_endofpacket                                                                   : std_logic;                      -- rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	signal rsp_demux_001_src0_valid                                                                     : std_logic;                      -- rsp_demux_001:src0_valid -> rsp_mux_001:sink1_valid
	signal rsp_demux_001_src0_data                                                                      : std_logic_vector(105 downto 0); -- rsp_demux_001:src0_data -> rsp_mux_001:sink1_data
	signal rsp_demux_001_src0_ready                                                                     : std_logic;                      -- rsp_mux_001:sink1_ready -> rsp_demux_001:src0_ready
	signal rsp_demux_001_src0_channel                                                                   : std_logic_vector(6 downto 0);   -- rsp_demux_001:src0_channel -> rsp_mux_001:sink1_channel
	signal rsp_demux_001_src0_startofpacket                                                             : std_logic;                      -- rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	signal rsp_demux_001_src0_endofpacket                                                               : std_logic;                      -- rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	signal rsp_demux_001_src1_valid                                                                     : std_logic;                      -- rsp_demux_001:src1_valid -> rsp_mux_002:sink0_valid
	signal rsp_demux_001_src1_data                                                                      : std_logic_vector(105 downto 0); -- rsp_demux_001:src1_data -> rsp_mux_002:sink0_data
	signal rsp_demux_001_src1_ready                                                                     : std_logic;                      -- rsp_mux_002:sink0_ready -> rsp_demux_001:src1_ready
	signal rsp_demux_001_src1_channel                                                                   : std_logic_vector(6 downto 0);   -- rsp_demux_001:src1_channel -> rsp_mux_002:sink0_channel
	signal rsp_demux_001_src1_startofpacket                                                             : std_logic;                      -- rsp_demux_001:src1_startofpacket -> rsp_mux_002:sink0_startofpacket
	signal rsp_demux_001_src1_endofpacket                                                               : std_logic;                      -- rsp_demux_001:src1_endofpacket -> rsp_mux_002:sink0_endofpacket
	signal rsp_demux_002_src0_valid                                                                     : std_logic;                      -- rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	signal rsp_demux_002_src0_data                                                                      : std_logic_vector(105 downto 0); -- rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	signal rsp_demux_002_src0_ready                                                                     : std_logic;                      -- rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	signal rsp_demux_002_src0_channel                                                                   : std_logic_vector(6 downto 0);   -- rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	signal rsp_demux_002_src0_startofpacket                                                             : std_logic;                      -- rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	signal rsp_demux_002_src0_endofpacket                                                               : std_logic;                      -- rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	signal rsp_demux_002_src1_valid                                                                     : std_logic;                      -- rsp_demux_002:src1_valid -> rsp_mux_002:sink1_valid
	signal rsp_demux_002_src1_data                                                                      : std_logic_vector(105 downto 0); -- rsp_demux_002:src1_data -> rsp_mux_002:sink1_data
	signal rsp_demux_002_src1_ready                                                                     : std_logic;                      -- rsp_mux_002:sink1_ready -> rsp_demux_002:src1_ready
	signal rsp_demux_002_src1_channel                                                                   : std_logic_vector(6 downto 0);   -- rsp_demux_002:src1_channel -> rsp_mux_002:sink1_channel
	signal rsp_demux_002_src1_startofpacket                                                             : std_logic;                      -- rsp_demux_002:src1_startofpacket -> rsp_mux_002:sink1_startofpacket
	signal rsp_demux_002_src1_endofpacket                                                               : std_logic;                      -- rsp_demux_002:src1_endofpacket -> rsp_mux_002:sink1_endofpacket
	signal rsp_demux_004_src0_valid                                                                     : std_logic;                      -- rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	signal rsp_demux_004_src0_data                                                                      : std_logic_vector(105 downto 0); -- rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	signal rsp_demux_004_src0_ready                                                                     : std_logic;                      -- rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	signal rsp_demux_004_src0_channel                                                                   : std_logic_vector(6 downto 0);   -- rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	signal rsp_demux_004_src0_startofpacket                                                             : std_logic;                      -- rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	signal rsp_demux_004_src0_endofpacket                                                               : std_logic;                      -- rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	signal rsp_demux_005_src0_valid                                                                     : std_logic;                      -- rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	signal rsp_demux_005_src0_data                                                                      : std_logic_vector(105 downto 0); -- rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	signal rsp_demux_005_src0_ready                                                                     : std_logic;                      -- rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	signal rsp_demux_005_src0_channel                                                                   : std_logic_vector(6 downto 0);   -- rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	signal rsp_demux_005_src0_startofpacket                                                             : std_logic;                      -- rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	signal rsp_demux_005_src0_endofpacket                                                               : std_logic;                      -- rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	signal rsp_demux_006_src0_valid                                                                     : std_logic;                      -- rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	signal rsp_demux_006_src0_data                                                                      : std_logic_vector(105 downto 0); -- rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	signal rsp_demux_006_src0_ready                                                                     : std_logic;                      -- rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	signal rsp_demux_006_src0_channel                                                                   : std_logic_vector(6 downto 0);   -- rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	signal rsp_demux_006_src0_startofpacket                                                             : std_logic;                      -- rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	signal rsp_demux_006_src0_endofpacket                                                               : std_logic;                      -- rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	signal cmd_demux_001_src0_valid                                                                     : std_logic;                      -- cmd_demux_001:src0_valid -> nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:in_valid
	signal cmd_demux_001_src0_data                                                                      : std_logic_vector(105 downto 0); -- cmd_demux_001:src0_data -> nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:in_data
	signal cmd_demux_001_src0_ready                                                                     : std_logic;                      -- nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	signal cmd_demux_001_src0_channel                                                                   : std_logic_vector(6 downto 0);   -- cmd_demux_001:src0_channel -> nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:in_channel
	signal cmd_demux_001_src0_startofpacket                                                             : std_logic;                      -- cmd_demux_001:src0_startofpacket -> nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:in_startofpacket
	signal cmd_demux_001_src0_endofpacket                                                               : std_logic;                      -- cmd_demux_001:src0_endofpacket -> nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:in_endofpacket
	signal nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_valid         : std_logic;                      -- nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	signal nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_data          : std_logic_vector(87 downto 0);  -- nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	signal nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_ready         : std_logic;                      -- cmd_mux:sink1_ready -> nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:out_ready
	signal nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_channel       : std_logic_vector(6 downto 0);   -- nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	signal nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_startofpacket : std_logic;                      -- nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	signal nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_endofpacket   : std_logic;                      -- nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	signal rsp_demux_src1_valid                                                                         : std_logic;                      -- rsp_demux:src1_valid -> external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_valid
	signal rsp_demux_src1_data                                                                          : std_logic_vector(87 downto 0);  -- rsp_demux:src1_data -> external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_data
	signal rsp_demux_src1_ready                                                                         : std_logic;                      -- external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	signal rsp_demux_src1_channel                                                                       : std_logic_vector(6 downto 0);   -- rsp_demux:src1_channel -> external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_channel
	signal rsp_demux_src1_startofpacket                                                                 : std_logic;                      -- rsp_demux:src1_startofpacket -> external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_startofpacket
	signal rsp_demux_src1_endofpacket                                                                   : std_logic;                      -- rsp_demux:src1_endofpacket -> external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_endofpacket
	signal external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid         : std_logic;                      -- external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	signal external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data          : std_logic_vector(105 downto 0); -- external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	signal external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready         : std_logic;                      -- rsp_mux_001:sink0_ready -> external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_ready
	signal external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel       : std_logic_vector(6 downto 0);   -- external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	signal external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket : std_logic;                      -- external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	signal external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket   : std_logic;                      -- external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	signal cmd_demux_001_src3_valid                                                                     : std_logic;                      -- cmd_demux_001:src3_valid -> crosser:in_valid
	signal cmd_demux_001_src3_data                                                                      : std_logic_vector(105 downto 0); -- cmd_demux_001:src3_data -> crosser:in_data
	signal cmd_demux_001_src3_ready                                                                     : std_logic;                      -- crosser:in_ready -> cmd_demux_001:src3_ready
	signal cmd_demux_001_src3_channel                                                                   : std_logic_vector(6 downto 0);   -- cmd_demux_001:src3_channel -> crosser:in_channel
	signal cmd_demux_001_src3_startofpacket                                                             : std_logic;                      -- cmd_demux_001:src3_startofpacket -> crosser:in_startofpacket
	signal cmd_demux_001_src3_endofpacket                                                               : std_logic;                      -- cmd_demux_001:src3_endofpacket -> crosser:in_endofpacket
	signal crosser_out_valid                                                                            : std_logic;                      -- crosser:out_valid -> cmd_mux_003:sink0_valid
	signal crosser_out_data                                                                             : std_logic_vector(105 downto 0); -- crosser:out_data -> cmd_mux_003:sink0_data
	signal crosser_out_ready                                                                            : std_logic;                      -- cmd_mux_003:sink0_ready -> crosser:out_ready
	signal crosser_out_channel                                                                          : std_logic_vector(6 downto 0);   -- crosser:out_channel -> cmd_mux_003:sink0_channel
	signal crosser_out_startofpacket                                                                    : std_logic;                      -- crosser:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	signal crosser_out_endofpacket                                                                      : std_logic;                      -- crosser:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	signal rsp_demux_003_src0_valid                                                                     : std_logic;                      -- rsp_demux_003:src0_valid -> crosser_001:in_valid
	signal rsp_demux_003_src0_data                                                                      : std_logic_vector(105 downto 0); -- rsp_demux_003:src0_data -> crosser_001:in_data
	signal rsp_demux_003_src0_ready                                                                     : std_logic;                      -- crosser_001:in_ready -> rsp_demux_003:src0_ready
	signal rsp_demux_003_src0_channel                                                                   : std_logic_vector(6 downto 0);   -- rsp_demux_003:src0_channel -> crosser_001:in_channel
	signal rsp_demux_003_src0_startofpacket                                                             : std_logic;                      -- rsp_demux_003:src0_startofpacket -> crosser_001:in_startofpacket
	signal rsp_demux_003_src0_endofpacket                                                               : std_logic;                      -- rsp_demux_003:src0_endofpacket -> crosser_001:in_endofpacket
	signal crosser_001_out_valid                                                                        : std_logic;                      -- crosser_001:out_valid -> rsp_mux_001:sink3_valid
	signal crosser_001_out_data                                                                         : std_logic_vector(105 downto 0); -- crosser_001:out_data -> rsp_mux_001:sink3_data
	signal crosser_001_out_ready                                                                        : std_logic;                      -- rsp_mux_001:sink3_ready -> crosser_001:out_ready
	signal crosser_001_out_channel                                                                      : std_logic_vector(6 downto 0);   -- crosser_001:out_channel -> rsp_mux_001:sink3_channel
	signal crosser_001_out_startofpacket                                                                : std_logic;                      -- crosser_001:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	signal crosser_001_out_endofpacket                                                                  : std_logic;                      -- crosser_001:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	signal external_sdram_controller_s1_agent_rdata_fifo_out_valid                                      : std_logic;                      -- external_sdram_controller_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	signal external_sdram_controller_s1_agent_rdata_fifo_out_data                                       : std_logic_vector(17 downto 0);  -- external_sdram_controller_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	signal external_sdram_controller_s1_agent_rdata_fifo_out_ready                                      : std_logic;                      -- avalon_st_adapter:in_0_ready -> external_sdram_controller_s1_agent_rdata_fifo:out_ready
	signal avalon_st_adapter_out_0_valid                                                                : std_logic;                      -- avalon_st_adapter:out_0_valid -> external_sdram_controller_s1_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_out_0_data                                                                 : std_logic_vector(17 downto 0);  -- avalon_st_adapter:out_0_data -> external_sdram_controller_s1_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_out_0_ready                                                                : std_logic;                      -- external_sdram_controller_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	signal avalon_st_adapter_out_0_error                                                                : std_logic_vector(0 downto 0);   -- avalon_st_adapter:out_0_error -> external_sdram_controller_s1_agent:rdata_fifo_sink_error
	signal onchip_flash_0_data_agent_rdata_fifo_src_valid                                               : std_logic;                      -- onchip_flash_0_data_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	signal onchip_flash_0_data_agent_rdata_fifo_src_data                                                : std_logic_vector(33 downto 0);  -- onchip_flash_0_data_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	signal onchip_flash_0_data_agent_rdata_fifo_src_ready                                               : std_logic;                      -- avalon_st_adapter_001:in_0_ready -> onchip_flash_0_data_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_001_out_0_valid                                                            : std_logic;                      -- avalon_st_adapter_001:out_0_valid -> onchip_flash_0_data_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_001_out_0_data                                                             : std_logic_vector(33 downto 0);  -- avalon_st_adapter_001:out_0_data -> onchip_flash_0_data_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_001_out_0_ready                                                            : std_logic;                      -- onchip_flash_0_data_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	signal avalon_st_adapter_001_out_0_error                                                            : std_logic_vector(0 downto 0);   -- avalon_st_adapter_001:out_0_error -> onchip_flash_0_data_agent:rdata_fifo_sink_error
	signal nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid                                      : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	signal nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data                                       : std_logic_vector(33 downto 0);  -- nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	signal nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready                                      : std_logic;                      -- avalon_st_adapter_002:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_002_out_0_valid                                                            : std_logic;                      -- avalon_st_adapter_002:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_002_out_0_data                                                             : std_logic_vector(33 downto 0);  -- avalon_st_adapter_002:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_002_out_0_ready                                                            : std_logic;                      -- nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	signal avalon_st_adapter_002_out_0_error                                                            : std_logic_vector(0 downto 0);   -- avalon_st_adapter_002:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	signal altpll_0_pll_slave_agent_rdata_fifo_out_valid                                                : std_logic;                      -- altpll_0_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	signal altpll_0_pll_slave_agent_rdata_fifo_out_data                                                 : std_logic_vector(33 downto 0);  -- altpll_0_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	signal altpll_0_pll_slave_agent_rdata_fifo_out_ready                                                : std_logic;                      -- avalon_st_adapter_003:in_0_ready -> altpll_0_pll_slave_agent_rdata_fifo:out_ready
	signal avalon_st_adapter_003_out_0_valid                                                            : std_logic;                      -- avalon_st_adapter_003:out_0_valid -> altpll_0_pll_slave_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_003_out_0_data                                                             : std_logic_vector(33 downto 0);  -- avalon_st_adapter_003:out_0_data -> altpll_0_pll_slave_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_003_out_0_ready                                                            : std_logic;                      -- altpll_0_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	signal avalon_st_adapter_003_out_0_error                                                            : std_logic_vector(0 downto 0);   -- avalon_st_adapter_003:out_0_error -> altpll_0_pll_slave_agent:rdata_fifo_sink_error
	signal onchip_memory2_0_s1_agent_rdata_fifo_src_valid                                               : std_logic;                      -- onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	signal onchip_memory2_0_s1_agent_rdata_fifo_src_data                                                : std_logic_vector(33 downto 0);  -- onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	signal onchip_memory2_0_s1_agent_rdata_fifo_src_ready                                               : std_logic;                      -- avalon_st_adapter_004:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_004_out_0_valid                                                            : std_logic;                      -- avalon_st_adapter_004:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_004_out_0_data                                                             : std_logic_vector(33 downto 0);  -- avalon_st_adapter_004:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_004_out_0_ready                                                            : std_logic;                      -- onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	signal avalon_st_adapter_004_out_0_error                                                            : std_logic_vector(0 downto 0);   -- avalon_st_adapter_004:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	signal pio_0_s1_agent_rdata_fifo_src_valid                                                          : std_logic;                      -- pio_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	signal pio_0_s1_agent_rdata_fifo_src_data                                                           : std_logic_vector(33 downto 0);  -- pio_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	signal pio_0_s1_agent_rdata_fifo_src_ready                                                          : std_logic;                      -- avalon_st_adapter_005:in_0_ready -> pio_0_s1_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_005_out_0_valid                                                            : std_logic;                      -- avalon_st_adapter_005:out_0_valid -> pio_0_s1_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_005_out_0_data                                                             : std_logic_vector(33 downto 0);  -- avalon_st_adapter_005:out_0_data -> pio_0_s1_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_005_out_0_ready                                                            : std_logic;                      -- pio_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	signal avalon_st_adapter_005_out_0_error                                                            : std_logic_vector(0 downto 0);   -- avalon_st_adapter_005:out_0_error -> pio_0_s1_agent:rdata_fifo_sink_error
	signal sd_card_spi_spi_control_port_agent_rdata_fifo_src_valid                                      : std_logic;                      -- sd_card_spi_spi_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	signal sd_card_spi_spi_control_port_agent_rdata_fifo_src_data                                       : std_logic_vector(33 downto 0);  -- sd_card_spi_spi_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	signal sd_card_spi_spi_control_port_agent_rdata_fifo_src_ready                                      : std_logic;                      -- avalon_st_adapter_006:in_0_ready -> sd_card_spi_spi_control_port_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_006_out_0_valid                                                            : std_logic;                      -- avalon_st_adapter_006:out_0_valid -> sd_card_spi_spi_control_port_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_006_out_0_data                                                             : std_logic_vector(33 downto 0);  -- avalon_st_adapter_006:out_0_data -> sd_card_spi_spi_control_port_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_006_out_0_ready                                                            : std_logic;                      -- sd_card_spi_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	signal avalon_st_adapter_006_out_0_error                                                            : std_logic_vector(0 downto 0);   -- avalon_st_adapter_006:out_0_error -> sd_card_spi_spi_control_port_agent:rdata_fifo_sink_error

begin

	sega_saturn_abus_slave_0_avalon_master_translator : component wasca_mm_interconnect_0_sega_saturn_abus_slave_0_avalon_master_translator
		generic map (
			AV_ADDRESS_W                => 26,
			AV_DATA_W                   => 16,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 2,
			UAV_ADDRESS_W               => 27,
			UAV_BURSTCOUNT_W            => 2,
			USE_READ                    => 1,
			USE_WRITE                   => 1,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 1,
			USE_READDATAVALID           => 1,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 2,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 0,
			AV_REGISTERINCOMINGSIGNALS  => 0
		)
		port map (
			clk                    => altpll_0_c0_clk,                                                                           --                       clk.clk
			reset                  => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,                                --                     reset.reset
			uav_address            => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => sega_saturn_abus_slave_0_avalon_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => sega_saturn_abus_slave_0_avalon_master_waitrequest,                                        --                          .waitrequest
			av_burstcount          => sega_saturn_abus_slave_0_avalon_master_burstcount,                                         --                          .burstcount
			av_read                => sega_saturn_abus_slave_0_avalon_master_read,                                               --                          .read
			av_readdata            => sega_saturn_abus_slave_0_avalon_master_readdata,                                           --                          .readdata
			av_readdatavalid       => sega_saturn_abus_slave_0_avalon_master_readdatavalid,                                      --                          .readdatavalid
			av_write               => sega_saturn_abus_slave_0_avalon_master_write,                                              --                          .write
			av_writedata           => sega_saturn_abus_slave_0_avalon_master_writedata,                                          --                          .writedata
			av_byteenable          => "11",                                                                                      --               (terminated)
			av_beginbursttransfer  => '0',                                                                                       --               (terminated)
			av_begintransfer       => '0',                                                                                       --               (terminated)
			av_chipselect          => '0',                                                                                       --               (terminated)
			av_lock                => '0',                                                                                       --               (terminated)
			av_debugaccess         => '0',                                                                                       --               (terminated)
			uav_clken              => open,                                                                                      --               (terminated)
			av_clken               => '1',                                                                                       --               (terminated)
			uav_response           => "00",                                                                                      --               (terminated)
			av_response            => open,                                                                                      --               (terminated)
			uav_writeresponsevalid => '0',                                                                                       --               (terminated)
			av_writeresponsevalid  => open                                                                                       --               (terminated)
		);

	nios2_gen2_0_data_master_translator : component wasca_mm_interconnect_0_nios2_gen2_0_data_master_translator
		generic map (
			AV_ADDRESS_W                => 27,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 27,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 1,
			USE_WRITE                   => 1,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 0,
			USE_READDATAVALID           => 0,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 0,
			AV_REGISTERINCOMINGSIGNALS  => 1
		)
		port map (
			clk                    => altpll_0_c0_clk,                                                             --                       clk.clk
			reset                  => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,                  --                     reset.reset
			uav_address            => nios2_gen2_0_data_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => nios2_gen2_0_data_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => nios2_gen2_0_data_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => nios2_gen2_0_data_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => nios2_gen2_0_data_master_waitrequest,                                        --                          .waitrequest
			av_byteenable          => nios2_gen2_0_data_master_byteenable,                                         --                          .byteenable
			av_read                => nios2_gen2_0_data_master_read,                                               --                          .read
			av_readdata            => nios2_gen2_0_data_master_readdata,                                           --                          .readdata
			av_write               => nios2_gen2_0_data_master_write,                                              --                          .write
			av_writedata           => nios2_gen2_0_data_master_writedata,                                          --                          .writedata
			av_debugaccess         => nios2_gen2_0_data_master_debugaccess,                                        --                          .debugaccess
			av_burstcount          => "1",                                                                         --               (terminated)
			av_beginbursttransfer  => '0',                                                                         --               (terminated)
			av_begintransfer       => '0',                                                                         --               (terminated)
			av_chipselect          => '0',                                                                         --               (terminated)
			av_readdatavalid       => open,                                                                        --               (terminated)
			av_lock                => '0',                                                                         --               (terminated)
			uav_clken              => open,                                                                        --               (terminated)
			av_clken               => '1',                                                                         --               (terminated)
			uav_response           => "00",                                                                        --               (terminated)
			av_response            => open,                                                                        --               (terminated)
			uav_writeresponsevalid => '0',                                                                         --               (terminated)
			av_writeresponsevalid  => open                                                                         --               (terminated)
		);

	nios2_gen2_0_instruction_master_translator : component wasca_mm_interconnect_0_nios2_gen2_0_instruction_master_translator
		generic map (
			AV_ADDRESS_W                => 18,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 27,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 1,
			USE_WRITE                   => 0,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 0,
			USE_READDATAVALID           => 0,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 1,
			AV_REGISTERINCOMINGSIGNALS  => 0
		)
		port map (
			clk                    => altpll_0_c0_clk,                                                                    --                       clk.clk
			reset                  => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,                         --                     reset.reset
			uav_address            => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => nios2_gen2_0_instruction_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => nios2_gen2_0_instruction_master_waitrequest,                                        --                          .waitrequest
			av_read                => nios2_gen2_0_instruction_master_read,                                               --                          .read
			av_readdata            => nios2_gen2_0_instruction_master_readdata,                                           --                          .readdata
			av_burstcount          => "1",                                                                                --               (terminated)
			av_byteenable          => "1111",                                                                             --               (terminated)
			av_beginbursttransfer  => '0',                                                                                --               (terminated)
			av_begintransfer       => '0',                                                                                --               (terminated)
			av_chipselect          => '0',                                                                                --               (terminated)
			av_readdatavalid       => open,                                                                               --               (terminated)
			av_write               => '0',                                                                                --               (terminated)
			av_writedata           => "00000000000000000000000000000000",                                                 --               (terminated)
			av_lock                => '0',                                                                                --               (terminated)
			av_debugaccess         => '0',                                                                                --               (terminated)
			uav_clken              => open,                                                                               --               (terminated)
			av_clken               => '1',                                                                                --               (terminated)
			uav_response           => "00",                                                                               --               (terminated)
			av_response            => open,                                                                               --               (terminated)
			uav_writeresponsevalid => '0',                                                                                --               (terminated)
			av_writeresponsevalid  => open                                                                                --               (terminated)
		);

	external_sdram_controller_s1_translator : component wasca_mm_interconnect_0_external_sdram_controller_s1_translator
		generic map (
			AV_ADDRESS_W                   => 25,
			AV_DATA_W                      => 16,
			UAV_DATA_W                     => 16,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 2,
			UAV_BYTEENABLE_W               => 2,
			UAV_ADDRESS_W                  => 27,
			UAV_BURSTCOUNT_W               => 2,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 1,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 2,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => altpll_0_c0_clk,                                            --                      clk.clk
			reset                  => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => external_sdram_controller_s1_agent_m0_address,              -- avalon_universal_slave_0.address
			uav_burstcount         => external_sdram_controller_s1_agent_m0_burstcount,           --                         .burstcount
			uav_read               => external_sdram_controller_s1_agent_m0_read,                 --                         .read
			uav_write              => external_sdram_controller_s1_agent_m0_write,                --                         .write
			uav_waitrequest        => external_sdram_controller_s1_agent_m0_waitrequest,          --                         .waitrequest
			uav_readdatavalid      => external_sdram_controller_s1_agent_m0_readdatavalid,        --                         .readdatavalid
			uav_byteenable         => external_sdram_controller_s1_agent_m0_byteenable,           --                         .byteenable
			uav_readdata           => external_sdram_controller_s1_agent_m0_readdata,             --                         .readdata
			uav_writedata          => external_sdram_controller_s1_agent_m0_writedata,            --                         .writedata
			uav_lock               => external_sdram_controller_s1_agent_m0_lock,                 --                         .lock
			uav_debugaccess        => external_sdram_controller_s1_agent_m0_debugaccess,          --                         .debugaccess
			av_address             => external_sdram_controller_s1_address,                       --      avalon_anti_slave_0.address
			av_write               => external_sdram_controller_s1_write,                         --                         .write
			av_read                => external_sdram_controller_s1_read,                          --                         .read
			av_readdata            => external_sdram_controller_s1_readdata,                      --                         .readdata
			av_writedata           => external_sdram_controller_s1_writedata,                     --                         .writedata
			av_byteenable          => external_sdram_controller_s1_byteenable,                    --                         .byteenable
			av_readdatavalid       => external_sdram_controller_s1_readdatavalid,                 --                         .readdatavalid
			av_waitrequest         => external_sdram_controller_s1_waitrequest,                   --                         .waitrequest
			av_chipselect          => external_sdram_controller_s1_chipselect,                    --                         .chipselect
			av_begintransfer       => open,                                                       --              (terminated)
			av_beginbursttransfer  => open,                                                       --              (terminated)
			av_burstcount          => open,                                                       --              (terminated)
			av_writebyteenable     => open,                                                       --              (terminated)
			av_lock                => open,                                                       --              (terminated)
			av_clken               => open,                                                       --              (terminated)
			uav_clken              => '0',                                                        --              (terminated)
			av_debugaccess         => open,                                                       --              (terminated)
			av_outputenable        => open,                                                       --              (terminated)
			uav_response           => open,                                                       --              (terminated)
			av_response            => "00",                                                       --              (terminated)
			uav_writeresponsevalid => open,                                                       --              (terminated)
			av_writeresponsevalid  => '0'                                                         --              (terminated)
		);

	onchip_flash_0_data_translator : component wasca_mm_interconnect_0_onchip_flash_0_data_translator
		generic map (
			AV_ADDRESS_W                   => 15,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 4,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 27,
			UAV_BURSTCOUNT_W               => 6,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 1,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => altpll_0_c0_clk,                                            --                      clk.clk
			reset                  => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => onchip_flash_0_data_agent_m0_address,                       -- avalon_universal_slave_0.address
			uav_burstcount         => onchip_flash_0_data_agent_m0_burstcount,                    --                         .burstcount
			uav_read               => onchip_flash_0_data_agent_m0_read,                          --                         .read
			uav_write              => onchip_flash_0_data_agent_m0_write,                         --                         .write
			uav_waitrequest        => onchip_flash_0_data_agent_m0_waitrequest,                   --                         .waitrequest
			uav_readdatavalid      => onchip_flash_0_data_agent_m0_readdatavalid,                 --                         .readdatavalid
			uav_byteenable         => onchip_flash_0_data_agent_m0_byteenable,                    --                         .byteenable
			uav_readdata           => onchip_flash_0_data_agent_m0_readdata,                      --                         .readdata
			uav_writedata          => onchip_flash_0_data_agent_m0_writedata,                     --                         .writedata
			uav_lock               => onchip_flash_0_data_agent_m0_lock,                          --                         .lock
			uav_debugaccess        => onchip_flash_0_data_agent_m0_debugaccess,                   --                         .debugaccess
			av_address             => onchip_flash_0_data_address,                                --      avalon_anti_slave_0.address
			av_read                => onchip_flash_0_data_read,                                   --                         .read
			av_readdata            => onchip_flash_0_data_readdata,                               --                         .readdata
			av_burstcount          => onchip_flash_0_data_burstcount,                             --                         .burstcount
			av_readdatavalid       => onchip_flash_0_data_readdatavalid,                          --                         .readdatavalid
			av_waitrequest         => onchip_flash_0_data_waitrequest,                            --                         .waitrequest
			av_write               => open,                                                       --              (terminated)
			av_writedata           => open,                                                       --              (terminated)
			av_begintransfer       => open,                                                       --              (terminated)
			av_beginbursttransfer  => open,                                                       --              (terminated)
			av_byteenable          => open,                                                       --              (terminated)
			av_writebyteenable     => open,                                                       --              (terminated)
			av_lock                => open,                                                       --              (terminated)
			av_chipselect          => open,                                                       --              (terminated)
			av_clken               => open,                                                       --              (terminated)
			uav_clken              => '0',                                                        --              (terminated)
			av_debugaccess         => open,                                                       --              (terminated)
			av_outputenable        => open,                                                       --              (terminated)
			uav_response           => open,                                                       --              (terminated)
			av_response            => "00",                                                       --              (terminated)
			uav_writeresponsevalid => open,                                                       --              (terminated)
			av_writeresponsevalid  => '0'                                                         --              (terminated)
		);

	nios2_gen2_0_debug_mem_slave_translator : component wasca_mm_interconnect_0_nios2_gen2_0_debug_mem_slave_translator
		generic map (
			AV_ADDRESS_W                   => 9,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 27,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => altpll_0_c0_clk,                                            --                      clk.clk
			reset                  => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => nios2_gen2_0_debug_mem_slave_agent_m0_address,              -- avalon_universal_slave_0.address
			uav_burstcount         => nios2_gen2_0_debug_mem_slave_agent_m0_burstcount,           --                         .burstcount
			uav_read               => nios2_gen2_0_debug_mem_slave_agent_m0_read,                 --                         .read
			uav_write              => nios2_gen2_0_debug_mem_slave_agent_m0_write,                --                         .write
			uav_waitrequest        => nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest,          --                         .waitrequest
			uav_readdatavalid      => nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid,        --                         .readdatavalid
			uav_byteenable         => nios2_gen2_0_debug_mem_slave_agent_m0_byteenable,           --                         .byteenable
			uav_readdata           => nios2_gen2_0_debug_mem_slave_agent_m0_readdata,             --                         .readdata
			uav_writedata          => nios2_gen2_0_debug_mem_slave_agent_m0_writedata,            --                         .writedata
			uav_lock               => nios2_gen2_0_debug_mem_slave_agent_m0_lock,                 --                         .lock
			uav_debugaccess        => nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess,          --                         .debugaccess
			av_address             => nios2_gen2_0_debug_mem_slave_address,                       --      avalon_anti_slave_0.address
			av_write               => nios2_gen2_0_debug_mem_slave_write,                         --                         .write
			av_read                => nios2_gen2_0_debug_mem_slave_read,                          --                         .read
			av_readdata            => nios2_gen2_0_debug_mem_slave_readdata,                      --                         .readdata
			av_writedata           => nios2_gen2_0_debug_mem_slave_writedata,                     --                         .writedata
			av_byteenable          => nios2_gen2_0_debug_mem_slave_byteenable,                    --                         .byteenable
			av_waitrequest         => nios2_gen2_0_debug_mem_slave_waitrequest,                   --                         .waitrequest
			av_debugaccess         => nios2_gen2_0_debug_mem_slave_debugaccess,                   --                         .debugaccess
			av_begintransfer       => open,                                                       --              (terminated)
			av_beginbursttransfer  => open,                                                       --              (terminated)
			av_burstcount          => open,                                                       --              (terminated)
			av_readdatavalid       => '0',                                                        --              (terminated)
			av_writebyteenable     => open,                                                       --              (terminated)
			av_lock                => open,                                                       --              (terminated)
			av_chipselect          => open,                                                       --              (terminated)
			av_clken               => open,                                                       --              (terminated)
			uav_clken              => '0',                                                        --              (terminated)
			av_outputenable        => open,                                                       --              (terminated)
			uav_response           => open,                                                       --              (terminated)
			av_response            => "00",                                                       --              (terminated)
			uav_writeresponsevalid => open,                                                       --              (terminated)
			av_writeresponsevalid  => '0'                                                         --              (terminated)
		);

	altpll_0_pll_slave_translator : component wasca_mm_interconnect_0_altpll_0_pll_slave_translator
		generic map (
			AV_ADDRESS_W                   => 2,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 27,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_0_clk_clk,                                              --                      clk.clk
			reset                  => altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => altpll_0_pll_slave_agent_m0_address,                        -- avalon_universal_slave_0.address
			uav_burstcount         => altpll_0_pll_slave_agent_m0_burstcount,                     --                         .burstcount
			uav_read               => altpll_0_pll_slave_agent_m0_read,                           --                         .read
			uav_write              => altpll_0_pll_slave_agent_m0_write,                          --                         .write
			uav_waitrequest        => altpll_0_pll_slave_agent_m0_waitrequest,                    --                         .waitrequest
			uav_readdatavalid      => altpll_0_pll_slave_agent_m0_readdatavalid,                  --                         .readdatavalid
			uav_byteenable         => altpll_0_pll_slave_agent_m0_byteenable,                     --                         .byteenable
			uav_readdata           => altpll_0_pll_slave_agent_m0_readdata,                       --                         .readdata
			uav_writedata          => altpll_0_pll_slave_agent_m0_writedata,                      --                         .writedata
			uav_lock               => altpll_0_pll_slave_agent_m0_lock,                           --                         .lock
			uav_debugaccess        => altpll_0_pll_slave_agent_m0_debugaccess,                    --                         .debugaccess
			av_address             => altpll_0_pll_slave_address,                                 --      avalon_anti_slave_0.address
			av_write               => altpll_0_pll_slave_write,                                   --                         .write
			av_read                => altpll_0_pll_slave_read,                                    --                         .read
			av_readdata            => altpll_0_pll_slave_readdata,                                --                         .readdata
			av_writedata           => altpll_0_pll_slave_writedata,                               --                         .writedata
			av_begintransfer       => open,                                                       --              (terminated)
			av_beginbursttransfer  => open,                                                       --              (terminated)
			av_burstcount          => open,                                                       --              (terminated)
			av_byteenable          => open,                                                       --              (terminated)
			av_readdatavalid       => '0',                                                        --              (terminated)
			av_waitrequest         => '0',                                                        --              (terminated)
			av_writebyteenable     => open,                                                       --              (terminated)
			av_lock                => open,                                                       --              (terminated)
			av_chipselect          => open,                                                       --              (terminated)
			av_clken               => open,                                                       --              (terminated)
			uav_clken              => '0',                                                        --              (terminated)
			av_debugaccess         => open,                                                       --              (terminated)
			av_outputenable        => open,                                                       --              (terminated)
			uav_response           => open,                                                       --              (terminated)
			av_response            => "00",                                                       --              (terminated)
			uav_writeresponsevalid => open,                                                       --              (terminated)
			av_writeresponsevalid  => '0'                                                         --              (terminated)
		);

	onchip_memory2_0_s1_translator : component wasca_mm_interconnect_0_onchip_memory2_0_s1_translator
		generic map (
			AV_ADDRESS_W                   => 10,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 27,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 1,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => altpll_0_c0_clk,                                            --                      clk.clk
			reset                  => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => onchip_memory2_0_s1_agent_m0_address,                       -- avalon_universal_slave_0.address
			uav_burstcount         => onchip_memory2_0_s1_agent_m0_burstcount,                    --                         .burstcount
			uav_read               => onchip_memory2_0_s1_agent_m0_read,                          --                         .read
			uav_write              => onchip_memory2_0_s1_agent_m0_write,                         --                         .write
			uav_waitrequest        => onchip_memory2_0_s1_agent_m0_waitrequest,                   --                         .waitrequest
			uav_readdatavalid      => onchip_memory2_0_s1_agent_m0_readdatavalid,                 --                         .readdatavalid
			uav_byteenable         => onchip_memory2_0_s1_agent_m0_byteenable,                    --                         .byteenable
			uav_readdata           => onchip_memory2_0_s1_agent_m0_readdata,                      --                         .readdata
			uav_writedata          => onchip_memory2_0_s1_agent_m0_writedata,                     --                         .writedata
			uav_lock               => onchip_memory2_0_s1_agent_m0_lock,                          --                         .lock
			uav_debugaccess        => onchip_memory2_0_s1_agent_m0_debugaccess,                   --                         .debugaccess
			av_address             => onchip_memory2_0_s1_address,                                --      avalon_anti_slave_0.address
			av_write               => onchip_memory2_0_s1_write,                                  --                         .write
			av_readdata            => onchip_memory2_0_s1_readdata,                               --                         .readdata
			av_writedata           => onchip_memory2_0_s1_writedata,                              --                         .writedata
			av_byteenable          => onchip_memory2_0_s1_byteenable,                             --                         .byteenable
			av_chipselect          => onchip_memory2_0_s1_chipselect,                             --                         .chipselect
			av_clken               => onchip_memory2_0_s1_clken,                                  --                         .clken
			av_read                => open,                                                       --              (terminated)
			av_begintransfer       => open,                                                       --              (terminated)
			av_beginbursttransfer  => open,                                                       --              (terminated)
			av_burstcount          => open,                                                       --              (terminated)
			av_readdatavalid       => '0',                                                        --              (terminated)
			av_waitrequest         => '0',                                                        --              (terminated)
			av_writebyteenable     => open,                                                       --              (terminated)
			av_lock                => open,                                                       --              (terminated)
			uav_clken              => '0',                                                        --              (terminated)
			av_debugaccess         => open,                                                       --              (terminated)
			av_outputenable        => open,                                                       --              (terminated)
			uav_response           => open,                                                       --              (terminated)
			av_response            => "00",                                                       --              (terminated)
			uav_writeresponsevalid => open,                                                       --              (terminated)
			av_writeresponsevalid  => '0'                                                         --              (terminated)
		);

	pio_0_s1_translator : component wasca_mm_interconnect_0_pio_0_s1_translator
		generic map (
			AV_ADDRESS_W                   => 2,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 27,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => altpll_0_c0_clk,                                            --                      clk.clk
			reset                  => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => pio_0_s1_agent_m0_address,                                  -- avalon_universal_slave_0.address
			uav_burstcount         => pio_0_s1_agent_m0_burstcount,                               --                         .burstcount
			uav_read               => pio_0_s1_agent_m0_read,                                     --                         .read
			uav_write              => pio_0_s1_agent_m0_write,                                    --                         .write
			uav_waitrequest        => pio_0_s1_agent_m0_waitrequest,                              --                         .waitrequest
			uav_readdatavalid      => pio_0_s1_agent_m0_readdatavalid,                            --                         .readdatavalid
			uav_byteenable         => pio_0_s1_agent_m0_byteenable,                               --                         .byteenable
			uav_readdata           => pio_0_s1_agent_m0_readdata,                                 --                         .readdata
			uav_writedata          => pio_0_s1_agent_m0_writedata,                                --                         .writedata
			uav_lock               => pio_0_s1_agent_m0_lock,                                     --                         .lock
			uav_debugaccess        => pio_0_s1_agent_m0_debugaccess,                              --                         .debugaccess
			av_address             => pio_0_s1_address,                                           --      avalon_anti_slave_0.address
			av_write               => pio_0_s1_write,                                             --                         .write
			av_readdata            => pio_0_s1_readdata,                                          --                         .readdata
			av_writedata           => pio_0_s1_writedata,                                         --                         .writedata
			av_chipselect          => pio_0_s1_chipselect,                                        --                         .chipselect
			av_read                => open,                                                       --              (terminated)
			av_begintransfer       => open,                                                       --              (terminated)
			av_beginbursttransfer  => open,                                                       --              (terminated)
			av_burstcount          => open,                                                       --              (terminated)
			av_byteenable          => open,                                                       --              (terminated)
			av_readdatavalid       => '0',                                                        --              (terminated)
			av_waitrequest         => '0',                                                        --              (terminated)
			av_writebyteenable     => open,                                                       --              (terminated)
			av_lock                => open,                                                       --              (terminated)
			av_clken               => open,                                                       --              (terminated)
			uav_clken              => '0',                                                        --              (terminated)
			av_debugaccess         => open,                                                       --              (terminated)
			av_outputenable        => open,                                                       --              (terminated)
			uav_response           => open,                                                       --              (terminated)
			av_response            => "00",                                                       --              (terminated)
			uav_writeresponsevalid => open,                                                       --              (terminated)
			av_writeresponsevalid  => '0'                                                         --              (terminated)
		);

	sd_card_spi_spi_control_port_translator : component wasca_mm_interconnect_0_sd_card_spi_spi_control_port_translator
		generic map (
			AV_ADDRESS_W                   => 3,
			AV_DATA_W                      => 16,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 27,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 1,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => altpll_0_c0_clk,                                            --                      clk.clk
			reset                  => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => sd_card_spi_spi_control_port_agent_m0_address,              -- avalon_universal_slave_0.address
			uav_burstcount         => sd_card_spi_spi_control_port_agent_m0_burstcount,           --                         .burstcount
			uav_read               => sd_card_spi_spi_control_port_agent_m0_read,                 --                         .read
			uav_write              => sd_card_spi_spi_control_port_agent_m0_write,                --                         .write
			uav_waitrequest        => sd_card_spi_spi_control_port_agent_m0_waitrequest,          --                         .waitrequest
			uav_readdatavalid      => sd_card_spi_spi_control_port_agent_m0_readdatavalid,        --                         .readdatavalid
			uav_byteenable         => sd_card_spi_spi_control_port_agent_m0_byteenable,           --                         .byteenable
			uav_readdata           => sd_card_spi_spi_control_port_agent_m0_readdata,             --                         .readdata
			uav_writedata          => sd_card_spi_spi_control_port_agent_m0_writedata,            --                         .writedata
			uav_lock               => sd_card_spi_spi_control_port_agent_m0_lock,                 --                         .lock
			uav_debugaccess        => sd_card_spi_spi_control_port_agent_m0_debugaccess,          --                         .debugaccess
			av_address             => sd_card_spi_spi_control_port_address,                       --      avalon_anti_slave_0.address
			av_write               => sd_card_spi_spi_control_port_write,                         --                         .write
			av_read                => sd_card_spi_spi_control_port_read,                          --                         .read
			av_readdata            => sd_card_spi_spi_control_port_readdata,                      --                         .readdata
			av_writedata           => sd_card_spi_spi_control_port_writedata,                     --                         .writedata
			av_chipselect          => sd_card_spi_spi_control_port_chipselect,                    --                         .chipselect
			av_begintransfer       => open,                                                       --              (terminated)
			av_beginbursttransfer  => open,                                                       --              (terminated)
			av_burstcount          => open,                                                       --              (terminated)
			av_byteenable          => open,                                                       --              (terminated)
			av_readdatavalid       => '0',                                                        --              (terminated)
			av_waitrequest         => '0',                                                        --              (terminated)
			av_writebyteenable     => open,                                                       --              (terminated)
			av_lock                => open,                                                       --              (terminated)
			av_clken               => open,                                                       --              (terminated)
			uav_clken              => '0',                                                        --              (terminated)
			av_debugaccess         => open,                                                       --              (terminated)
			av_outputenable        => open,                                                       --              (terminated)
			uav_response           => open,                                                       --              (terminated)
			av_response            => "00",                                                       --              (terminated)
			uav_writeresponsevalid => open,                                                       --              (terminated)
			av_writeresponsevalid  => '0'                                                         --              (terminated)
		);

	sega_saturn_abus_slave_0_avalon_master_agent : component wasca_mm_interconnect_0_sega_saturn_abus_slave_0_avalon_master_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 87,
			PKT_ORI_BURST_SIZE_L      => 85,
			PKT_RESPONSE_STATUS_H     => 84,
			PKT_RESPONSE_STATUS_L     => 83,
			PKT_QOS_H                 => 68,
			PKT_QOS_L                 => 68,
			PKT_DATA_SIDEBAND_H       => 66,
			PKT_DATA_SIDEBAND_L       => 66,
			PKT_ADDR_SIDEBAND_H       => 65,
			PKT_ADDR_SIDEBAND_L       => 65,
			PKT_BURST_TYPE_H          => 64,
			PKT_BURST_TYPE_L          => 63,
			PKT_CACHE_H               => 82,
			PKT_CACHE_L               => 79,
			PKT_THREAD_ID_H           => 75,
			PKT_THREAD_ID_L           => 75,
			PKT_BURST_SIZE_H          => 62,
			PKT_BURST_SIZE_L          => 60,
			PKT_TRANS_EXCLUSIVE       => 50,
			PKT_TRANS_LOCK            => 49,
			PKT_BEGIN_BURST           => 67,
			PKT_PROTECTION_H          => 78,
			PKT_PROTECTION_L          => 76,
			PKT_BURSTWRAP_H           => 59,
			PKT_BURSTWRAP_L           => 57,
			PKT_BYTE_CNT_H            => 56,
			PKT_BYTE_CNT_L            => 51,
			PKT_ADDR_H                => 44,
			PKT_ADDR_L                => 18,
			PKT_TRANS_COMPRESSED_READ => 45,
			PKT_TRANS_POSTED          => 46,
			PKT_TRANS_WRITE           => 47,
			PKT_TRANS_READ            => 48,
			PKT_DATA_H                => 15,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 17,
			PKT_BYTEEN_L              => 16,
			PKT_SRC_ID_H              => 71,
			PKT_SRC_ID_L              => 69,
			PKT_DEST_ID_H             => 74,
			PKT_DEST_ID_L             => 72,
			ST_DATA_W                 => 88,
			ST_CHANNEL_W              => 7,
			AV_BURSTCOUNT_W           => 2,
			SUPPRESS_0_BYTEEN_RSP     => 1,
			ID                        => 2,
			BURSTWRAP_VALUE           => 7,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                   => altpll_0_c0_clk,                                                                           --       clk.clk
			reset                 => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,                                -- clk_reset.reset
			av_address            => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_address,       --        av.address
			av_write              => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_write,         --          .write
			av_read               => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_read,          --          .read
			av_writedata          => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata           => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest        => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid      => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable         => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount         => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess        => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock               => sega_saturn_abus_slave_0_avalon_master_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid              => sega_saturn_abus_slave_0_avalon_master_agent_cp_valid,                                     --        cp.valid
			cp_data               => sega_saturn_abus_slave_0_avalon_master_agent_cp_data,                                      --          .data
			cp_startofpacket      => sega_saturn_abus_slave_0_avalon_master_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket        => sega_saturn_abus_slave_0_avalon_master_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready              => sega_saturn_abus_slave_0_avalon_master_agent_cp_ready,                                     --          .ready
			rp_valid              => rsp_mux_src_valid,                                                                         --        rp.valid
			rp_data               => rsp_mux_src_data,                                                                          --          .data
			rp_channel            => rsp_mux_src_channel,                                                                       --          .channel
			rp_startofpacket      => rsp_mux_src_startofpacket,                                                                 --          .startofpacket
			rp_endofpacket        => rsp_mux_src_endofpacket,                                                                   --          .endofpacket
			rp_ready              => rsp_mux_src_ready,                                                                         --          .ready
			av_response           => open,                                                                                      -- (terminated)
			av_writeresponsevalid => open                                                                                       -- (terminated)
		);

	nios2_gen2_0_data_master_agent : component wasca_mm_interconnect_0_nios2_gen2_0_data_master_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 105,
			PKT_ORI_BURST_SIZE_L      => 103,
			PKT_RESPONSE_STATUS_H     => 102,
			PKT_RESPONSE_STATUS_L     => 101,
			PKT_QOS_H                 => 86,
			PKT_QOS_L                 => 86,
			PKT_DATA_SIDEBAND_H       => 84,
			PKT_DATA_SIDEBAND_L       => 84,
			PKT_ADDR_SIDEBAND_H       => 83,
			PKT_ADDR_SIDEBAND_L       => 83,
			PKT_BURST_TYPE_H          => 82,
			PKT_BURST_TYPE_L          => 81,
			PKT_CACHE_H               => 100,
			PKT_CACHE_L               => 97,
			PKT_THREAD_ID_H           => 93,
			PKT_THREAD_ID_L           => 93,
			PKT_BURST_SIZE_H          => 80,
			PKT_BURST_SIZE_L          => 78,
			PKT_TRANS_EXCLUSIVE       => 68,
			PKT_TRANS_LOCK            => 67,
			PKT_BEGIN_BURST           => 85,
			PKT_PROTECTION_H          => 96,
			PKT_PROTECTION_L          => 94,
			PKT_BURSTWRAP_H           => 77,
			PKT_BURSTWRAP_L           => 75,
			PKT_BYTE_CNT_H            => 74,
			PKT_BYTE_CNT_L            => 69,
			PKT_ADDR_H                => 62,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 63,
			PKT_TRANS_POSTED          => 64,
			PKT_TRANS_WRITE           => 65,
			PKT_TRANS_READ            => 66,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 89,
			PKT_SRC_ID_L              => 87,
			PKT_DEST_ID_H             => 92,
			PKT_DEST_ID_L             => 90,
			ST_DATA_W                 => 106,
			ST_CHANNEL_W              => 7,
			AV_BURSTCOUNT_W           => 3,
			SUPPRESS_0_BYTEEN_RSP     => 0,
			ID                        => 0,
			BURSTWRAP_VALUE           => 7,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                   => altpll_0_c0_clk,                                                             --       clk.clk
			reset                 => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,                  -- clk_reset.reset
			av_address            => nios2_gen2_0_data_master_translator_avalon_universal_master_0_address,       --        av.address
			av_write              => nios2_gen2_0_data_master_translator_avalon_universal_master_0_write,         --          .write
			av_read               => nios2_gen2_0_data_master_translator_avalon_universal_master_0_read,          --          .read
			av_writedata          => nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata           => nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest        => nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid      => nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable         => nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount         => nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess        => nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock               => nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid              => nios2_gen2_0_data_master_agent_cp_valid,                                     --        cp.valid
			cp_data               => nios2_gen2_0_data_master_agent_cp_data,                                      --          .data
			cp_startofpacket      => nios2_gen2_0_data_master_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket        => nios2_gen2_0_data_master_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready              => nios2_gen2_0_data_master_agent_cp_ready,                                     --          .ready
			rp_valid              => rsp_mux_001_src_valid,                                                       --        rp.valid
			rp_data               => rsp_mux_001_src_data,                                                        --          .data
			rp_channel            => rsp_mux_001_src_channel,                                                     --          .channel
			rp_startofpacket      => rsp_mux_001_src_startofpacket,                                               --          .startofpacket
			rp_endofpacket        => rsp_mux_001_src_endofpacket,                                                 --          .endofpacket
			rp_ready              => rsp_mux_001_src_ready,                                                       --          .ready
			av_response           => open,                                                                        -- (terminated)
			av_writeresponsevalid => open                                                                         -- (terminated)
		);

	nios2_gen2_0_instruction_master_agent : component wasca_mm_interconnect_0_nios2_gen2_0_data_master_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 105,
			PKT_ORI_BURST_SIZE_L      => 103,
			PKT_RESPONSE_STATUS_H     => 102,
			PKT_RESPONSE_STATUS_L     => 101,
			PKT_QOS_H                 => 86,
			PKT_QOS_L                 => 86,
			PKT_DATA_SIDEBAND_H       => 84,
			PKT_DATA_SIDEBAND_L       => 84,
			PKT_ADDR_SIDEBAND_H       => 83,
			PKT_ADDR_SIDEBAND_L       => 83,
			PKT_BURST_TYPE_H          => 82,
			PKT_BURST_TYPE_L          => 81,
			PKT_CACHE_H               => 100,
			PKT_CACHE_L               => 97,
			PKT_THREAD_ID_H           => 93,
			PKT_THREAD_ID_L           => 93,
			PKT_BURST_SIZE_H          => 80,
			PKT_BURST_SIZE_L          => 78,
			PKT_TRANS_EXCLUSIVE       => 68,
			PKT_TRANS_LOCK            => 67,
			PKT_BEGIN_BURST           => 85,
			PKT_PROTECTION_H          => 96,
			PKT_PROTECTION_L          => 94,
			PKT_BURSTWRAP_H           => 77,
			PKT_BURSTWRAP_L           => 75,
			PKT_BYTE_CNT_H            => 74,
			PKT_BYTE_CNT_L            => 69,
			PKT_ADDR_H                => 62,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 63,
			PKT_TRANS_POSTED          => 64,
			PKT_TRANS_WRITE           => 65,
			PKT_TRANS_READ            => 66,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 89,
			PKT_SRC_ID_L              => 87,
			PKT_DEST_ID_H             => 92,
			PKT_DEST_ID_L             => 90,
			ST_DATA_W                 => 106,
			ST_CHANNEL_W              => 7,
			AV_BURSTCOUNT_W           => 3,
			SUPPRESS_0_BYTEEN_RSP     => 0,
			ID                        => 1,
			BURSTWRAP_VALUE           => 3,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                   => altpll_0_c0_clk,                                                                    --       clk.clk
			reset                 => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,                         -- clk_reset.reset
			av_address            => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address,       --        av.address
			av_write              => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write,         --          .write
			av_read               => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read,          --          .read
			av_writedata          => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata           => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest        => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid      => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable         => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount         => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess        => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock               => nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid              => nios2_gen2_0_instruction_master_agent_cp_valid,                                     --        cp.valid
			cp_data               => nios2_gen2_0_instruction_master_agent_cp_data,                                      --          .data
			cp_startofpacket      => nios2_gen2_0_instruction_master_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket        => nios2_gen2_0_instruction_master_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready              => nios2_gen2_0_instruction_master_agent_cp_ready,                                     --          .ready
			rp_valid              => rsp_mux_002_src_valid,                                                              --        rp.valid
			rp_data               => rsp_mux_002_src_data,                                                               --          .data
			rp_channel            => rsp_mux_002_src_channel,                                                            --          .channel
			rp_startofpacket      => rsp_mux_002_src_startofpacket,                                                      --          .startofpacket
			rp_endofpacket        => rsp_mux_002_src_endofpacket,                                                        --          .endofpacket
			rp_ready              => rsp_mux_002_src_ready,                                                              --          .ready
			av_response           => open,                                                                               -- (terminated)
			av_writeresponsevalid => open                                                                                -- (terminated)
		);

	external_sdram_controller_s1_agent : component wasca_mm_interconnect_0_external_sdram_controller_s1_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 87,
			PKT_ORI_BURST_SIZE_L      => 85,
			PKT_RESPONSE_STATUS_H     => 84,
			PKT_RESPONSE_STATUS_L     => 83,
			PKT_BURST_SIZE_H          => 62,
			PKT_BURST_SIZE_L          => 60,
			PKT_TRANS_LOCK            => 49,
			PKT_BEGIN_BURST           => 67,
			PKT_PROTECTION_H          => 78,
			PKT_PROTECTION_L          => 76,
			PKT_BURSTWRAP_H           => 59,
			PKT_BURSTWRAP_L           => 57,
			PKT_BYTE_CNT_H            => 56,
			PKT_BYTE_CNT_L            => 51,
			PKT_ADDR_H                => 44,
			PKT_ADDR_L                => 18,
			PKT_TRANS_COMPRESSED_READ => 45,
			PKT_TRANS_POSTED          => 46,
			PKT_TRANS_WRITE           => 47,
			PKT_TRANS_READ            => 48,
			PKT_DATA_H                => 15,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 17,
			PKT_BYTEEN_L              => 16,
			PKT_SRC_ID_H              => 71,
			PKT_SRC_ID_L              => 69,
			PKT_DEST_ID_H             => 74,
			PKT_DEST_ID_L             => 72,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 7,
			ST_DATA_W                 => 88,
			AVS_BURSTCOUNT_W          => 2,
			SUPPRESS_0_BYTEEN_CMD     => 1,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => altpll_0_c0_clk,                                                  --             clk.clk
			reset                   => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,       --       clk_reset.reset
			m0_address              => external_sdram_controller_s1_agent_m0_address,                    --              m0.address
			m0_burstcount           => external_sdram_controller_s1_agent_m0_burstcount,                 --                .burstcount
			m0_byteenable           => external_sdram_controller_s1_agent_m0_byteenable,                 --                .byteenable
			m0_debugaccess          => external_sdram_controller_s1_agent_m0_debugaccess,                --                .debugaccess
			m0_lock                 => external_sdram_controller_s1_agent_m0_lock,                       --                .lock
			m0_readdata             => external_sdram_controller_s1_agent_m0_readdata,                   --                .readdata
			m0_readdatavalid        => external_sdram_controller_s1_agent_m0_readdatavalid,              --                .readdatavalid
			m0_read                 => external_sdram_controller_s1_agent_m0_read,                       --                .read
			m0_waitrequest          => external_sdram_controller_s1_agent_m0_waitrequest,                --                .waitrequest
			m0_writedata            => external_sdram_controller_s1_agent_m0_writedata,                  --                .writedata
			m0_write                => external_sdram_controller_s1_agent_m0_write,                      --                .write
			rp_endofpacket          => external_sdram_controller_s1_agent_rp_endofpacket,                --              rp.endofpacket
			rp_ready                => external_sdram_controller_s1_agent_rp_ready,                      --                .ready
			rp_valid                => external_sdram_controller_s1_agent_rp_valid,                      --                .valid
			rp_data                 => external_sdram_controller_s1_agent_rp_data,                       --                .data
			rp_startofpacket        => external_sdram_controller_s1_agent_rp_startofpacket,              --                .startofpacket
			cp_ready                => external_sdram_controller_s1_burst_adapter_source0_ready,         --              cp.ready
			cp_valid                => external_sdram_controller_s1_burst_adapter_source0_valid,         --                .valid
			cp_data                 => external_sdram_controller_s1_burst_adapter_source0_data,          --                .data
			cp_startofpacket        => external_sdram_controller_s1_burst_adapter_source0_startofpacket, --                .startofpacket
			cp_endofpacket          => external_sdram_controller_s1_burst_adapter_source0_endofpacket,   --                .endofpacket
			cp_channel              => external_sdram_controller_s1_burst_adapter_source0_channel,       --                .channel
			rf_sink_ready           => external_sdram_controller_s1_agent_rsp_fifo_out_ready,            --         rf_sink.ready
			rf_sink_valid           => external_sdram_controller_s1_agent_rsp_fifo_out_valid,            --                .valid
			rf_sink_startofpacket   => external_sdram_controller_s1_agent_rsp_fifo_out_startofpacket,    --                .startofpacket
			rf_sink_endofpacket     => external_sdram_controller_s1_agent_rsp_fifo_out_endofpacket,      --                .endofpacket
			rf_sink_data            => external_sdram_controller_s1_agent_rsp_fifo_out_data,             --                .data
			rf_source_ready         => external_sdram_controller_s1_agent_rf_source_ready,               --       rf_source.ready
			rf_source_valid         => external_sdram_controller_s1_agent_rf_source_valid,               --                .valid
			rf_source_startofpacket => external_sdram_controller_s1_agent_rf_source_startofpacket,       --                .startofpacket
			rf_source_endofpacket   => external_sdram_controller_s1_agent_rf_source_endofpacket,         --                .endofpacket
			rf_source_data          => external_sdram_controller_s1_agent_rf_source_data,                --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_out_0_ready,                                    -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_out_0_valid,                                    --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_out_0_data,                                     --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_out_0_error(0),                                 --                .error
			rdata_fifo_src_ready    => external_sdram_controller_s1_agent_rdata_fifo_src_ready,          --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => external_sdram_controller_s1_agent_rdata_fifo_src_valid,          --                .valid
			rdata_fifo_src_data     => external_sdram_controller_s1_agent_rdata_fifo_src_data,           --                .data
			m0_response             => "00",                                                             --     (terminated)
			m0_writeresponsevalid   => '0'                                                               --     (terminated)
		);

	external_sdram_controller_s1_agent_rsp_fifo : component wasca_mm_interconnect_0_external_sdram_controller_s1_agent_rsp_fifo
		port map (
			clk               => altpll_0_c0_clk,                                               --       clk.clk
			reset             => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,    -- clk_reset.reset
			in_data           => external_sdram_controller_s1_agent_rf_source_data,             --        in.data
			in_valid          => external_sdram_controller_s1_agent_rf_source_valid,            --          .valid
			in_ready          => external_sdram_controller_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => external_sdram_controller_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => external_sdram_controller_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => external_sdram_controller_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => external_sdram_controller_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => external_sdram_controller_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => external_sdram_controller_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => external_sdram_controller_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	external_sdram_controller_s1_agent_rdata_fifo : component wasca_mm_interconnect_0_external_sdram_controller_s1_agent_rdata_fifo
		port map (
			clk       => altpll_0_c0_clk,                                            --       clk.clk
			reset     => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			in_data   => external_sdram_controller_s1_agent_rdata_fifo_src_data,     --        in.data
			in_valid  => external_sdram_controller_s1_agent_rdata_fifo_src_valid,    --          .valid
			in_ready  => external_sdram_controller_s1_agent_rdata_fifo_src_ready,    --          .ready
			out_data  => external_sdram_controller_s1_agent_rdata_fifo_out_data,     --       out.data
			out_valid => external_sdram_controller_s1_agent_rdata_fifo_out_valid,    --          .valid
			out_ready => external_sdram_controller_s1_agent_rdata_fifo_out_ready     --          .ready
		);

	onchip_flash_0_data_agent : component wasca_mm_interconnect_0_onchip_flash_0_data_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 105,
			PKT_ORI_BURST_SIZE_L      => 103,
			PKT_RESPONSE_STATUS_H     => 102,
			PKT_RESPONSE_STATUS_L     => 101,
			PKT_BURST_SIZE_H          => 80,
			PKT_BURST_SIZE_L          => 78,
			PKT_TRANS_LOCK            => 67,
			PKT_BEGIN_BURST           => 85,
			PKT_PROTECTION_H          => 96,
			PKT_PROTECTION_L          => 94,
			PKT_BURSTWRAP_H           => 77,
			PKT_BURSTWRAP_L           => 75,
			PKT_BYTE_CNT_H            => 74,
			PKT_BYTE_CNT_L            => 69,
			PKT_ADDR_H                => 62,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 63,
			PKT_TRANS_POSTED          => 64,
			PKT_TRANS_WRITE           => 65,
			PKT_TRANS_READ            => 66,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 89,
			PKT_SRC_ID_L              => 87,
			PKT_DEST_ID_H             => 92,
			PKT_DEST_ID_L             => 90,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 7,
			ST_DATA_W                 => 106,
			AVS_BURSTCOUNT_W          => 6,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => altpll_0_c0_clk,                                            --             clk.clk
			reset                   => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, --       clk_reset.reset
			m0_address              => onchip_flash_0_data_agent_m0_address,                       --              m0.address
			m0_burstcount           => onchip_flash_0_data_agent_m0_burstcount,                    --                .burstcount
			m0_byteenable           => onchip_flash_0_data_agent_m0_byteenable,                    --                .byteenable
			m0_debugaccess          => onchip_flash_0_data_agent_m0_debugaccess,                   --                .debugaccess
			m0_lock                 => onchip_flash_0_data_agent_m0_lock,                          --                .lock
			m0_readdata             => onchip_flash_0_data_agent_m0_readdata,                      --                .readdata
			m0_readdatavalid        => onchip_flash_0_data_agent_m0_readdatavalid,                 --                .readdatavalid
			m0_read                 => onchip_flash_0_data_agent_m0_read,                          --                .read
			m0_waitrequest          => onchip_flash_0_data_agent_m0_waitrequest,                   --                .waitrequest
			m0_writedata            => onchip_flash_0_data_agent_m0_writedata,                     --                .writedata
			m0_write                => onchip_flash_0_data_agent_m0_write,                         --                .write
			rp_endofpacket          => onchip_flash_0_data_agent_rp_endofpacket,                   --              rp.endofpacket
			rp_ready                => onchip_flash_0_data_agent_rp_ready,                         --                .ready
			rp_valid                => onchip_flash_0_data_agent_rp_valid,                         --                .valid
			rp_data                 => onchip_flash_0_data_agent_rp_data,                          --                .data
			rp_startofpacket        => onchip_flash_0_data_agent_rp_startofpacket,                 --                .startofpacket
			cp_ready                => cmd_mux_001_src_ready,                                      --              cp.ready
			cp_valid                => cmd_mux_001_src_valid,                                      --                .valid
			cp_data                 => cmd_mux_001_src_data,                                       --                .data
			cp_startofpacket        => cmd_mux_001_src_startofpacket,                              --                .startofpacket
			cp_endofpacket          => cmd_mux_001_src_endofpacket,                                --                .endofpacket
			cp_channel              => cmd_mux_001_src_channel,                                    --                .channel
			rf_sink_ready           => onchip_flash_0_data_agent_rsp_fifo_out_ready,               --         rf_sink.ready
			rf_sink_valid           => onchip_flash_0_data_agent_rsp_fifo_out_valid,               --                .valid
			rf_sink_startofpacket   => onchip_flash_0_data_agent_rsp_fifo_out_startofpacket,       --                .startofpacket
			rf_sink_endofpacket     => onchip_flash_0_data_agent_rsp_fifo_out_endofpacket,         --                .endofpacket
			rf_sink_data            => onchip_flash_0_data_agent_rsp_fifo_out_data,                --                .data
			rf_source_ready         => onchip_flash_0_data_agent_rf_source_ready,                  --       rf_source.ready
			rf_source_valid         => onchip_flash_0_data_agent_rf_source_valid,                  --                .valid
			rf_source_startofpacket => onchip_flash_0_data_agent_rf_source_startofpacket,          --                .startofpacket
			rf_source_endofpacket   => onchip_flash_0_data_agent_rf_source_endofpacket,            --                .endofpacket
			rf_source_data          => onchip_flash_0_data_agent_rf_source_data,                   --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_001_out_0_ready,                          -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_001_out_0_valid,                          --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_001_out_0_data,                           --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_001_out_0_error(0),                       --                .error
			rdata_fifo_src_ready    => onchip_flash_0_data_agent_rdata_fifo_src_ready,             --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => onchip_flash_0_data_agent_rdata_fifo_src_valid,             --                .valid
			rdata_fifo_src_data     => onchip_flash_0_data_agent_rdata_fifo_src_data,              --                .data
			m0_response             => "00",                                                       --     (terminated)
			m0_writeresponsevalid   => '0'                                                         --     (terminated)
		);

	onchip_flash_0_data_agent_rsp_fifo : component wasca_mm_interconnect_0_onchip_flash_0_data_agent_rsp_fifo
		port map (
			clk               => altpll_0_c0_clk,                                            --       clk.clk
			reset             => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			in_data           => onchip_flash_0_data_agent_rf_source_data,                   --        in.data
			in_valid          => onchip_flash_0_data_agent_rf_source_valid,                  --          .valid
			in_ready          => onchip_flash_0_data_agent_rf_source_ready,                  --          .ready
			in_startofpacket  => onchip_flash_0_data_agent_rf_source_startofpacket,          --          .startofpacket
			in_endofpacket    => onchip_flash_0_data_agent_rf_source_endofpacket,            --          .endofpacket
			out_data          => onchip_flash_0_data_agent_rsp_fifo_out_data,                --       out.data
			out_valid         => onchip_flash_0_data_agent_rsp_fifo_out_valid,               --          .valid
			out_ready         => onchip_flash_0_data_agent_rsp_fifo_out_ready,               --          .ready
			out_startofpacket => onchip_flash_0_data_agent_rsp_fifo_out_startofpacket,       --          .startofpacket
			out_endofpacket   => onchip_flash_0_data_agent_rsp_fifo_out_endofpacket          --          .endofpacket
		);

	nios2_gen2_0_debug_mem_slave_agent : component wasca_mm_interconnect_0_nios2_gen2_0_debug_mem_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 105,
			PKT_ORI_BURST_SIZE_L      => 103,
			PKT_RESPONSE_STATUS_H     => 102,
			PKT_RESPONSE_STATUS_L     => 101,
			PKT_BURST_SIZE_H          => 80,
			PKT_BURST_SIZE_L          => 78,
			PKT_TRANS_LOCK            => 67,
			PKT_BEGIN_BURST           => 85,
			PKT_PROTECTION_H          => 96,
			PKT_PROTECTION_L          => 94,
			PKT_BURSTWRAP_H           => 77,
			PKT_BURSTWRAP_L           => 75,
			PKT_BYTE_CNT_H            => 74,
			PKT_BYTE_CNT_L            => 69,
			PKT_ADDR_H                => 62,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 63,
			PKT_TRANS_POSTED          => 64,
			PKT_TRANS_WRITE           => 65,
			PKT_TRANS_READ            => 66,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 89,
			PKT_SRC_ID_L              => 87,
			PKT_DEST_ID_H             => 92,
			PKT_DEST_ID_L             => 90,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 7,
			ST_DATA_W                 => 106,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => altpll_0_c0_clk,                                               --             clk.clk
			reset                   => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,    --       clk_reset.reset
			m0_address              => nios2_gen2_0_debug_mem_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => nios2_gen2_0_debug_mem_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => nios2_gen2_0_debug_mem_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => nios2_gen2_0_debug_mem_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => nios2_gen2_0_debug_mem_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => nios2_gen2_0_debug_mem_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => nios2_gen2_0_debug_mem_slave_agent_m0_writedata,               --                .writedata
			m0_write                => nios2_gen2_0_debug_mem_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => nios2_gen2_0_debug_mem_slave_agent_rp_ready,                   --                .ready
			rp_valid                => nios2_gen2_0_debug_mem_slave_agent_rp_valid,                   --                .valid
			rp_data                 => nios2_gen2_0_debug_mem_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_002_src_ready,                                         --              cp.ready
			cp_valid                => cmd_mux_002_src_valid,                                         --                .valid
			cp_data                 => cmd_mux_002_src_data,                                          --                .data
			cp_startofpacket        => cmd_mux_002_src_startofpacket,                                 --                .startofpacket
			cp_endofpacket          => cmd_mux_002_src_endofpacket,                                   --                .endofpacket
			cp_channel              => cmd_mux_002_src_channel,                                       --                .channel
			rf_sink_ready           => nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => nios2_gen2_0_debug_mem_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => nios2_gen2_0_debug_mem_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => nios2_gen2_0_debug_mem_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_002_out_0_ready,                             -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_002_out_0_valid,                             --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_002_out_0_data,                              --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_002_out_0_error(0),                          --                .error
			rdata_fifo_src_ready    => nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                          --     (terminated)
			m0_writeresponsevalid   => '0'                                                            --     (terminated)
		);

	nios2_gen2_0_debug_mem_slave_agent_rsp_fifo : component wasca_mm_interconnect_0_onchip_flash_0_data_agent_rsp_fifo
		port map (
			clk               => altpll_0_c0_clk,                                               --       clk.clk
			reset             => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,    -- clk_reset.reset
			in_data           => nios2_gen2_0_debug_mem_slave_agent_rf_source_data,             --        in.data
			in_valid          => nios2_gen2_0_debug_mem_slave_agent_rf_source_valid,            --          .valid
			in_ready          => nios2_gen2_0_debug_mem_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	altpll_0_pll_slave_agent : component wasca_mm_interconnect_0_nios2_gen2_0_debug_mem_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 105,
			PKT_ORI_BURST_SIZE_L      => 103,
			PKT_RESPONSE_STATUS_H     => 102,
			PKT_RESPONSE_STATUS_L     => 101,
			PKT_BURST_SIZE_H          => 80,
			PKT_BURST_SIZE_L          => 78,
			PKT_TRANS_LOCK            => 67,
			PKT_BEGIN_BURST           => 85,
			PKT_PROTECTION_H          => 96,
			PKT_PROTECTION_L          => 94,
			PKT_BURSTWRAP_H           => 77,
			PKT_BURSTWRAP_L           => 75,
			PKT_BYTE_CNT_H            => 74,
			PKT_BYTE_CNT_L            => 69,
			PKT_ADDR_H                => 62,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 63,
			PKT_TRANS_POSTED          => 64,
			PKT_TRANS_WRITE           => 65,
			PKT_TRANS_READ            => 66,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 89,
			PKT_SRC_ID_L              => 87,
			PKT_DEST_ID_H             => 92,
			PKT_DEST_ID_L             => 90,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 7,
			ST_DATA_W                 => 106,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => clk_0_clk_clk,                                              --             clk.clk
			reset                   => altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, --       clk_reset.reset
			m0_address              => altpll_0_pll_slave_agent_m0_address,                        --              m0.address
			m0_burstcount           => altpll_0_pll_slave_agent_m0_burstcount,                     --                .burstcount
			m0_byteenable           => altpll_0_pll_slave_agent_m0_byteenable,                     --                .byteenable
			m0_debugaccess          => altpll_0_pll_slave_agent_m0_debugaccess,                    --                .debugaccess
			m0_lock                 => altpll_0_pll_slave_agent_m0_lock,                           --                .lock
			m0_readdata             => altpll_0_pll_slave_agent_m0_readdata,                       --                .readdata
			m0_readdatavalid        => altpll_0_pll_slave_agent_m0_readdatavalid,                  --                .readdatavalid
			m0_read                 => altpll_0_pll_slave_agent_m0_read,                           --                .read
			m0_waitrequest          => altpll_0_pll_slave_agent_m0_waitrequest,                    --                .waitrequest
			m0_writedata            => altpll_0_pll_slave_agent_m0_writedata,                      --                .writedata
			m0_write                => altpll_0_pll_slave_agent_m0_write,                          --                .write
			rp_endofpacket          => altpll_0_pll_slave_agent_rp_endofpacket,                    --              rp.endofpacket
			rp_ready                => altpll_0_pll_slave_agent_rp_ready,                          --                .ready
			rp_valid                => altpll_0_pll_slave_agent_rp_valid,                          --                .valid
			rp_data                 => altpll_0_pll_slave_agent_rp_data,                           --                .data
			rp_startofpacket        => altpll_0_pll_slave_agent_rp_startofpacket,                  --                .startofpacket
			cp_ready                => cmd_mux_003_src_ready,                                      --              cp.ready
			cp_valid                => cmd_mux_003_src_valid,                                      --                .valid
			cp_data                 => cmd_mux_003_src_data,                                       --                .data
			cp_startofpacket        => cmd_mux_003_src_startofpacket,                              --                .startofpacket
			cp_endofpacket          => cmd_mux_003_src_endofpacket,                                --                .endofpacket
			cp_channel              => cmd_mux_003_src_channel,                                    --                .channel
			rf_sink_ready           => altpll_0_pll_slave_agent_rsp_fifo_out_ready,                --         rf_sink.ready
			rf_sink_valid           => altpll_0_pll_slave_agent_rsp_fifo_out_valid,                --                .valid
			rf_sink_startofpacket   => altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket,        --                .startofpacket
			rf_sink_endofpacket     => altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket,          --                .endofpacket
			rf_sink_data            => altpll_0_pll_slave_agent_rsp_fifo_out_data,                 --                .data
			rf_source_ready         => altpll_0_pll_slave_agent_rf_source_ready,                   --       rf_source.ready
			rf_source_valid         => altpll_0_pll_slave_agent_rf_source_valid,                   --                .valid
			rf_source_startofpacket => altpll_0_pll_slave_agent_rf_source_startofpacket,           --                .startofpacket
			rf_source_endofpacket   => altpll_0_pll_slave_agent_rf_source_endofpacket,             --                .endofpacket
			rf_source_data          => altpll_0_pll_slave_agent_rf_source_data,                    --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_003_out_0_ready,                          -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_003_out_0_valid,                          --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_003_out_0_data,                           --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_003_out_0_error(0),                       --                .error
			rdata_fifo_src_ready    => altpll_0_pll_slave_agent_rdata_fifo_src_ready,              --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => altpll_0_pll_slave_agent_rdata_fifo_src_valid,              --                .valid
			rdata_fifo_src_data     => altpll_0_pll_slave_agent_rdata_fifo_src_data,               --                .data
			m0_response             => "00",                                                       --     (terminated)
			m0_writeresponsevalid   => '0'                                                         --     (terminated)
		);

	altpll_0_pll_slave_agent_rsp_fifo : component wasca_mm_interconnect_0_onchip_flash_0_data_agent_rsp_fifo
		port map (
			clk               => clk_0_clk_clk,                                              --       clk.clk
			reset             => altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			in_data           => altpll_0_pll_slave_agent_rf_source_data,                    --        in.data
			in_valid          => altpll_0_pll_slave_agent_rf_source_valid,                   --          .valid
			in_ready          => altpll_0_pll_slave_agent_rf_source_ready,                   --          .ready
			in_startofpacket  => altpll_0_pll_slave_agent_rf_source_startofpacket,           --          .startofpacket
			in_endofpacket    => altpll_0_pll_slave_agent_rf_source_endofpacket,             --          .endofpacket
			out_data          => altpll_0_pll_slave_agent_rsp_fifo_out_data,                 --       out.data
			out_valid         => altpll_0_pll_slave_agent_rsp_fifo_out_valid,                --          .valid
			out_ready         => altpll_0_pll_slave_agent_rsp_fifo_out_ready,                --          .ready
			out_startofpacket => altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket,        --          .startofpacket
			out_endofpacket   => altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket           --          .endofpacket
		);

	altpll_0_pll_slave_agent_rdata_fifo : component wasca_mm_interconnect_0_altpll_0_pll_slave_agent_rdata_fifo
		port map (
			clk       => clk_0_clk_clk,                                              --       clk.clk
			reset     => altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			in_data   => altpll_0_pll_slave_agent_rdata_fifo_src_data,               --        in.data
			in_valid  => altpll_0_pll_slave_agent_rdata_fifo_src_valid,              --          .valid
			in_ready  => altpll_0_pll_slave_agent_rdata_fifo_src_ready,              --          .ready
			out_data  => altpll_0_pll_slave_agent_rdata_fifo_out_data,               --       out.data
			out_valid => altpll_0_pll_slave_agent_rdata_fifo_out_valid,              --          .valid
			out_ready => altpll_0_pll_slave_agent_rdata_fifo_out_ready               --          .ready
		);

	onchip_memory2_0_s1_agent : component wasca_mm_interconnect_0_nios2_gen2_0_debug_mem_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 105,
			PKT_ORI_BURST_SIZE_L      => 103,
			PKT_RESPONSE_STATUS_H     => 102,
			PKT_RESPONSE_STATUS_L     => 101,
			PKT_BURST_SIZE_H          => 80,
			PKT_BURST_SIZE_L          => 78,
			PKT_TRANS_LOCK            => 67,
			PKT_BEGIN_BURST           => 85,
			PKT_PROTECTION_H          => 96,
			PKT_PROTECTION_L          => 94,
			PKT_BURSTWRAP_H           => 77,
			PKT_BURSTWRAP_L           => 75,
			PKT_BYTE_CNT_H            => 74,
			PKT_BYTE_CNT_L            => 69,
			PKT_ADDR_H                => 62,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 63,
			PKT_TRANS_POSTED          => 64,
			PKT_TRANS_WRITE           => 65,
			PKT_TRANS_READ            => 66,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 89,
			PKT_SRC_ID_L              => 87,
			PKT_DEST_ID_H             => 92,
			PKT_DEST_ID_L             => 90,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 7,
			ST_DATA_W                 => 106,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => altpll_0_c0_clk,                                            --             clk.clk
			reset                   => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, --       clk_reset.reset
			m0_address              => onchip_memory2_0_s1_agent_m0_address,                       --              m0.address
			m0_burstcount           => onchip_memory2_0_s1_agent_m0_burstcount,                    --                .burstcount
			m0_byteenable           => onchip_memory2_0_s1_agent_m0_byteenable,                    --                .byteenable
			m0_debugaccess          => onchip_memory2_0_s1_agent_m0_debugaccess,                   --                .debugaccess
			m0_lock                 => onchip_memory2_0_s1_agent_m0_lock,                          --                .lock
			m0_readdata             => onchip_memory2_0_s1_agent_m0_readdata,                      --                .readdata
			m0_readdatavalid        => onchip_memory2_0_s1_agent_m0_readdatavalid,                 --                .readdatavalid
			m0_read                 => onchip_memory2_0_s1_agent_m0_read,                          --                .read
			m0_waitrequest          => onchip_memory2_0_s1_agent_m0_waitrequest,                   --                .waitrequest
			m0_writedata            => onchip_memory2_0_s1_agent_m0_writedata,                     --                .writedata
			m0_write                => onchip_memory2_0_s1_agent_m0_write,                         --                .write
			rp_endofpacket          => onchip_memory2_0_s1_agent_rp_endofpacket,                   --              rp.endofpacket
			rp_ready                => onchip_memory2_0_s1_agent_rp_ready,                         --                .ready
			rp_valid                => onchip_memory2_0_s1_agent_rp_valid,                         --                .valid
			rp_data                 => onchip_memory2_0_s1_agent_rp_data,                          --                .data
			rp_startofpacket        => onchip_memory2_0_s1_agent_rp_startofpacket,                 --                .startofpacket
			cp_ready                => cmd_mux_004_src_ready,                                      --              cp.ready
			cp_valid                => cmd_mux_004_src_valid,                                      --                .valid
			cp_data                 => cmd_mux_004_src_data,                                       --                .data
			cp_startofpacket        => cmd_mux_004_src_startofpacket,                              --                .startofpacket
			cp_endofpacket          => cmd_mux_004_src_endofpacket,                                --                .endofpacket
			cp_channel              => cmd_mux_004_src_channel,                                    --                .channel
			rf_sink_ready           => onchip_memory2_0_s1_agent_rsp_fifo_out_ready,               --         rf_sink.ready
			rf_sink_valid           => onchip_memory2_0_s1_agent_rsp_fifo_out_valid,               --                .valid
			rf_sink_startofpacket   => onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket,       --                .startofpacket
			rf_sink_endofpacket     => onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket,         --                .endofpacket
			rf_sink_data            => onchip_memory2_0_s1_agent_rsp_fifo_out_data,                --                .data
			rf_source_ready         => onchip_memory2_0_s1_agent_rf_source_ready,                  --       rf_source.ready
			rf_source_valid         => onchip_memory2_0_s1_agent_rf_source_valid,                  --                .valid
			rf_source_startofpacket => onchip_memory2_0_s1_agent_rf_source_startofpacket,          --                .startofpacket
			rf_source_endofpacket   => onchip_memory2_0_s1_agent_rf_source_endofpacket,            --                .endofpacket
			rf_source_data          => onchip_memory2_0_s1_agent_rf_source_data,                   --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_004_out_0_ready,                          -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_004_out_0_valid,                          --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_004_out_0_data,                           --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_004_out_0_error(0),                       --                .error
			rdata_fifo_src_ready    => onchip_memory2_0_s1_agent_rdata_fifo_src_ready,             --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => onchip_memory2_0_s1_agent_rdata_fifo_src_valid,             --                .valid
			rdata_fifo_src_data     => onchip_memory2_0_s1_agent_rdata_fifo_src_data,              --                .data
			m0_response             => "00",                                                       --     (terminated)
			m0_writeresponsevalid   => '0'                                                         --     (terminated)
		);

	onchip_memory2_0_s1_agent_rsp_fifo : component wasca_mm_interconnect_0_onchip_flash_0_data_agent_rsp_fifo
		port map (
			clk               => altpll_0_c0_clk,                                            --       clk.clk
			reset             => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			in_data           => onchip_memory2_0_s1_agent_rf_source_data,                   --        in.data
			in_valid          => onchip_memory2_0_s1_agent_rf_source_valid,                  --          .valid
			in_ready          => onchip_memory2_0_s1_agent_rf_source_ready,                  --          .ready
			in_startofpacket  => onchip_memory2_0_s1_agent_rf_source_startofpacket,          --          .startofpacket
			in_endofpacket    => onchip_memory2_0_s1_agent_rf_source_endofpacket,            --          .endofpacket
			out_data          => onchip_memory2_0_s1_agent_rsp_fifo_out_data,                --       out.data
			out_valid         => onchip_memory2_0_s1_agent_rsp_fifo_out_valid,               --          .valid
			out_ready         => onchip_memory2_0_s1_agent_rsp_fifo_out_ready,               --          .ready
			out_startofpacket => onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket,       --          .startofpacket
			out_endofpacket   => onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket          --          .endofpacket
		);

	pio_0_s1_agent : component wasca_mm_interconnect_0_nios2_gen2_0_debug_mem_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 105,
			PKT_ORI_BURST_SIZE_L      => 103,
			PKT_RESPONSE_STATUS_H     => 102,
			PKT_RESPONSE_STATUS_L     => 101,
			PKT_BURST_SIZE_H          => 80,
			PKT_BURST_SIZE_L          => 78,
			PKT_TRANS_LOCK            => 67,
			PKT_BEGIN_BURST           => 85,
			PKT_PROTECTION_H          => 96,
			PKT_PROTECTION_L          => 94,
			PKT_BURSTWRAP_H           => 77,
			PKT_BURSTWRAP_L           => 75,
			PKT_BYTE_CNT_H            => 74,
			PKT_BYTE_CNT_L            => 69,
			PKT_ADDR_H                => 62,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 63,
			PKT_TRANS_POSTED          => 64,
			PKT_TRANS_WRITE           => 65,
			PKT_TRANS_READ            => 66,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 89,
			PKT_SRC_ID_L              => 87,
			PKT_DEST_ID_H             => 92,
			PKT_DEST_ID_L             => 90,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 7,
			ST_DATA_W                 => 106,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => altpll_0_c0_clk,                                            --             clk.clk
			reset                   => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, --       clk_reset.reset
			m0_address              => pio_0_s1_agent_m0_address,                                  --              m0.address
			m0_burstcount           => pio_0_s1_agent_m0_burstcount,                               --                .burstcount
			m0_byteenable           => pio_0_s1_agent_m0_byteenable,                               --                .byteenable
			m0_debugaccess          => pio_0_s1_agent_m0_debugaccess,                              --                .debugaccess
			m0_lock                 => pio_0_s1_agent_m0_lock,                                     --                .lock
			m0_readdata             => pio_0_s1_agent_m0_readdata,                                 --                .readdata
			m0_readdatavalid        => pio_0_s1_agent_m0_readdatavalid,                            --                .readdatavalid
			m0_read                 => pio_0_s1_agent_m0_read,                                     --                .read
			m0_waitrequest          => pio_0_s1_agent_m0_waitrequest,                              --                .waitrequest
			m0_writedata            => pio_0_s1_agent_m0_writedata,                                --                .writedata
			m0_write                => pio_0_s1_agent_m0_write,                                    --                .write
			rp_endofpacket          => pio_0_s1_agent_rp_endofpacket,                              --              rp.endofpacket
			rp_ready                => pio_0_s1_agent_rp_ready,                                    --                .ready
			rp_valid                => pio_0_s1_agent_rp_valid,                                    --                .valid
			rp_data                 => pio_0_s1_agent_rp_data,                                     --                .data
			rp_startofpacket        => pio_0_s1_agent_rp_startofpacket,                            --                .startofpacket
			cp_ready                => cmd_mux_005_src_ready,                                      --              cp.ready
			cp_valid                => cmd_mux_005_src_valid,                                      --                .valid
			cp_data                 => cmd_mux_005_src_data,                                       --                .data
			cp_startofpacket        => cmd_mux_005_src_startofpacket,                              --                .startofpacket
			cp_endofpacket          => cmd_mux_005_src_endofpacket,                                --                .endofpacket
			cp_channel              => cmd_mux_005_src_channel,                                    --                .channel
			rf_sink_ready           => pio_0_s1_agent_rsp_fifo_out_ready,                          --         rf_sink.ready
			rf_sink_valid           => pio_0_s1_agent_rsp_fifo_out_valid,                          --                .valid
			rf_sink_startofpacket   => pio_0_s1_agent_rsp_fifo_out_startofpacket,                  --                .startofpacket
			rf_sink_endofpacket     => pio_0_s1_agent_rsp_fifo_out_endofpacket,                    --                .endofpacket
			rf_sink_data            => pio_0_s1_agent_rsp_fifo_out_data,                           --                .data
			rf_source_ready         => pio_0_s1_agent_rf_source_ready,                             --       rf_source.ready
			rf_source_valid         => pio_0_s1_agent_rf_source_valid,                             --                .valid
			rf_source_startofpacket => pio_0_s1_agent_rf_source_startofpacket,                     --                .startofpacket
			rf_source_endofpacket   => pio_0_s1_agent_rf_source_endofpacket,                       --                .endofpacket
			rf_source_data          => pio_0_s1_agent_rf_source_data,                              --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_005_out_0_ready,                          -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_005_out_0_valid,                          --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_005_out_0_data,                           --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_005_out_0_error(0),                       --                .error
			rdata_fifo_src_ready    => pio_0_s1_agent_rdata_fifo_src_ready,                        --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => pio_0_s1_agent_rdata_fifo_src_valid,                        --                .valid
			rdata_fifo_src_data     => pio_0_s1_agent_rdata_fifo_src_data,                         --                .data
			m0_response             => "00",                                                       --     (terminated)
			m0_writeresponsevalid   => '0'                                                         --     (terminated)
		);

	pio_0_s1_agent_rsp_fifo : component wasca_mm_interconnect_0_onchip_flash_0_data_agent_rsp_fifo
		port map (
			clk               => altpll_0_c0_clk,                                            --       clk.clk
			reset             => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			in_data           => pio_0_s1_agent_rf_source_data,                              --        in.data
			in_valid          => pio_0_s1_agent_rf_source_valid,                             --          .valid
			in_ready          => pio_0_s1_agent_rf_source_ready,                             --          .ready
			in_startofpacket  => pio_0_s1_agent_rf_source_startofpacket,                     --          .startofpacket
			in_endofpacket    => pio_0_s1_agent_rf_source_endofpacket,                       --          .endofpacket
			out_data          => pio_0_s1_agent_rsp_fifo_out_data,                           --       out.data
			out_valid         => pio_0_s1_agent_rsp_fifo_out_valid,                          --          .valid
			out_ready         => pio_0_s1_agent_rsp_fifo_out_ready,                          --          .ready
			out_startofpacket => pio_0_s1_agent_rsp_fifo_out_startofpacket,                  --          .startofpacket
			out_endofpacket   => pio_0_s1_agent_rsp_fifo_out_endofpacket                     --          .endofpacket
		);

	sd_card_spi_spi_control_port_agent : component wasca_mm_interconnect_0_nios2_gen2_0_debug_mem_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 105,
			PKT_ORI_BURST_SIZE_L      => 103,
			PKT_RESPONSE_STATUS_H     => 102,
			PKT_RESPONSE_STATUS_L     => 101,
			PKT_BURST_SIZE_H          => 80,
			PKT_BURST_SIZE_L          => 78,
			PKT_TRANS_LOCK            => 67,
			PKT_BEGIN_BURST           => 85,
			PKT_PROTECTION_H          => 96,
			PKT_PROTECTION_L          => 94,
			PKT_BURSTWRAP_H           => 77,
			PKT_BURSTWRAP_L           => 75,
			PKT_BYTE_CNT_H            => 74,
			PKT_BYTE_CNT_L            => 69,
			PKT_ADDR_H                => 62,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 63,
			PKT_TRANS_POSTED          => 64,
			PKT_TRANS_WRITE           => 65,
			PKT_TRANS_READ            => 66,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 89,
			PKT_SRC_ID_L              => 87,
			PKT_DEST_ID_H             => 92,
			PKT_DEST_ID_L             => 90,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 7,
			ST_DATA_W                 => 106,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => altpll_0_c0_clk,                                               --             clk.clk
			reset                   => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,    --       clk_reset.reset
			m0_address              => sd_card_spi_spi_control_port_agent_m0_address,                 --              m0.address
			m0_burstcount           => sd_card_spi_spi_control_port_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => sd_card_spi_spi_control_port_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => sd_card_spi_spi_control_port_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => sd_card_spi_spi_control_port_agent_m0_lock,                    --                .lock
			m0_readdata             => sd_card_spi_spi_control_port_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => sd_card_spi_spi_control_port_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => sd_card_spi_spi_control_port_agent_m0_read,                    --                .read
			m0_waitrequest          => sd_card_spi_spi_control_port_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => sd_card_spi_spi_control_port_agent_m0_writedata,               --                .writedata
			m0_write                => sd_card_spi_spi_control_port_agent_m0_write,                   --                .write
			rp_endofpacket          => sd_card_spi_spi_control_port_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => sd_card_spi_spi_control_port_agent_rp_ready,                   --                .ready
			rp_valid                => sd_card_spi_spi_control_port_agent_rp_valid,                   --                .valid
			rp_data                 => sd_card_spi_spi_control_port_agent_rp_data,                    --                .data
			rp_startofpacket        => sd_card_spi_spi_control_port_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_006_src_ready,                                         --              cp.ready
			cp_valid                => cmd_mux_006_src_valid,                                         --                .valid
			cp_data                 => cmd_mux_006_src_data,                                          --                .data
			cp_startofpacket        => cmd_mux_006_src_startofpacket,                                 --                .startofpacket
			cp_endofpacket          => cmd_mux_006_src_endofpacket,                                   --                .endofpacket
			cp_channel              => cmd_mux_006_src_channel,                                       --                .channel
			rf_sink_ready           => sd_card_spi_spi_control_port_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => sd_card_spi_spi_control_port_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => sd_card_spi_spi_control_port_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => sd_card_spi_spi_control_port_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => sd_card_spi_spi_control_port_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => sd_card_spi_spi_control_port_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => sd_card_spi_spi_control_port_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => sd_card_spi_spi_control_port_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => sd_card_spi_spi_control_port_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => sd_card_spi_spi_control_port_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_006_out_0_ready,                             -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_006_out_0_valid,                             --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_006_out_0_data,                              --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_006_out_0_error(0),                          --                .error
			rdata_fifo_src_ready    => sd_card_spi_spi_control_port_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => sd_card_spi_spi_control_port_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => sd_card_spi_spi_control_port_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                          --     (terminated)
			m0_writeresponsevalid   => '0'                                                            --     (terminated)
		);

	sd_card_spi_spi_control_port_agent_rsp_fifo : component wasca_mm_interconnect_0_onchip_flash_0_data_agent_rsp_fifo
		port map (
			clk               => altpll_0_c0_clk,                                               --       clk.clk
			reset             => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,    -- clk_reset.reset
			in_data           => sd_card_spi_spi_control_port_agent_rf_source_data,             --        in.data
			in_valid          => sd_card_spi_spi_control_port_agent_rf_source_valid,            --          .valid
			in_ready          => sd_card_spi_spi_control_port_agent_rf_source_ready,            --          .ready
			in_startofpacket  => sd_card_spi_spi_control_port_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => sd_card_spi_spi_control_port_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => sd_card_spi_spi_control_port_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => sd_card_spi_spi_control_port_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => sd_card_spi_spi_control_port_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => sd_card_spi_spi_control_port_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => sd_card_spi_spi_control_port_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	router : component wasca_mm_interconnect_0_router
		port map (
			sink_ready         => sega_saturn_abus_slave_0_avalon_master_agent_cp_ready,         --      sink.ready
			sink_valid         => sega_saturn_abus_slave_0_avalon_master_agent_cp_valid,         --          .valid
			sink_data          => sega_saturn_abus_slave_0_avalon_master_agent_cp_data,          --          .data
			sink_startofpacket => sega_saturn_abus_slave_0_avalon_master_agent_cp_startofpacket, --          .startofpacket
			sink_endofpacket   => sega_saturn_abus_slave_0_avalon_master_agent_cp_endofpacket,   --          .endofpacket
			clk                => altpll_0_c0_clk,                                               --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,    -- clk_reset.reset
			src_ready          => router_src_ready,                                              --       src.ready
			src_valid          => router_src_valid,                                              --          .valid
			src_data           => router_src_data,                                               --          .data
			src_channel        => router_src_channel,                                            --          .channel
			src_startofpacket  => router_src_startofpacket,                                      --          .startofpacket
			src_endofpacket    => router_src_endofpacket                                         --          .endofpacket
		);

	router_001 : component wasca_mm_interconnect_0_router_001
		port map (
			sink_ready         => nios2_gen2_0_data_master_agent_cp_ready,                    --      sink.ready
			sink_valid         => nios2_gen2_0_data_master_agent_cp_valid,                    --          .valid
			sink_data          => nios2_gen2_0_data_master_agent_cp_data,                     --          .data
			sink_startofpacket => nios2_gen2_0_data_master_agent_cp_startofpacket,            --          .startofpacket
			sink_endofpacket   => nios2_gen2_0_data_master_agent_cp_endofpacket,              --          .endofpacket
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_001_src_ready,                                       --       src.ready
			src_valid          => router_001_src_valid,                                       --          .valid
			src_data           => router_001_src_data,                                        --          .data
			src_channel        => router_001_src_channel,                                     --          .channel
			src_startofpacket  => router_001_src_startofpacket,                               --          .startofpacket
			src_endofpacket    => router_001_src_endofpacket                                  --          .endofpacket
		);

	router_002 : component wasca_mm_interconnect_0_router_002
		port map (
			sink_ready         => nios2_gen2_0_instruction_master_agent_cp_ready,             --      sink.ready
			sink_valid         => nios2_gen2_0_instruction_master_agent_cp_valid,             --          .valid
			sink_data          => nios2_gen2_0_instruction_master_agent_cp_data,              --          .data
			sink_startofpacket => nios2_gen2_0_instruction_master_agent_cp_startofpacket,     --          .startofpacket
			sink_endofpacket   => nios2_gen2_0_instruction_master_agent_cp_endofpacket,       --          .endofpacket
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_002_src_ready,                                       --       src.ready
			src_valid          => router_002_src_valid,                                       --          .valid
			src_data           => router_002_src_data,                                        --          .data
			src_channel        => router_002_src_channel,                                     --          .channel
			src_startofpacket  => router_002_src_startofpacket,                               --          .startofpacket
			src_endofpacket    => router_002_src_endofpacket                                  --          .endofpacket
		);

	router_003 : component wasca_mm_interconnect_0_router_003
		port map (
			sink_ready         => external_sdram_controller_s1_agent_rp_ready,                --      sink.ready
			sink_valid         => external_sdram_controller_s1_agent_rp_valid,                --          .valid
			sink_data          => external_sdram_controller_s1_agent_rp_data,                 --          .data
			sink_startofpacket => external_sdram_controller_s1_agent_rp_startofpacket,        --          .startofpacket
			sink_endofpacket   => external_sdram_controller_s1_agent_rp_endofpacket,          --          .endofpacket
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_003_src_ready,                                       --       src.ready
			src_valid          => router_003_src_valid,                                       --          .valid
			src_data           => router_003_src_data,                                        --          .data
			src_channel        => router_003_src_channel,                                     --          .channel
			src_startofpacket  => router_003_src_startofpacket,                               --          .startofpacket
			src_endofpacket    => router_003_src_endofpacket                                  --          .endofpacket
		);

	router_004 : component wasca_mm_interconnect_0_router_004
		port map (
			sink_ready         => onchip_flash_0_data_agent_rp_ready,                         --      sink.ready
			sink_valid         => onchip_flash_0_data_agent_rp_valid,                         --          .valid
			sink_data          => onchip_flash_0_data_agent_rp_data,                          --          .data
			sink_startofpacket => onchip_flash_0_data_agent_rp_startofpacket,                 --          .startofpacket
			sink_endofpacket   => onchip_flash_0_data_agent_rp_endofpacket,                   --          .endofpacket
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_004_src_ready,                                       --       src.ready
			src_valid          => router_004_src_valid,                                       --          .valid
			src_data           => router_004_src_data,                                        --          .data
			src_channel        => router_004_src_channel,                                     --          .channel
			src_startofpacket  => router_004_src_startofpacket,                               --          .startofpacket
			src_endofpacket    => router_004_src_endofpacket                                  --          .endofpacket
		);

	router_005 : component wasca_mm_interconnect_0_router_004
		port map (
			sink_ready         => nios2_gen2_0_debug_mem_slave_agent_rp_ready,                --      sink.ready
			sink_valid         => nios2_gen2_0_debug_mem_slave_agent_rp_valid,                --          .valid
			sink_data          => nios2_gen2_0_debug_mem_slave_agent_rp_data,                 --          .data
			sink_startofpacket => nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket,        --          .startofpacket
			sink_endofpacket   => nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket,          --          .endofpacket
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_005_src_ready,                                       --       src.ready
			src_valid          => router_005_src_valid,                                       --          .valid
			src_data           => router_005_src_data,                                        --          .data
			src_channel        => router_005_src_channel,                                     --          .channel
			src_startofpacket  => router_005_src_startofpacket,                               --          .startofpacket
			src_endofpacket    => router_005_src_endofpacket                                  --          .endofpacket
		);

	router_006 : component wasca_mm_interconnect_0_router_006
		port map (
			sink_ready         => altpll_0_pll_slave_agent_rp_ready,                          --      sink.ready
			sink_valid         => altpll_0_pll_slave_agent_rp_valid,                          --          .valid
			sink_data          => altpll_0_pll_slave_agent_rp_data,                           --          .data
			sink_startofpacket => altpll_0_pll_slave_agent_rp_startofpacket,                  --          .startofpacket
			sink_endofpacket   => altpll_0_pll_slave_agent_rp_endofpacket,                    --          .endofpacket
			clk                => clk_0_clk_clk,                                              --       clk.clk
			reset              => altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_006_src_ready,                                       --       src.ready
			src_valid          => router_006_src_valid,                                       --          .valid
			src_data           => router_006_src_data,                                        --          .data
			src_channel        => router_006_src_channel,                                     --          .channel
			src_startofpacket  => router_006_src_startofpacket,                               --          .startofpacket
			src_endofpacket    => router_006_src_endofpacket                                  --          .endofpacket
		);

	router_007 : component wasca_mm_interconnect_0_router_006
		port map (
			sink_ready         => onchip_memory2_0_s1_agent_rp_ready,                         --      sink.ready
			sink_valid         => onchip_memory2_0_s1_agent_rp_valid,                         --          .valid
			sink_data          => onchip_memory2_0_s1_agent_rp_data,                          --          .data
			sink_startofpacket => onchip_memory2_0_s1_agent_rp_startofpacket,                 --          .startofpacket
			sink_endofpacket   => onchip_memory2_0_s1_agent_rp_endofpacket,                   --          .endofpacket
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_007_src_ready,                                       --       src.ready
			src_valid          => router_007_src_valid,                                       --          .valid
			src_data           => router_007_src_data,                                        --          .data
			src_channel        => router_007_src_channel,                                     --          .channel
			src_startofpacket  => router_007_src_startofpacket,                               --          .startofpacket
			src_endofpacket    => router_007_src_endofpacket                                  --          .endofpacket
		);

	router_008 : component wasca_mm_interconnect_0_router_006
		port map (
			sink_ready         => pio_0_s1_agent_rp_ready,                                    --      sink.ready
			sink_valid         => pio_0_s1_agent_rp_valid,                                    --          .valid
			sink_data          => pio_0_s1_agent_rp_data,                                     --          .data
			sink_startofpacket => pio_0_s1_agent_rp_startofpacket,                            --          .startofpacket
			sink_endofpacket   => pio_0_s1_agent_rp_endofpacket,                              --          .endofpacket
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_008_src_ready,                                       --       src.ready
			src_valid          => router_008_src_valid,                                       --          .valid
			src_data           => router_008_src_data,                                        --          .data
			src_channel        => router_008_src_channel,                                     --          .channel
			src_startofpacket  => router_008_src_startofpacket,                               --          .startofpacket
			src_endofpacket    => router_008_src_endofpacket                                  --          .endofpacket
		);

	router_009 : component wasca_mm_interconnect_0_router_006
		port map (
			sink_ready         => sd_card_spi_spi_control_port_agent_rp_ready,                --      sink.ready
			sink_valid         => sd_card_spi_spi_control_port_agent_rp_valid,                --          .valid
			sink_data          => sd_card_spi_spi_control_port_agent_rp_data,                 --          .data
			sink_startofpacket => sd_card_spi_spi_control_port_agent_rp_startofpacket,        --          .startofpacket
			sink_endofpacket   => sd_card_spi_spi_control_port_agent_rp_endofpacket,          --          .endofpacket
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_009_src_ready,                                       --       src.ready
			src_valid          => router_009_src_valid,                                       --          .valid
			src_data           => router_009_src_data,                                        --          .data
			src_channel        => router_009_src_channel,                                     --          .channel
			src_startofpacket  => router_009_src_startofpacket,                               --          .startofpacket
			src_endofpacket    => router_009_src_endofpacket                                  --          .endofpacket
		);

	external_sdram_controller_s1_burst_adapter : component altera_merlin_burst_adapter
		generic map (
			PKT_ADDR_H                => 44,
			PKT_ADDR_L                => 18,
			PKT_BEGIN_BURST           => 67,
			PKT_BYTE_CNT_H            => 56,
			PKT_BYTE_CNT_L            => 51,
			PKT_BYTEEN_H              => 17,
			PKT_BYTEEN_L              => 16,
			PKT_BURST_SIZE_H          => 62,
			PKT_BURST_SIZE_L          => 60,
			PKT_BURST_TYPE_H          => 64,
			PKT_BURST_TYPE_L          => 63,
			PKT_BURSTWRAP_H           => 59,
			PKT_BURSTWRAP_L           => 57,
			PKT_TRANS_COMPRESSED_READ => 45,
			PKT_TRANS_WRITE           => 47,
			PKT_TRANS_READ            => 48,
			OUT_NARROW_SIZE           => 0,
			IN_NARROW_SIZE            => 0,
			OUT_FIXED                 => 0,
			OUT_COMPLETE_WRAP         => 0,
			ST_DATA_W                 => 88,
			ST_CHANNEL_W              => 7,
			OUT_BYTE_CNT_H            => 52,
			OUT_BURSTWRAP_H           => 59,
			COMPRESSED_READ_SUPPORT   => 0,
			BYTEENABLE_SYNTHESIS      => 1,
			PIPE_INPUTS               => 0,
			NO_WRAP_SUPPORT           => 0,
			INCOMPLETE_WRAP_SUPPORT   => 0,
			BURSTWRAP_CONST_MASK      => 7,
			BURSTWRAP_CONST_VALUE     => 7,
			ADAPTER_VERSION           => "13.1"
		)
		port map (
			clk                   => altpll_0_c0_clk,                                                  --       cr0.clk
			reset                 => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,       -- cr0_reset.reset
			sink0_valid           => cmd_mux_src_valid,                                                --     sink0.valid
			sink0_data            => cmd_mux_src_data,                                                 --          .data
			sink0_channel         => cmd_mux_src_channel,                                              --          .channel
			sink0_startofpacket   => cmd_mux_src_startofpacket,                                        --          .startofpacket
			sink0_endofpacket     => cmd_mux_src_endofpacket,                                          --          .endofpacket
			sink0_ready           => cmd_mux_src_ready,                                                --          .ready
			source0_valid         => external_sdram_controller_s1_burst_adapter_source0_valid,         --   source0.valid
			source0_data          => external_sdram_controller_s1_burst_adapter_source0_data,          --          .data
			source0_channel       => external_sdram_controller_s1_burst_adapter_source0_channel,       --          .channel
			source0_startofpacket => external_sdram_controller_s1_burst_adapter_source0_startofpacket, --          .startofpacket
			source0_endofpacket   => external_sdram_controller_s1_burst_adapter_source0_endofpacket,   --          .endofpacket
			source0_ready         => external_sdram_controller_s1_burst_adapter_source0_ready          --          .ready
		);

	cmd_demux : component wasca_mm_interconnect_0_cmd_demux
		port map (
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_src_ready,                                           --      sink.ready
			sink_channel       => router_src_channel,                                         --          .channel
			sink_data          => router_src_data,                                            --          .data
			sink_startofpacket => router_src_startofpacket,                                   --          .startofpacket
			sink_endofpacket   => router_src_endofpacket,                                     --          .endofpacket
			sink_valid(0)      => router_src_valid,                                           --          .valid
			src0_ready         => cmd_demux_src0_ready,                                       --      src0.ready
			src0_valid         => cmd_demux_src0_valid,                                       --          .valid
			src0_data          => cmd_demux_src0_data,                                        --          .data
			src0_channel       => cmd_demux_src0_channel,                                     --          .channel
			src0_startofpacket => cmd_demux_src0_startofpacket,                               --          .startofpacket
			src0_endofpacket   => cmd_demux_src0_endofpacket                                  --          .endofpacket
		);

	cmd_demux_001 : component wasca_mm_interconnect_0_cmd_demux_001
		port map (
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_001_src_ready,                                       --      sink.ready
			sink_channel       => router_001_src_channel,                                     --          .channel
			sink_data          => router_001_src_data,                                        --          .data
			sink_startofpacket => router_001_src_startofpacket,                               --          .startofpacket
			sink_endofpacket   => router_001_src_endofpacket,                                 --          .endofpacket
			sink_valid(0)      => router_001_src_valid,                                       --          .valid
			src0_ready         => cmd_demux_001_src0_ready,                                   --      src0.ready
			src0_valid         => cmd_demux_001_src0_valid,                                   --          .valid
			src0_data          => cmd_demux_001_src0_data,                                    --          .data
			src0_channel       => cmd_demux_001_src0_channel,                                 --          .channel
			src0_startofpacket => cmd_demux_001_src0_startofpacket,                           --          .startofpacket
			src0_endofpacket   => cmd_demux_001_src0_endofpacket,                             --          .endofpacket
			src1_ready         => cmd_demux_001_src1_ready,                                   --      src1.ready
			src1_valid         => cmd_demux_001_src1_valid,                                   --          .valid
			src1_data          => cmd_demux_001_src1_data,                                    --          .data
			src1_channel       => cmd_demux_001_src1_channel,                                 --          .channel
			src1_startofpacket => cmd_demux_001_src1_startofpacket,                           --          .startofpacket
			src1_endofpacket   => cmd_demux_001_src1_endofpacket,                             --          .endofpacket
			src2_ready         => cmd_demux_001_src2_ready,                                   --      src2.ready
			src2_valid         => cmd_demux_001_src2_valid,                                   --          .valid
			src2_data          => cmd_demux_001_src2_data,                                    --          .data
			src2_channel       => cmd_demux_001_src2_channel,                                 --          .channel
			src2_startofpacket => cmd_demux_001_src2_startofpacket,                           --          .startofpacket
			src2_endofpacket   => cmd_demux_001_src2_endofpacket,                             --          .endofpacket
			src3_ready         => cmd_demux_001_src3_ready,                                   --      src3.ready
			src3_valid         => cmd_demux_001_src3_valid,                                   --          .valid
			src3_data          => cmd_demux_001_src3_data,                                    --          .data
			src3_channel       => cmd_demux_001_src3_channel,                                 --          .channel
			src3_startofpacket => cmd_demux_001_src3_startofpacket,                           --          .startofpacket
			src3_endofpacket   => cmd_demux_001_src3_endofpacket,                             --          .endofpacket
			src4_ready         => cmd_demux_001_src4_ready,                                   --      src4.ready
			src4_valid         => cmd_demux_001_src4_valid,                                   --          .valid
			src4_data          => cmd_demux_001_src4_data,                                    --          .data
			src4_channel       => cmd_demux_001_src4_channel,                                 --          .channel
			src4_startofpacket => cmd_demux_001_src4_startofpacket,                           --          .startofpacket
			src4_endofpacket   => cmd_demux_001_src4_endofpacket,                             --          .endofpacket
			src5_ready         => cmd_demux_001_src5_ready,                                   --      src5.ready
			src5_valid         => cmd_demux_001_src5_valid,                                   --          .valid
			src5_data          => cmd_demux_001_src5_data,                                    --          .data
			src5_channel       => cmd_demux_001_src5_channel,                                 --          .channel
			src5_startofpacket => cmd_demux_001_src5_startofpacket,                           --          .startofpacket
			src5_endofpacket   => cmd_demux_001_src5_endofpacket,                             --          .endofpacket
			src6_ready         => cmd_demux_001_src6_ready,                                   --      src6.ready
			src6_valid         => cmd_demux_001_src6_valid,                                   --          .valid
			src6_data          => cmd_demux_001_src6_data,                                    --          .data
			src6_channel       => cmd_demux_001_src6_channel,                                 --          .channel
			src6_startofpacket => cmd_demux_001_src6_startofpacket,                           --          .startofpacket
			src6_endofpacket   => cmd_demux_001_src6_endofpacket                              --          .endofpacket
		);

	cmd_demux_002 : component wasca_mm_interconnect_0_cmd_demux_002
		port map (
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_002_src_ready,                                       --      sink.ready
			sink_channel       => router_002_src_channel,                                     --          .channel
			sink_data          => router_002_src_data,                                        --          .data
			sink_startofpacket => router_002_src_startofpacket,                               --          .startofpacket
			sink_endofpacket   => router_002_src_endofpacket,                                 --          .endofpacket
			sink_valid(0)      => router_002_src_valid,                                       --          .valid
			src0_ready         => cmd_demux_002_src0_ready,                                   --      src0.ready
			src0_valid         => cmd_demux_002_src0_valid,                                   --          .valid
			src0_data          => cmd_demux_002_src0_data,                                    --          .data
			src0_channel       => cmd_demux_002_src0_channel,                                 --          .channel
			src0_startofpacket => cmd_demux_002_src0_startofpacket,                           --          .startofpacket
			src0_endofpacket   => cmd_demux_002_src0_endofpacket,                             --          .endofpacket
			src1_ready         => cmd_demux_002_src1_ready,                                   --      src1.ready
			src1_valid         => cmd_demux_002_src1_valid,                                   --          .valid
			src1_data          => cmd_demux_002_src1_data,                                    --          .data
			src1_channel       => cmd_demux_002_src1_channel,                                 --          .channel
			src1_startofpacket => cmd_demux_002_src1_startofpacket,                           --          .startofpacket
			src1_endofpacket   => cmd_demux_002_src1_endofpacket                              --          .endofpacket
		);

	cmd_mux : component wasca_mm_interconnect_0_cmd_mux
		port map (
			clk                 => altpll_0_c0_clk,                                                                              --       clk.clk
			reset               => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,                                   -- clk_reset.reset
			src_ready           => cmd_mux_src_ready,                                                                            --       src.ready
			src_valid           => cmd_mux_src_valid,                                                                            --          .valid
			src_data            => cmd_mux_src_data,                                                                             --          .data
			src_channel         => cmd_mux_src_channel,                                                                          --          .channel
			src_startofpacket   => cmd_mux_src_startofpacket,                                                                    --          .startofpacket
			src_endofpacket     => cmd_mux_src_endofpacket,                                                                      --          .endofpacket
			sink0_ready         => cmd_demux_src0_ready,                                                                         --     sink0.ready
			sink0_valid         => cmd_demux_src0_valid,                                                                         --          .valid
			sink0_channel       => cmd_demux_src0_channel,                                                                       --          .channel
			sink0_data          => cmd_demux_src0_data,                                                                          --          .data
			sink0_startofpacket => cmd_demux_src0_startofpacket,                                                                 --          .startofpacket
			sink0_endofpacket   => cmd_demux_src0_endofpacket,                                                                   --          .endofpacket
			sink1_ready         => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_ready,         --     sink1.ready
			sink1_valid         => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_valid,         --          .valid
			sink1_channel       => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_channel,       --          .channel
			sink1_data          => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_data,          --          .data
			sink1_startofpacket => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_startofpacket, --          .startofpacket
			sink1_endofpacket   => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_endofpacket    --          .endofpacket
		);

	cmd_mux_001 : component wasca_mm_interconnect_0_cmd_mux_001
		port map (
			clk                 => altpll_0_c0_clk,                                            --       clk.clk
			reset               => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_001_src_ready,                                      --       src.ready
			src_valid           => cmd_mux_001_src_valid,                                      --          .valid
			src_data            => cmd_mux_001_src_data,                                       --          .data
			src_channel         => cmd_mux_001_src_channel,                                    --          .channel
			src_startofpacket   => cmd_mux_001_src_startofpacket,                              --          .startofpacket
			src_endofpacket     => cmd_mux_001_src_endofpacket,                                --          .endofpacket
			sink0_ready         => cmd_demux_001_src1_ready,                                   --     sink0.ready
			sink0_valid         => cmd_demux_001_src1_valid,                                   --          .valid
			sink0_channel       => cmd_demux_001_src1_channel,                                 --          .channel
			sink0_data          => cmd_demux_001_src1_data,                                    --          .data
			sink0_startofpacket => cmd_demux_001_src1_startofpacket,                           --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src1_endofpacket,                             --          .endofpacket
			sink1_ready         => cmd_demux_002_src0_ready,                                   --     sink1.ready
			sink1_valid         => cmd_demux_002_src0_valid,                                   --          .valid
			sink1_channel       => cmd_demux_002_src0_channel,                                 --          .channel
			sink1_data          => cmd_demux_002_src0_data,                                    --          .data
			sink1_startofpacket => cmd_demux_002_src0_startofpacket,                           --          .startofpacket
			sink1_endofpacket   => cmd_demux_002_src0_endofpacket                              --          .endofpacket
		);

	cmd_mux_002 : component wasca_mm_interconnect_0_cmd_mux_001
		port map (
			clk                 => altpll_0_c0_clk,                                            --       clk.clk
			reset               => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_002_src_ready,                                      --       src.ready
			src_valid           => cmd_mux_002_src_valid,                                      --          .valid
			src_data            => cmd_mux_002_src_data,                                       --          .data
			src_channel         => cmd_mux_002_src_channel,                                    --          .channel
			src_startofpacket   => cmd_mux_002_src_startofpacket,                              --          .startofpacket
			src_endofpacket     => cmd_mux_002_src_endofpacket,                                --          .endofpacket
			sink0_ready         => cmd_demux_001_src2_ready,                                   --     sink0.ready
			sink0_valid         => cmd_demux_001_src2_valid,                                   --          .valid
			sink0_channel       => cmd_demux_001_src2_channel,                                 --          .channel
			sink0_data          => cmd_demux_001_src2_data,                                    --          .data
			sink0_startofpacket => cmd_demux_001_src2_startofpacket,                           --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src2_endofpacket,                             --          .endofpacket
			sink1_ready         => cmd_demux_002_src1_ready,                                   --     sink1.ready
			sink1_valid         => cmd_demux_002_src1_valid,                                   --          .valid
			sink1_channel       => cmd_demux_002_src1_channel,                                 --          .channel
			sink1_data          => cmd_demux_002_src1_data,                                    --          .data
			sink1_startofpacket => cmd_demux_002_src1_startofpacket,                           --          .startofpacket
			sink1_endofpacket   => cmd_demux_002_src1_endofpacket                              --          .endofpacket
		);

	cmd_mux_003 : component wasca_mm_interconnect_0_cmd_mux_003
		port map (
			clk                 => clk_0_clk_clk,                                              --       clk.clk
			reset               => altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_003_src_ready,                                      --       src.ready
			src_valid           => cmd_mux_003_src_valid,                                      --          .valid
			src_data            => cmd_mux_003_src_data,                                       --          .data
			src_channel         => cmd_mux_003_src_channel,                                    --          .channel
			src_startofpacket   => cmd_mux_003_src_startofpacket,                              --          .startofpacket
			src_endofpacket     => cmd_mux_003_src_endofpacket,                                --          .endofpacket
			sink0_ready         => crosser_out_ready,                                          --     sink0.ready
			sink0_valid         => crosser_out_valid,                                          --          .valid
			sink0_channel       => crosser_out_channel,                                        --          .channel
			sink0_data          => crosser_out_data,                                           --          .data
			sink0_startofpacket => crosser_out_startofpacket,                                  --          .startofpacket
			sink0_endofpacket   => crosser_out_endofpacket                                     --          .endofpacket
		);

	cmd_mux_004 : component wasca_mm_interconnect_0_cmd_mux_003
		port map (
			clk                 => altpll_0_c0_clk,                                            --       clk.clk
			reset               => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_004_src_ready,                                      --       src.ready
			src_valid           => cmd_mux_004_src_valid,                                      --          .valid
			src_data            => cmd_mux_004_src_data,                                       --          .data
			src_channel         => cmd_mux_004_src_channel,                                    --          .channel
			src_startofpacket   => cmd_mux_004_src_startofpacket,                              --          .startofpacket
			src_endofpacket     => cmd_mux_004_src_endofpacket,                                --          .endofpacket
			sink0_ready         => cmd_demux_001_src4_ready,                                   --     sink0.ready
			sink0_valid         => cmd_demux_001_src4_valid,                                   --          .valid
			sink0_channel       => cmd_demux_001_src4_channel,                                 --          .channel
			sink0_data          => cmd_demux_001_src4_data,                                    --          .data
			sink0_startofpacket => cmd_demux_001_src4_startofpacket,                           --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src4_endofpacket                              --          .endofpacket
		);

	cmd_mux_005 : component wasca_mm_interconnect_0_cmd_mux_003
		port map (
			clk                 => altpll_0_c0_clk,                                            --       clk.clk
			reset               => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_005_src_ready,                                      --       src.ready
			src_valid           => cmd_mux_005_src_valid,                                      --          .valid
			src_data            => cmd_mux_005_src_data,                                       --          .data
			src_channel         => cmd_mux_005_src_channel,                                    --          .channel
			src_startofpacket   => cmd_mux_005_src_startofpacket,                              --          .startofpacket
			src_endofpacket     => cmd_mux_005_src_endofpacket,                                --          .endofpacket
			sink0_ready         => cmd_demux_001_src5_ready,                                   --     sink0.ready
			sink0_valid         => cmd_demux_001_src5_valid,                                   --          .valid
			sink0_channel       => cmd_demux_001_src5_channel,                                 --          .channel
			sink0_data          => cmd_demux_001_src5_data,                                    --          .data
			sink0_startofpacket => cmd_demux_001_src5_startofpacket,                           --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src5_endofpacket                              --          .endofpacket
		);

	cmd_mux_006 : component wasca_mm_interconnect_0_cmd_mux_003
		port map (
			clk                 => altpll_0_c0_clk,                                            --       clk.clk
			reset               => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_006_src_ready,                                      --       src.ready
			src_valid           => cmd_mux_006_src_valid,                                      --          .valid
			src_data            => cmd_mux_006_src_data,                                       --          .data
			src_channel         => cmd_mux_006_src_channel,                                    --          .channel
			src_startofpacket   => cmd_mux_006_src_startofpacket,                              --          .startofpacket
			src_endofpacket     => cmd_mux_006_src_endofpacket,                                --          .endofpacket
			sink0_ready         => cmd_demux_001_src6_ready,                                   --     sink0.ready
			sink0_valid         => cmd_demux_001_src6_valid,                                   --          .valid
			sink0_channel       => cmd_demux_001_src6_channel,                                 --          .channel
			sink0_data          => cmd_demux_001_src6_data,                                    --          .data
			sink0_startofpacket => cmd_demux_001_src6_startofpacket,                           --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src6_endofpacket                              --          .endofpacket
		);

	rsp_demux : component wasca_mm_interconnect_0_rsp_demux
		port map (
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_003_src_ready,                                       --      sink.ready
			sink_channel       => router_003_src_channel,                                     --          .channel
			sink_data          => router_003_src_data,                                        --          .data
			sink_startofpacket => router_003_src_startofpacket,                               --          .startofpacket
			sink_endofpacket   => router_003_src_endofpacket,                                 --          .endofpacket
			sink_valid(0)      => router_003_src_valid,                                       --          .valid
			src0_ready         => rsp_demux_src0_ready,                                       --      src0.ready
			src0_valid         => rsp_demux_src0_valid,                                       --          .valid
			src0_data          => rsp_demux_src0_data,                                        --          .data
			src0_channel       => rsp_demux_src0_channel,                                     --          .channel
			src0_startofpacket => rsp_demux_src0_startofpacket,                               --          .startofpacket
			src0_endofpacket   => rsp_demux_src0_endofpacket,                                 --          .endofpacket
			src1_ready         => rsp_demux_src1_ready,                                       --      src1.ready
			src1_valid         => rsp_demux_src1_valid,                                       --          .valid
			src1_data          => rsp_demux_src1_data,                                        --          .data
			src1_channel       => rsp_demux_src1_channel,                                     --          .channel
			src1_startofpacket => rsp_demux_src1_startofpacket,                               --          .startofpacket
			src1_endofpacket   => rsp_demux_src1_endofpacket                                  --          .endofpacket
		);

	rsp_demux_001 : component wasca_mm_interconnect_0_cmd_demux_002
		port map (
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_004_src_ready,                                       --      sink.ready
			sink_channel       => router_004_src_channel,                                     --          .channel
			sink_data          => router_004_src_data,                                        --          .data
			sink_startofpacket => router_004_src_startofpacket,                               --          .startofpacket
			sink_endofpacket   => router_004_src_endofpacket,                                 --          .endofpacket
			sink_valid(0)      => router_004_src_valid,                                       --          .valid
			src0_ready         => rsp_demux_001_src0_ready,                                   --      src0.ready
			src0_valid         => rsp_demux_001_src0_valid,                                   --          .valid
			src0_data          => rsp_demux_001_src0_data,                                    --          .data
			src0_channel       => rsp_demux_001_src0_channel,                                 --          .channel
			src0_startofpacket => rsp_demux_001_src0_startofpacket,                           --          .startofpacket
			src0_endofpacket   => rsp_demux_001_src0_endofpacket,                             --          .endofpacket
			src1_ready         => rsp_demux_001_src1_ready,                                   --      src1.ready
			src1_valid         => rsp_demux_001_src1_valid,                                   --          .valid
			src1_data          => rsp_demux_001_src1_data,                                    --          .data
			src1_channel       => rsp_demux_001_src1_channel,                                 --          .channel
			src1_startofpacket => rsp_demux_001_src1_startofpacket,                           --          .startofpacket
			src1_endofpacket   => rsp_demux_001_src1_endofpacket                              --          .endofpacket
		);

	rsp_demux_002 : component wasca_mm_interconnect_0_cmd_demux_002
		port map (
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_005_src_ready,                                       --      sink.ready
			sink_channel       => router_005_src_channel,                                     --          .channel
			sink_data          => router_005_src_data,                                        --          .data
			sink_startofpacket => router_005_src_startofpacket,                               --          .startofpacket
			sink_endofpacket   => router_005_src_endofpacket,                                 --          .endofpacket
			sink_valid(0)      => router_005_src_valid,                                       --          .valid
			src0_ready         => rsp_demux_002_src0_ready,                                   --      src0.ready
			src0_valid         => rsp_demux_002_src0_valid,                                   --          .valid
			src0_data          => rsp_demux_002_src0_data,                                    --          .data
			src0_channel       => rsp_demux_002_src0_channel,                                 --          .channel
			src0_startofpacket => rsp_demux_002_src0_startofpacket,                           --          .startofpacket
			src0_endofpacket   => rsp_demux_002_src0_endofpacket,                             --          .endofpacket
			src1_ready         => rsp_demux_002_src1_ready,                                   --      src1.ready
			src1_valid         => rsp_demux_002_src1_valid,                                   --          .valid
			src1_data          => rsp_demux_002_src1_data,                                    --          .data
			src1_channel       => rsp_demux_002_src1_channel,                                 --          .channel
			src1_startofpacket => rsp_demux_002_src1_startofpacket,                           --          .startofpacket
			src1_endofpacket   => rsp_demux_002_src1_endofpacket                              --          .endofpacket
		);

	rsp_demux_003 : component wasca_mm_interconnect_0_rsp_demux_003
		port map (
			clk                => clk_0_clk_clk,                                              --       clk.clk
			reset              => altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_006_src_ready,                                       --      sink.ready
			sink_channel       => router_006_src_channel,                                     --          .channel
			sink_data          => router_006_src_data,                                        --          .data
			sink_startofpacket => router_006_src_startofpacket,                               --          .startofpacket
			sink_endofpacket   => router_006_src_endofpacket,                                 --          .endofpacket
			sink_valid(0)      => router_006_src_valid,                                       --          .valid
			src0_ready         => rsp_demux_003_src0_ready,                                   --      src0.ready
			src0_valid         => rsp_demux_003_src0_valid,                                   --          .valid
			src0_data          => rsp_demux_003_src0_data,                                    --          .data
			src0_channel       => rsp_demux_003_src0_channel,                                 --          .channel
			src0_startofpacket => rsp_demux_003_src0_startofpacket,                           --          .startofpacket
			src0_endofpacket   => rsp_demux_003_src0_endofpacket                              --          .endofpacket
		);

	rsp_demux_004 : component wasca_mm_interconnect_0_rsp_demux_004
		port map (
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_007_src_ready,                                       --      sink.ready
			sink_channel       => router_007_src_channel,                                     --          .channel
			sink_data          => router_007_src_data,                                        --          .data
			sink_startofpacket => router_007_src_startofpacket,                               --          .startofpacket
			sink_endofpacket   => router_007_src_endofpacket,                                 --          .endofpacket
			sink_valid(0)      => router_007_src_valid,                                       --          .valid
			src0_ready         => rsp_demux_004_src0_ready,                                   --      src0.ready
			src0_valid         => rsp_demux_004_src0_valid,                                   --          .valid
			src0_data          => rsp_demux_004_src0_data,                                    --          .data
			src0_channel       => rsp_demux_004_src0_channel,                                 --          .channel
			src0_startofpacket => rsp_demux_004_src0_startofpacket,                           --          .startofpacket
			src0_endofpacket   => rsp_demux_004_src0_endofpacket                              --          .endofpacket
		);

	rsp_demux_005 : component wasca_mm_interconnect_0_rsp_demux_004
		port map (
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_008_src_ready,                                       --      sink.ready
			sink_channel       => router_008_src_channel,                                     --          .channel
			sink_data          => router_008_src_data,                                        --          .data
			sink_startofpacket => router_008_src_startofpacket,                               --          .startofpacket
			sink_endofpacket   => router_008_src_endofpacket,                                 --          .endofpacket
			sink_valid(0)      => router_008_src_valid,                                       --          .valid
			src0_ready         => rsp_demux_005_src0_ready,                                   --      src0.ready
			src0_valid         => rsp_demux_005_src0_valid,                                   --          .valid
			src0_data          => rsp_demux_005_src0_data,                                    --          .data
			src0_channel       => rsp_demux_005_src0_channel,                                 --          .channel
			src0_startofpacket => rsp_demux_005_src0_startofpacket,                           --          .startofpacket
			src0_endofpacket   => rsp_demux_005_src0_endofpacket                              --          .endofpacket
		);

	rsp_demux_006 : component wasca_mm_interconnect_0_rsp_demux_004
		port map (
			clk                => altpll_0_c0_clk,                                            --       clk.clk
			reset              => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_009_src_ready,                                       --      sink.ready
			sink_channel       => router_009_src_channel,                                     --          .channel
			sink_data          => router_009_src_data,                                        --          .data
			sink_startofpacket => router_009_src_startofpacket,                               --          .startofpacket
			sink_endofpacket   => router_009_src_endofpacket,                                 --          .endofpacket
			sink_valid(0)      => router_009_src_valid,                                       --          .valid
			src0_ready         => rsp_demux_006_src0_ready,                                   --      src0.ready
			src0_valid         => rsp_demux_006_src0_valid,                                   --          .valid
			src0_data          => rsp_demux_006_src0_data,                                    --          .data
			src0_channel       => rsp_demux_006_src0_channel,                                 --          .channel
			src0_startofpacket => rsp_demux_006_src0_startofpacket,                           --          .startofpacket
			src0_endofpacket   => rsp_demux_006_src0_endofpacket                              --          .endofpacket
		);

	rsp_mux : component wasca_mm_interconnect_0_rsp_mux
		port map (
			clk                 => altpll_0_c0_clk,                                            --       clk.clk
			reset               => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => rsp_mux_src_ready,                                          --       src.ready
			src_valid           => rsp_mux_src_valid,                                          --          .valid
			src_data            => rsp_mux_src_data,                                           --          .data
			src_channel         => rsp_mux_src_channel,                                        --          .channel
			src_startofpacket   => rsp_mux_src_startofpacket,                                  --          .startofpacket
			src_endofpacket     => rsp_mux_src_endofpacket,                                    --          .endofpacket
			sink0_ready         => rsp_demux_src0_ready,                                       --     sink0.ready
			sink0_valid         => rsp_demux_src0_valid,                                       --          .valid
			sink0_channel       => rsp_demux_src0_channel,                                     --          .channel
			sink0_data          => rsp_demux_src0_data,                                        --          .data
			sink0_startofpacket => rsp_demux_src0_startofpacket,                               --          .startofpacket
			sink0_endofpacket   => rsp_demux_src0_endofpacket                                  --          .endofpacket
		);

	rsp_mux_001 : component wasca_mm_interconnect_0_rsp_mux_001
		port map (
			clk                 => altpll_0_c0_clk,                                                                              --       clk.clk
			reset               => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,                                   -- clk_reset.reset
			src_ready           => rsp_mux_001_src_ready,                                                                        --       src.ready
			src_valid           => rsp_mux_001_src_valid,                                                                        --          .valid
			src_data            => rsp_mux_001_src_data,                                                                         --          .data
			src_channel         => rsp_mux_001_src_channel,                                                                      --          .channel
			src_startofpacket   => rsp_mux_001_src_startofpacket,                                                                --          .startofpacket
			src_endofpacket     => rsp_mux_001_src_endofpacket,                                                                  --          .endofpacket
			sink0_ready         => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready,         --     sink0.ready
			sink0_valid         => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid,         --          .valid
			sink0_channel       => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel,       --          .channel
			sink0_data          => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data,          --          .data
			sink0_startofpacket => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket, --          .startofpacket
			sink0_endofpacket   => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket,   --          .endofpacket
			sink1_ready         => rsp_demux_001_src0_ready,                                                                     --     sink1.ready
			sink1_valid         => rsp_demux_001_src0_valid,                                                                     --          .valid
			sink1_channel       => rsp_demux_001_src0_channel,                                                                   --          .channel
			sink1_data          => rsp_demux_001_src0_data,                                                                      --          .data
			sink1_startofpacket => rsp_demux_001_src0_startofpacket,                                                             --          .startofpacket
			sink1_endofpacket   => rsp_demux_001_src0_endofpacket,                                                               --          .endofpacket
			sink2_ready         => rsp_demux_002_src0_ready,                                                                     --     sink2.ready
			sink2_valid         => rsp_demux_002_src0_valid,                                                                     --          .valid
			sink2_channel       => rsp_demux_002_src0_channel,                                                                   --          .channel
			sink2_data          => rsp_demux_002_src0_data,                                                                      --          .data
			sink2_startofpacket => rsp_demux_002_src0_startofpacket,                                                             --          .startofpacket
			sink2_endofpacket   => rsp_demux_002_src0_endofpacket,                                                               --          .endofpacket
			sink3_ready         => crosser_001_out_ready,                                                                        --     sink3.ready
			sink3_valid         => crosser_001_out_valid,                                                                        --          .valid
			sink3_channel       => crosser_001_out_channel,                                                                      --          .channel
			sink3_data          => crosser_001_out_data,                                                                         --          .data
			sink3_startofpacket => crosser_001_out_startofpacket,                                                                --          .startofpacket
			sink3_endofpacket   => crosser_001_out_endofpacket,                                                                  --          .endofpacket
			sink4_ready         => rsp_demux_004_src0_ready,                                                                     --     sink4.ready
			sink4_valid         => rsp_demux_004_src0_valid,                                                                     --          .valid
			sink4_channel       => rsp_demux_004_src0_channel,                                                                   --          .channel
			sink4_data          => rsp_demux_004_src0_data,                                                                      --          .data
			sink4_startofpacket => rsp_demux_004_src0_startofpacket,                                                             --          .startofpacket
			sink4_endofpacket   => rsp_demux_004_src0_endofpacket,                                                               --          .endofpacket
			sink5_ready         => rsp_demux_005_src0_ready,                                                                     --     sink5.ready
			sink5_valid         => rsp_demux_005_src0_valid,                                                                     --          .valid
			sink5_channel       => rsp_demux_005_src0_channel,                                                                   --          .channel
			sink5_data          => rsp_demux_005_src0_data,                                                                      --          .data
			sink5_startofpacket => rsp_demux_005_src0_startofpacket,                                                             --          .startofpacket
			sink5_endofpacket   => rsp_demux_005_src0_endofpacket,                                                               --          .endofpacket
			sink6_ready         => rsp_demux_006_src0_ready,                                                                     --     sink6.ready
			sink6_valid         => rsp_demux_006_src0_valid,                                                                     --          .valid
			sink6_channel       => rsp_demux_006_src0_channel,                                                                   --          .channel
			sink6_data          => rsp_demux_006_src0_data,                                                                      --          .data
			sink6_startofpacket => rsp_demux_006_src0_startofpacket,                                                             --          .startofpacket
			sink6_endofpacket   => rsp_demux_006_src0_endofpacket                                                                --          .endofpacket
		);

	rsp_mux_002 : component wasca_mm_interconnect_0_rsp_mux_002
		port map (
			clk                 => altpll_0_c0_clk,                                            --       clk.clk
			reset               => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => rsp_mux_002_src_ready,                                      --       src.ready
			src_valid           => rsp_mux_002_src_valid,                                      --          .valid
			src_data            => rsp_mux_002_src_data,                                       --          .data
			src_channel         => rsp_mux_002_src_channel,                                    --          .channel
			src_startofpacket   => rsp_mux_002_src_startofpacket,                              --          .startofpacket
			src_endofpacket     => rsp_mux_002_src_endofpacket,                                --          .endofpacket
			sink0_ready         => rsp_demux_001_src1_ready,                                   --     sink0.ready
			sink0_valid         => rsp_demux_001_src1_valid,                                   --          .valid
			sink0_channel       => rsp_demux_001_src1_channel,                                 --          .channel
			sink0_data          => rsp_demux_001_src1_data,                                    --          .data
			sink0_startofpacket => rsp_demux_001_src1_startofpacket,                           --          .startofpacket
			sink0_endofpacket   => rsp_demux_001_src1_endofpacket,                             --          .endofpacket
			sink1_ready         => rsp_demux_002_src1_ready,                                   --     sink1.ready
			sink1_valid         => rsp_demux_002_src1_valid,                                   --          .valid
			sink1_channel       => rsp_demux_002_src1_channel,                                 --          .channel
			sink1_data          => rsp_demux_002_src1_data,                                    --          .data
			sink1_startofpacket => rsp_demux_002_src1_startofpacket,                           --          .startofpacket
			sink1_endofpacket   => rsp_demux_002_src1_endofpacket                              --          .endofpacket
		);

	nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter : component wasca_mm_interconnect_0_nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter
		generic map (
			IN_PKT_ADDR_H                 => 62,
			IN_PKT_ADDR_L                 => 36,
			IN_PKT_DATA_H                 => 31,
			IN_PKT_DATA_L                 => 0,
			IN_PKT_BYTEEN_H               => 35,
			IN_PKT_BYTEEN_L               => 32,
			IN_PKT_BYTE_CNT_H             => 74,
			IN_PKT_BYTE_CNT_L             => 69,
			IN_PKT_TRANS_COMPRESSED_READ  => 63,
			IN_PKT_TRANS_WRITE            => 65,
			IN_PKT_BURSTWRAP_H            => 77,
			IN_PKT_BURSTWRAP_L            => 75,
			IN_PKT_BURST_SIZE_H           => 80,
			IN_PKT_BURST_SIZE_L           => 78,
			IN_PKT_RESPONSE_STATUS_H      => 102,
			IN_PKT_RESPONSE_STATUS_L      => 101,
			IN_PKT_TRANS_EXCLUSIVE        => 68,
			IN_PKT_BURST_TYPE_H           => 82,
			IN_PKT_BURST_TYPE_L           => 81,
			IN_PKT_ORI_BURST_SIZE_L       => 103,
			IN_PKT_ORI_BURST_SIZE_H       => 105,
			IN_ST_DATA_W                  => 106,
			OUT_PKT_ADDR_H                => 44,
			OUT_PKT_ADDR_L                => 18,
			OUT_PKT_DATA_H                => 15,
			OUT_PKT_DATA_L                => 0,
			OUT_PKT_BYTEEN_H              => 17,
			OUT_PKT_BYTEEN_L              => 16,
			OUT_PKT_BYTE_CNT_H            => 56,
			OUT_PKT_BYTE_CNT_L            => 51,
			OUT_PKT_TRANS_COMPRESSED_READ => 45,
			OUT_PKT_BURST_SIZE_H          => 62,
			OUT_PKT_BURST_SIZE_L          => 60,
			OUT_PKT_RESPONSE_STATUS_H     => 84,
			OUT_PKT_RESPONSE_STATUS_L     => 83,
			OUT_PKT_TRANS_EXCLUSIVE       => 50,
			OUT_PKT_BURST_TYPE_H          => 64,
			OUT_PKT_BURST_TYPE_L          => 63,
			OUT_PKT_ORI_BURST_SIZE_L      => 85,
			OUT_PKT_ORI_BURST_SIZE_H      => 87,
			OUT_ST_DATA_W                 => 88,
			ST_CHANNEL_W                  => 7,
			OPTIMIZE_FOR_RSP              => 0,
			RESPONSE_PATH                 => 0,
			CONSTANT_BURST_SIZE           => 1,
			PACKING                       => 1,
			ENABLE_ADDRESS_ALIGNMENT      => 0
		)
		port map (
			clk                  => altpll_0_c0_clk,                                                                              --       clk.clk
			reset                => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,                                   -- clk_reset.reset
			in_valid             => cmd_demux_001_src0_valid,                                                                     --      sink.valid
			in_channel           => cmd_demux_001_src0_channel,                                                                   --          .channel
			in_startofpacket     => cmd_demux_001_src0_startofpacket,                                                             --          .startofpacket
			in_endofpacket       => cmd_demux_001_src0_endofpacket,                                                               --          .endofpacket
			in_ready             => cmd_demux_001_src0_ready,                                                                     --          .ready
			in_data              => cmd_demux_001_src0_data,                                                                      --          .data
			out_endofpacket      => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_endofpacket,   --       src.endofpacket
			out_data             => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_data,          --          .data
			out_channel          => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_channel,       --          .channel
			out_valid            => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_valid,         --          .valid
			out_ready            => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_ready,         --          .ready
			out_startofpacket    => nios2_gen2_0_data_master_to_external_sdram_controller_s1_cmd_width_adapter_src_startofpacket, --          .startofpacket
			in_command_size_data => "000"                                                                                         -- (terminated)
		);

	external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter : component wasca_mm_interconnect_0_external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter
		generic map (
			IN_PKT_ADDR_H                 => 44,
			IN_PKT_ADDR_L                 => 18,
			IN_PKT_DATA_H                 => 15,
			IN_PKT_DATA_L                 => 0,
			IN_PKT_BYTEEN_H               => 17,
			IN_PKT_BYTEEN_L               => 16,
			IN_PKT_BYTE_CNT_H             => 56,
			IN_PKT_BYTE_CNT_L             => 51,
			IN_PKT_TRANS_COMPRESSED_READ  => 45,
			IN_PKT_TRANS_WRITE            => 47,
			IN_PKT_BURSTWRAP_H            => 59,
			IN_PKT_BURSTWRAP_L            => 57,
			IN_PKT_BURST_SIZE_H           => 62,
			IN_PKT_BURST_SIZE_L           => 60,
			IN_PKT_RESPONSE_STATUS_H      => 84,
			IN_PKT_RESPONSE_STATUS_L      => 83,
			IN_PKT_TRANS_EXCLUSIVE        => 50,
			IN_PKT_BURST_TYPE_H           => 64,
			IN_PKT_BURST_TYPE_L           => 63,
			IN_PKT_ORI_BURST_SIZE_L       => 85,
			IN_PKT_ORI_BURST_SIZE_H       => 87,
			IN_ST_DATA_W                  => 88,
			OUT_PKT_ADDR_H                => 62,
			OUT_PKT_ADDR_L                => 36,
			OUT_PKT_DATA_H                => 31,
			OUT_PKT_DATA_L                => 0,
			OUT_PKT_BYTEEN_H              => 35,
			OUT_PKT_BYTEEN_L              => 32,
			OUT_PKT_BYTE_CNT_H            => 74,
			OUT_PKT_BYTE_CNT_L            => 69,
			OUT_PKT_TRANS_COMPRESSED_READ => 63,
			OUT_PKT_BURST_SIZE_H          => 80,
			OUT_PKT_BURST_SIZE_L          => 78,
			OUT_PKT_RESPONSE_STATUS_H     => 102,
			OUT_PKT_RESPONSE_STATUS_L     => 101,
			OUT_PKT_TRANS_EXCLUSIVE       => 68,
			OUT_PKT_BURST_TYPE_H          => 82,
			OUT_PKT_BURST_TYPE_L          => 81,
			OUT_PKT_ORI_BURST_SIZE_L      => 103,
			OUT_PKT_ORI_BURST_SIZE_H      => 105,
			OUT_ST_DATA_W                 => 106,
			ST_CHANNEL_W                  => 7,
			OPTIMIZE_FOR_RSP              => 1,
			RESPONSE_PATH                 => 1,
			CONSTANT_BURST_SIZE           => 1,
			PACKING                       => 1,
			ENABLE_ADDRESS_ALIGNMENT      => 0
		)
		port map (
			clk                  => altpll_0_c0_clk,                                                                              --       clk.clk
			reset                => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset,                                   -- clk_reset.reset
			in_valid             => rsp_demux_src1_valid,                                                                         --      sink.valid
			in_channel           => rsp_demux_src1_channel,                                                                       --          .channel
			in_startofpacket     => rsp_demux_src1_startofpacket,                                                                 --          .startofpacket
			in_endofpacket       => rsp_demux_src1_endofpacket,                                                                   --          .endofpacket
			in_ready             => rsp_demux_src1_ready,                                                                         --          .ready
			in_data              => rsp_demux_src1_data,                                                                          --          .data
			out_endofpacket      => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket,   --       src.endofpacket
			out_data             => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data,          --          .data
			out_channel          => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel,       --          .channel
			out_valid            => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid,         --          .valid
			out_ready            => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready,         --          .ready
			out_startofpacket    => external_sdram_controller_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket, --          .startofpacket
			in_command_size_data => "000"                                                                                         -- (terminated)
		);

	crosser : component altera_avalon_st_handshake_clock_crosser
		generic map (
			DATA_WIDTH          => 106,
			BITS_PER_SYMBOL     => 106,
			USE_PACKETS         => 1,
			USE_CHANNEL         => 1,
			CHANNEL_WIDTH       => 7,
			USE_ERROR           => 0,
			ERROR_WIDTH         => 1,
			VALID_SYNC_DEPTH    => 2,
			READY_SYNC_DEPTH    => 2,
			USE_OUTPUT_PIPELINE => 0
		)
		port map (
			in_clk            => altpll_0_c0_clk,                                            --        in_clk.clk
			in_reset          => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, --  in_clk_reset.reset
			out_clk           => clk_0_clk_clk,                                              --       out_clk.clk
			out_reset         => altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, -- out_clk_reset.reset
			in_ready          => cmd_demux_001_src3_ready,                                   --            in.ready
			in_valid          => cmd_demux_001_src3_valid,                                   --              .valid
			in_startofpacket  => cmd_demux_001_src3_startofpacket,                           --              .startofpacket
			in_endofpacket    => cmd_demux_001_src3_endofpacket,                             --              .endofpacket
			in_channel        => cmd_demux_001_src3_channel,                                 --              .channel
			in_data           => cmd_demux_001_src3_data,                                    --              .data
			out_ready         => crosser_out_ready,                                          --           out.ready
			out_valid         => crosser_out_valid,                                          --              .valid
			out_startofpacket => crosser_out_startofpacket,                                  --              .startofpacket
			out_endofpacket   => crosser_out_endofpacket,                                    --              .endofpacket
			out_channel       => crosser_out_channel,                                        --              .channel
			out_data          => crosser_out_data,                                           --              .data
			in_empty          => "0",                                                        --   (terminated)
			in_error          => "0",                                                        --   (terminated)
			out_empty         => open,                                                       --   (terminated)
			out_error         => open                                                        --   (terminated)
		);

	crosser_001 : component altera_avalon_st_handshake_clock_crosser
		generic map (
			DATA_WIDTH          => 106,
			BITS_PER_SYMBOL     => 106,
			USE_PACKETS         => 1,
			USE_CHANNEL         => 1,
			CHANNEL_WIDTH       => 7,
			USE_ERROR           => 0,
			ERROR_WIDTH         => 1,
			VALID_SYNC_DEPTH    => 2,
			READY_SYNC_DEPTH    => 2,
			USE_OUTPUT_PIPELINE => 0
		)
		port map (
			in_clk            => clk_0_clk_clk,                                              --        in_clk.clk
			in_reset          => altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, --  in_clk_reset.reset
			out_clk           => altpll_0_c0_clk,                                            --       out_clk.clk
			out_reset         => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- out_clk_reset.reset
			in_ready          => rsp_demux_003_src0_ready,                                   --            in.ready
			in_valid          => rsp_demux_003_src0_valid,                                   --              .valid
			in_startofpacket  => rsp_demux_003_src0_startofpacket,                           --              .startofpacket
			in_endofpacket    => rsp_demux_003_src0_endofpacket,                             --              .endofpacket
			in_channel        => rsp_demux_003_src0_channel,                                 --              .channel
			in_data           => rsp_demux_003_src0_data,                                    --              .data
			out_ready         => crosser_001_out_ready,                                      --           out.ready
			out_valid         => crosser_001_out_valid,                                      --              .valid
			out_startofpacket => crosser_001_out_startofpacket,                              --              .startofpacket
			out_endofpacket   => crosser_001_out_endofpacket,                                --              .endofpacket
			out_channel       => crosser_001_out_channel,                                    --              .channel
			out_data          => crosser_001_out_data,                                       --              .data
			in_empty          => "0",                                                        --   (terminated)
			in_error          => "0",                                                        --   (terminated)
			out_empty         => open,                                                       --   (terminated)
			out_error         => open                                                        --   (terminated)
		);

	avalon_st_adapter : component wasca_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 18,
			inUsePackets    => 0,
			inDataWidth     => 18,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 18,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => altpll_0_c0_clk,                                            -- in_clk_0.clk
			in_rst_0_reset => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- in_rst_0.reset
			in_0_data      => external_sdram_controller_s1_agent_rdata_fifo_out_data,     --     in_0.data
			in_0_valid     => external_sdram_controller_s1_agent_rdata_fifo_out_valid,    --         .valid
			in_0_ready     => external_sdram_controller_s1_agent_rdata_fifo_out_ready,    --         .ready
			out_0_data     => avalon_st_adapter_out_0_data,                               --    out_0.data
			out_0_valid    => avalon_st_adapter_out_0_valid,                              --         .valid
			out_0_ready    => avalon_st_adapter_out_0_ready,                              --         .ready
			out_0_error    => avalon_st_adapter_out_0_error                               --         .error
		);

	avalon_st_adapter_001 : component wasca_mm_interconnect_0_avalon_st_adapter_001
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => altpll_0_c0_clk,                                            -- in_clk_0.clk
			in_rst_0_reset => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- in_rst_0.reset
			in_0_data      => onchip_flash_0_data_agent_rdata_fifo_src_data,              --     in_0.data
			in_0_valid     => onchip_flash_0_data_agent_rdata_fifo_src_valid,             --         .valid
			in_0_ready     => onchip_flash_0_data_agent_rdata_fifo_src_ready,             --         .ready
			out_0_data     => avalon_st_adapter_001_out_0_data,                           --    out_0.data
			out_0_valid    => avalon_st_adapter_001_out_0_valid,                          --         .valid
			out_0_ready    => avalon_st_adapter_001_out_0_ready,                          --         .ready
			out_0_error    => avalon_st_adapter_001_out_0_error                           --         .error
		);

	avalon_st_adapter_002 : component wasca_mm_interconnect_0_avalon_st_adapter_001
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => altpll_0_c0_clk,                                            -- in_clk_0.clk
			in_rst_0_reset => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- in_rst_0.reset
			in_0_data      => nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data,     --     in_0.data
			in_0_valid     => nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid,    --         .valid
			in_0_ready     => nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready,    --         .ready
			out_0_data     => avalon_st_adapter_002_out_0_data,                           --    out_0.data
			out_0_valid    => avalon_st_adapter_002_out_0_valid,                          --         .valid
			out_0_ready    => avalon_st_adapter_002_out_0_ready,                          --         .ready
			out_0_error    => avalon_st_adapter_002_out_0_error                           --         .error
		);

	avalon_st_adapter_003 : component wasca_mm_interconnect_0_avalon_st_adapter_001
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => clk_0_clk_clk,                                              -- in_clk_0.clk
			in_rst_0_reset => altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, -- in_rst_0.reset
			in_0_data      => altpll_0_pll_slave_agent_rdata_fifo_out_data,               --     in_0.data
			in_0_valid     => altpll_0_pll_slave_agent_rdata_fifo_out_valid,              --         .valid
			in_0_ready     => altpll_0_pll_slave_agent_rdata_fifo_out_ready,              --         .ready
			out_0_data     => avalon_st_adapter_003_out_0_data,                           --    out_0.data
			out_0_valid    => avalon_st_adapter_003_out_0_valid,                          --         .valid
			out_0_ready    => avalon_st_adapter_003_out_0_ready,                          --         .ready
			out_0_error    => avalon_st_adapter_003_out_0_error                           --         .error
		);

	avalon_st_adapter_004 : component wasca_mm_interconnect_0_avalon_st_adapter_001
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => altpll_0_c0_clk,                                            -- in_clk_0.clk
			in_rst_0_reset => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- in_rst_0.reset
			in_0_data      => onchip_memory2_0_s1_agent_rdata_fifo_src_data,              --     in_0.data
			in_0_valid     => onchip_memory2_0_s1_agent_rdata_fifo_src_valid,             --         .valid
			in_0_ready     => onchip_memory2_0_s1_agent_rdata_fifo_src_ready,             --         .ready
			out_0_data     => avalon_st_adapter_004_out_0_data,                           --    out_0.data
			out_0_valid    => avalon_st_adapter_004_out_0_valid,                          --         .valid
			out_0_ready    => avalon_st_adapter_004_out_0_ready,                          --         .ready
			out_0_error    => avalon_st_adapter_004_out_0_error                           --         .error
		);

	avalon_st_adapter_005 : component wasca_mm_interconnect_0_avalon_st_adapter_001
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => altpll_0_c0_clk,                                            -- in_clk_0.clk
			in_rst_0_reset => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- in_rst_0.reset
			in_0_data      => pio_0_s1_agent_rdata_fifo_src_data,                         --     in_0.data
			in_0_valid     => pio_0_s1_agent_rdata_fifo_src_valid,                        --         .valid
			in_0_ready     => pio_0_s1_agent_rdata_fifo_src_ready,                        --         .ready
			out_0_data     => avalon_st_adapter_005_out_0_data,                           --    out_0.data
			out_0_valid    => avalon_st_adapter_005_out_0_valid,                          --         .valid
			out_0_ready    => avalon_st_adapter_005_out_0_ready,                          --         .ready
			out_0_error    => avalon_st_adapter_005_out_0_error                           --         .error
		);

	avalon_st_adapter_006 : component wasca_mm_interconnect_0_avalon_st_adapter_001
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => altpll_0_c0_clk,                                            -- in_clk_0.clk
			in_rst_0_reset => sega_saturn_abus_slave_0_reset_reset_bridge_in_reset_reset, -- in_rst_0.reset
			in_0_data      => sd_card_spi_spi_control_port_agent_rdata_fifo_src_data,     --     in_0.data
			in_0_valid     => sd_card_spi_spi_control_port_agent_rdata_fifo_src_valid,    --         .valid
			in_0_ready     => sd_card_spi_spi_control_port_agent_rdata_fifo_src_ready,    --         .ready
			out_0_data     => avalon_st_adapter_006_out_0_data,                           --    out_0.data
			out_0_valid    => avalon_st_adapter_006_out_0_valid,                          --         .valid
			out_0_ready    => avalon_st_adapter_006_out_0_ready,                          --         .ready
			out_0_error    => avalon_st_adapter_006_out_0_error                           --         .error
		);

end architecture rtl; -- of wasca_mm_interconnect_0
