-- wasca_nios2_gen2_0.vhd

-- This file was auto-generated from altera_nios2_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 15.0 145

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity wasca_nios2_gen2_0 is
	port (
		clk                                 : in  std_logic                     := '0';             --                       clk.clk
		reset_n                             : in  std_logic                     := '0';             --                     reset.reset_n
		d_address                           : out std_logic_vector(26 downto 0);                    --               data_master.address
		d_byteenable                        : out std_logic_vector(3 downto 0);                     --                          .byteenable
		d_read                              : out std_logic;                                        --                          .read
		d_readdata                          : in  std_logic_vector(31 downto 0) := (others => '0'); --                          .readdata
		d_waitrequest                       : in  std_logic                     := '0';             --                          .waitrequest
		d_write                             : out std_logic;                                        --                          .write
		d_writedata                         : out std_logic_vector(31 downto 0);                    --                          .writedata
		debug_mem_slave_debugaccess_to_roms : out std_logic;                                        --                          .debugaccess
		i_address                           : out std_logic_vector(17 downto 0);                    --        instruction_master.address
		i_read                              : out std_logic;                                        --                          .read
		i_readdata                          : in  std_logic_vector(31 downto 0) := (others => '0'); --                          .readdata
		i_waitrequest                       : in  std_logic                     := '0';             --                          .waitrequest
		irq                                 : in  std_logic_vector(31 downto 0) := (others => '0'); --                       irq.irq
		debug_reset_request                 : out std_logic;                                        --       debug_reset_request.reset
		debug_mem_slave_address             : in  std_logic_vector(8 downto 0)  := (others => '0'); --           debug_mem_slave.address
		debug_mem_slave_byteenable          : in  std_logic_vector(3 downto 0)  := (others => '0'); --                          .byteenable
		debug_mem_slave_debugaccess         : in  std_logic                     := '0';             --                          .debugaccess
		debug_mem_slave_read                : in  std_logic                     := '0';             --                          .read
		debug_mem_slave_readdata            : out std_logic_vector(31 downto 0);                    --                          .readdata
		debug_mem_slave_waitrequest         : out std_logic;                                        --                          .waitrequest
		debug_mem_slave_write               : in  std_logic                     := '0';             --                          .write
		debug_mem_slave_writedata           : in  std_logic_vector(31 downto 0) := (others => '0'); --                          .writedata
		dummy_ci_port                       : out std_logic                                         -- custom_instruction_master.readra
	);
end entity wasca_nios2_gen2_0;

architecture rtl of wasca_nios2_gen2_0 is
	component wasca_nios2_gen2_0_cpu is
		port (
			clk                                 : in  std_logic                     := 'X';             -- clk
			reset_n                             : in  std_logic                     := 'X';             -- reset_n
			d_address                           : out std_logic_vector(26 downto 0);                    -- address
			d_byteenable                        : out std_logic_vector(3 downto 0);                     -- byteenable
			d_read                              : out std_logic;                                        -- read
			d_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			d_waitrequest                       : in  std_logic                     := 'X';             -- waitrequest
			d_write                             : out std_logic;                                        -- write
			d_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			debug_mem_slave_debugaccess_to_roms : out std_logic;                                        -- debugaccess
			i_address                           : out std_logic_vector(17 downto 0);                    -- address
			i_read                              : out std_logic;                                        -- read
			i_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_waitrequest                       : in  std_logic                     := 'X';             -- waitrequest
			irq                                 : in  std_logic_vector(31 downto 0) := (others => 'X'); -- irq
			debug_reset_request                 : out std_logic;                                        -- reset
			debug_mem_slave_address             : in  std_logic_vector(8 downto 0)  := (others => 'X'); -- address
			debug_mem_slave_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			debug_mem_slave_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			debug_mem_slave_read                : in  std_logic                     := 'X';             -- read
			debug_mem_slave_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			debug_mem_slave_waitrequest         : out std_logic;                                        -- waitrequest
			debug_mem_slave_write               : in  std_logic                     := 'X';             -- write
			debug_mem_slave_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			dummy_ci_port                       : out std_logic;                                        -- readra
			reset_req                           : in  std_logic                     := 'X'              -- reset_req
		);
	end component wasca_nios2_gen2_0_cpu;

begin

	cpu : component wasca_nios2_gen2_0_cpu
		port map (
			clk                                 => clk,                                 --                       clk.clk
			reset_n                             => reset_n,                             --                     reset.reset_n
			d_address                           => d_address,                           --               data_master.address
			d_byteenable                        => d_byteenable,                        --                          .byteenable
			d_read                              => d_read,                              --                          .read
			d_readdata                          => d_readdata,                          --                          .readdata
			d_waitrequest                       => d_waitrequest,                       --                          .waitrequest
			d_write                             => d_write,                             --                          .write
			d_writedata                         => d_writedata,                         --                          .writedata
			debug_mem_slave_debugaccess_to_roms => debug_mem_slave_debugaccess_to_roms, --                          .debugaccess
			i_address                           => i_address,                           --        instruction_master.address
			i_read                              => i_read,                              --                          .read
			i_readdata                          => i_readdata,                          --                          .readdata
			i_waitrequest                       => i_waitrequest,                       --                          .waitrequest
			irq                                 => irq,                                 --                       irq.irq
			debug_reset_request                 => debug_reset_request,                 --       debug_reset_request.reset
			debug_mem_slave_address             => debug_mem_slave_address,             --           debug_mem_slave.address
			debug_mem_slave_byteenable          => debug_mem_slave_byteenable,          --                          .byteenable
			debug_mem_slave_debugaccess         => debug_mem_slave_debugaccess,         --                          .debugaccess
			debug_mem_slave_read                => debug_mem_slave_read,                --                          .read
			debug_mem_slave_readdata            => debug_mem_slave_readdata,            --                          .readdata
			debug_mem_slave_waitrequest         => debug_mem_slave_waitrequest,         --                          .waitrequest
			debug_mem_slave_write               => debug_mem_slave_write,               --                          .write
			debug_mem_slave_writedata           => debug_mem_slave_writedata,           --                          .writedata
			dummy_ci_port                       => dummy_ci_port,                       -- custom_instruction_master.readra
			reset_req                           => '0'                                  --               (terminated)
		);

end architecture rtl; -- of wasca_nios2_gen2_0
